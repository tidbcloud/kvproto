// This file is generated by rust-protobuf 2.8.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `autoid.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_0;

#[derive(PartialEq,Clone,Default)]
pub struct AutoIdRequest {
    // message fields
    pub db_id: i64,
    pub tbl_id: i64,
    pub is_unsigned: bool,
    pub n: u64,
    pub increment: i64,
    pub offset: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AutoIdRequest {
    fn default() -> &'a AutoIdRequest {
        <AutoIdRequest as ::protobuf::Message>::default_instance()
    }
}

impl AutoIdRequest {
    pub fn new() -> AutoIdRequest {
        ::std::default::Default::default()
    }

    // int64 dbID = 1;


    pub fn get_db_id(&self) -> i64 {
        self.db_id
    }
    pub fn clear_db_id(&mut self) {
        self.db_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_db_id(&mut self, v: i64) {
        self.db_id = v;
    }

    // int64 tblID = 2;


    pub fn get_tbl_id(&self) -> i64 {
        self.tbl_id
    }
    pub fn clear_tbl_id(&mut self) {
        self.tbl_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_tbl_id(&mut self, v: i64) {
        self.tbl_id = v;
    }

    // bool isUnsigned = 3;


    pub fn get_is_unsigned(&self) -> bool {
        self.is_unsigned
    }
    pub fn clear_is_unsigned(&mut self) {
        self.is_unsigned = false;
    }

    // Param is passed by value, moved
    pub fn set_is_unsigned(&mut self, v: bool) {
        self.is_unsigned = v;
    }

    // uint64 n = 4;


    pub fn get_n(&self) -> u64 {
        self.n
    }
    pub fn clear_n(&mut self) {
        self.n = 0;
    }

    // Param is passed by value, moved
    pub fn set_n(&mut self, v: u64) {
        self.n = v;
    }

    // int64 increment = 5;


    pub fn get_increment(&self) -> i64 {
        self.increment
    }
    pub fn clear_increment(&mut self) {
        self.increment = 0;
    }

    // Param is passed by value, moved
    pub fn set_increment(&mut self, v: i64) {
        self.increment = v;
    }

    // int64 offset = 6;


    pub fn get_offset(&self) -> i64 {
        self.offset
    }
    pub fn clear_offset(&mut self) {
        self.offset = 0;
    }

    // Param is passed by value, moved
    pub fn set_offset(&mut self, v: i64) {
        self.offset = v;
    }
}

impl ::protobuf::Message for AutoIdRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.db_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.tbl_id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_unsigned = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.n = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.increment = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.offset = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.db_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.db_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tbl_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.tbl_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.is_unsigned != false {
            my_size += 2;
        }
        if self.n != 0 {
            my_size += ::protobuf::rt::value_size(4, self.n, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.increment != 0 {
            my_size += ::protobuf::rt::value_size(5, self.increment, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.offset != 0 {
            my_size += ::protobuf::rt::value_size(6, self.offset, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.db_id != 0 {
            os.write_int64(1, self.db_id)?;
        }
        if self.tbl_id != 0 {
            os.write_int64(2, self.tbl_id)?;
        }
        if self.is_unsigned != false {
            os.write_bool(3, self.is_unsigned)?;
        }
        if self.n != 0 {
            os.write_uint64(4, self.n)?;
        }
        if self.increment != 0 {
            os.write_int64(5, self.increment)?;
        }
        if self.offset != 0 {
            os.write_int64(6, self.offset)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AutoIdRequest {
        AutoIdRequest::new()
    }

    fn default_instance() -> &'static AutoIdRequest {
        static mut instance: ::protobuf::lazy::Lazy<AutoIdRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AutoIdRequest,
        };
        unsafe {
            instance.get(AutoIdRequest::new)
        }
    }
}

impl ::protobuf::Clear for AutoIdRequest {
    fn clear(&mut self) {
        self.db_id = 0;
        self.tbl_id = 0;
        self.is_unsigned = false;
        self.n = 0;
        self.increment = 0;
        self.offset = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for AutoIdRequest {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.db_id, "db_id", buf);
        ::protobuf::PbPrint::fmt(&self.tbl_id, "tbl_id", buf);
        ::protobuf::PbPrint::fmt(&self.is_unsigned, "is_unsigned", buf);
        ::protobuf::PbPrint::fmt(&self.n, "n", buf);
        ::protobuf::PbPrint::fmt(&self.increment, "increment", buf);
        ::protobuf::PbPrint::fmt(&self.offset, "offset", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for AutoIdRequest {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.db_id, "db_id", &mut s);
        ::protobuf::PbPrint::fmt(&self.tbl_id, "tbl_id", &mut s);
        ::protobuf::PbPrint::fmt(&self.is_unsigned, "is_unsigned", &mut s);
        ::protobuf::PbPrint::fmt(&self.n, "n", &mut s);
        ::protobuf::PbPrint::fmt(&self.increment, "increment", &mut s);
        ::protobuf::PbPrint::fmt(&self.offset, "offset", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for AutoIdRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AutoIdResponse {
    // message fields
    pub min: i64,
    pub max: i64,
    pub errmsg: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AutoIdResponse {
    fn default() -> &'a AutoIdResponse {
        <AutoIdResponse as ::protobuf::Message>::default_instance()
    }
}

impl AutoIdResponse {
    pub fn new() -> AutoIdResponse {
        ::std::default::Default::default()
    }

    // int64 min = 1;


    pub fn get_min(&self) -> i64 {
        self.min
    }
    pub fn clear_min(&mut self) {
        self.min = 0;
    }

    // Param is passed by value, moved
    pub fn set_min(&mut self, v: i64) {
        self.min = v;
    }

    // int64 max = 2;


    pub fn get_max(&self) -> i64 {
        self.max
    }
    pub fn clear_max(&mut self) {
        self.max = 0;
    }

    // Param is passed by value, moved
    pub fn set_max(&mut self, v: i64) {
        self.max = v;
    }

    // bytes errmsg = 3;


    pub fn get_errmsg(&self) -> &[u8] {
        &self.errmsg
    }
    pub fn clear_errmsg(&mut self) {
        self.errmsg.clear();
    }

    // Param is passed by value, moved
    pub fn set_errmsg(&mut self, v: ::std::vec::Vec<u8>) {
        self.errmsg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_errmsg(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.errmsg
    }

    // Take field
    pub fn take_errmsg(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.errmsg, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for AutoIdResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.min = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.max = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.errmsg)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.min != 0 {
            my_size += ::protobuf::rt::value_size(1, self.min, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.max != 0 {
            my_size += ::protobuf::rt::value_size(2, self.max, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.errmsg.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.errmsg);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.min != 0 {
            os.write_int64(1, self.min)?;
        }
        if self.max != 0 {
            os.write_int64(2, self.max)?;
        }
        if !self.errmsg.is_empty() {
            os.write_bytes(3, &self.errmsg)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AutoIdResponse {
        AutoIdResponse::new()
    }

    fn default_instance() -> &'static AutoIdResponse {
        static mut instance: ::protobuf::lazy::Lazy<AutoIdResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AutoIdResponse,
        };
        unsafe {
            instance.get(AutoIdResponse::new)
        }
    }
}

impl ::protobuf::Clear for AutoIdResponse {
    fn clear(&mut self) {
        self.min = 0;
        self.max = 0;
        self.errmsg.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for AutoIdResponse {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.min, "min", buf);
        ::protobuf::PbPrint::fmt(&self.max, "max", buf);
        ::protobuf::PbPrint::fmt(&self.errmsg, "errmsg", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for AutoIdResponse {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.min, "min", &mut s);
        ::protobuf::PbPrint::fmt(&self.max, "max", &mut s);
        ::protobuf::PbPrint::fmt(&self.errmsg, "errmsg", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for AutoIdResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RebaseRequest {
    // message fields
    pub db_id: i64,
    pub tbl_id: i64,
    pub is_unsigned: bool,
    pub base: i64,
    pub force: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RebaseRequest {
    fn default() -> &'a RebaseRequest {
        <RebaseRequest as ::protobuf::Message>::default_instance()
    }
}

impl RebaseRequest {
    pub fn new() -> RebaseRequest {
        ::std::default::Default::default()
    }

    // int64 dbID = 1;


    pub fn get_db_id(&self) -> i64 {
        self.db_id
    }
    pub fn clear_db_id(&mut self) {
        self.db_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_db_id(&mut self, v: i64) {
        self.db_id = v;
    }

    // int64 tblID = 2;


    pub fn get_tbl_id(&self) -> i64 {
        self.tbl_id
    }
    pub fn clear_tbl_id(&mut self) {
        self.tbl_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_tbl_id(&mut self, v: i64) {
        self.tbl_id = v;
    }

    // bool isUnsigned = 3;


    pub fn get_is_unsigned(&self) -> bool {
        self.is_unsigned
    }
    pub fn clear_is_unsigned(&mut self) {
        self.is_unsigned = false;
    }

    // Param is passed by value, moved
    pub fn set_is_unsigned(&mut self, v: bool) {
        self.is_unsigned = v;
    }

    // int64 base = 4;


    pub fn get_base(&self) -> i64 {
        self.base
    }
    pub fn clear_base(&mut self) {
        self.base = 0;
    }

    // Param is passed by value, moved
    pub fn set_base(&mut self, v: i64) {
        self.base = v;
    }

    // bool force = 5;


    pub fn get_force(&self) -> bool {
        self.force
    }
    pub fn clear_force(&mut self) {
        self.force = false;
    }

    // Param is passed by value, moved
    pub fn set_force(&mut self, v: bool) {
        self.force = v;
    }
}

impl ::protobuf::Message for RebaseRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.db_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.tbl_id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_unsigned = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.base = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.force = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.db_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.db_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tbl_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.tbl_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.is_unsigned != false {
            my_size += 2;
        }
        if self.base != 0 {
            my_size += ::protobuf::rt::value_size(4, self.base, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.force != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.db_id != 0 {
            os.write_int64(1, self.db_id)?;
        }
        if self.tbl_id != 0 {
            os.write_int64(2, self.tbl_id)?;
        }
        if self.is_unsigned != false {
            os.write_bool(3, self.is_unsigned)?;
        }
        if self.base != 0 {
            os.write_int64(4, self.base)?;
        }
        if self.force != false {
            os.write_bool(5, self.force)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RebaseRequest {
        RebaseRequest::new()
    }

    fn default_instance() -> &'static RebaseRequest {
        static mut instance: ::protobuf::lazy::Lazy<RebaseRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RebaseRequest,
        };
        unsafe {
            instance.get(RebaseRequest::new)
        }
    }
}

impl ::protobuf::Clear for RebaseRequest {
    fn clear(&mut self) {
        self.db_id = 0;
        self.tbl_id = 0;
        self.is_unsigned = false;
        self.base = 0;
        self.force = false;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for RebaseRequest {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.db_id, "db_id", buf);
        ::protobuf::PbPrint::fmt(&self.tbl_id, "tbl_id", buf);
        ::protobuf::PbPrint::fmt(&self.is_unsigned, "is_unsigned", buf);
        ::protobuf::PbPrint::fmt(&self.base, "base", buf);
        ::protobuf::PbPrint::fmt(&self.force, "force", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for RebaseRequest {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.db_id, "db_id", &mut s);
        ::protobuf::PbPrint::fmt(&self.tbl_id, "tbl_id", &mut s);
        ::protobuf::PbPrint::fmt(&self.is_unsigned, "is_unsigned", &mut s);
        ::protobuf::PbPrint::fmt(&self.base, "base", &mut s);
        ::protobuf::PbPrint::fmt(&self.force, "force", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for RebaseRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RebaseResponse {
    // message fields
    pub errmsg: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RebaseResponse {
    fn default() -> &'a RebaseResponse {
        <RebaseResponse as ::protobuf::Message>::default_instance()
    }
}

impl RebaseResponse {
    pub fn new() -> RebaseResponse {
        ::std::default::Default::default()
    }

    // bytes errmsg = 1;


    pub fn get_errmsg(&self) -> &[u8] {
        &self.errmsg
    }
    pub fn clear_errmsg(&mut self) {
        self.errmsg.clear();
    }

    // Param is passed by value, moved
    pub fn set_errmsg(&mut self, v: ::std::vec::Vec<u8>) {
        self.errmsg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_errmsg(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.errmsg
    }

    // Take field
    pub fn take_errmsg(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.errmsg, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for RebaseResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.errmsg)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.errmsg.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.errmsg);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.errmsg.is_empty() {
            os.write_bytes(1, &self.errmsg)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RebaseResponse {
        RebaseResponse::new()
    }

    fn default_instance() -> &'static RebaseResponse {
        static mut instance: ::protobuf::lazy::Lazy<RebaseResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RebaseResponse,
        };
        unsafe {
            instance.get(RebaseResponse::new)
        }
    }
}

impl ::protobuf::Clear for RebaseResponse {
    fn clear(&mut self) {
        self.errmsg.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for RebaseResponse {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.errmsg, "errmsg", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for RebaseResponse {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.errmsg, "errmsg", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for RebaseResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}
pub use super::autoid_grpc::*;
