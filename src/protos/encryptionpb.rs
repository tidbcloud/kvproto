// This file is generated by rust-protobuf 2.8.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `encryptionpb.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_0;

#[derive(PartialEq,Clone,Default)]
pub struct EncryptionMeta {
    // message fields
    pub key_id: u64,
    pub iv: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EncryptionMeta {
    fn default() -> &'a EncryptionMeta {
        <EncryptionMeta as ::protobuf::Message>::default_instance()
    }
}

impl EncryptionMeta {
    pub fn new() -> EncryptionMeta {
        ::std::default::Default::default()
    }

    // uint64 key_id = 1;


    pub fn get_key_id(&self) -> u64 {
        self.key_id
    }
    pub fn clear_key_id(&mut self) {
        self.key_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_key_id(&mut self, v: u64) {
        self.key_id = v;
    }

    // bytes iv = 2;


    pub fn get_iv(&self) -> &[u8] {
        &self.iv
    }
    pub fn clear_iv(&mut self) {
        self.iv.clear();
    }

    // Param is passed by value, moved
    pub fn set_iv(&mut self, v: ::std::vec::Vec<u8>) {
        self.iv = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_iv(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.iv
    }

    // Take field
    pub fn take_iv(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.iv, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for EncryptionMeta {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.key_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.iv)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.key_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.key_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.iv.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.iv);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.key_id != 0 {
            os.write_uint64(1, self.key_id)?;
        }
        if !self.iv.is_empty() {
            os.write_bytes(2, &self.iv)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EncryptionMeta {
        EncryptionMeta::new()
    }

    fn default_instance() -> &'static EncryptionMeta {
        static mut instance: ::protobuf::lazy::Lazy<EncryptionMeta> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EncryptionMeta,
        };
        unsafe {
            instance.get(EncryptionMeta::new)
        }
    }
}

impl ::protobuf::Clear for EncryptionMeta {
    fn clear(&mut self) {
        self.key_id = 0;
        self.iv.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for EncryptionMeta {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.key_id, "key_id", buf);
        ::protobuf::PbPrint::fmt(&self.iv, "iv", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for EncryptionMeta {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.key_id, "key_id", &mut s);
        ::protobuf::PbPrint::fmt(&self.iv, "iv", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for EncryptionMeta {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FileInfo {
    // message fields
    pub key_id: u64,
    pub iv: ::std::vec::Vec<u8>,
    pub method: EncryptionMethod,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FileInfo {
    fn default() -> &'a FileInfo {
        <FileInfo as ::protobuf::Message>::default_instance()
    }
}

impl FileInfo {
    pub fn new() -> FileInfo {
        ::std::default::Default::default()
    }

    // uint64 key_id = 1;


    pub fn get_key_id(&self) -> u64 {
        self.key_id
    }
    pub fn clear_key_id(&mut self) {
        self.key_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_key_id(&mut self, v: u64) {
        self.key_id = v;
    }

    // bytes iv = 2;


    pub fn get_iv(&self) -> &[u8] {
        &self.iv
    }
    pub fn clear_iv(&mut self) {
        self.iv.clear();
    }

    // Param is passed by value, moved
    pub fn set_iv(&mut self, v: ::std::vec::Vec<u8>) {
        self.iv = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_iv(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.iv
    }

    // Take field
    pub fn take_iv(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.iv, ::std::vec::Vec::new())
    }

    // .encryptionpb.EncryptionMethod method = 3;


    pub fn get_method(&self) -> EncryptionMethod {
        self.method
    }
    pub fn clear_method(&mut self) {
        self.method = EncryptionMethod::Unknown;
    }

    // Param is passed by value, moved
    pub fn set_method(&mut self, v: EncryptionMethod) {
        self.method = v;
    }
}

impl ::protobuf::Message for FileInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.key_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.iv)?;
                },
                3 => {
                    if wire_type == ::protobuf::wire_format::WireTypeVarint {self.method = is.read_enum()?;} else {return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));}
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.key_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.key_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.iv.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.iv);
        }
        if self.method != EncryptionMethod::Unknown {
            my_size += ::protobuf::rt::enum_size(3, self.method);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.key_id != 0 {
            os.write_uint64(1, self.key_id)?;
        }
        if !self.iv.is_empty() {
            os.write_bytes(2, &self.iv)?;
        }
        if self.method != EncryptionMethod::Unknown {
            os.write_enum(3, self.method.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FileInfo {
        FileInfo::new()
    }

    fn default_instance() -> &'static FileInfo {
        static mut instance: ::protobuf::lazy::Lazy<FileInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FileInfo,
        };
        unsafe {
            instance.get(FileInfo::new)
        }
    }
}

impl ::protobuf::Clear for FileInfo {
    fn clear(&mut self) {
        self.key_id = 0;
        self.iv.clear();
        self.method = EncryptionMethod::Unknown;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for FileInfo {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.key_id, "key_id", buf);
        ::protobuf::PbPrint::fmt(&self.iv, "iv", buf);
        ::protobuf::PbPrint::fmt(&self.method, "method", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for FileInfo {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.key_id, "key_id", &mut s);
        ::protobuf::PbPrint::fmt(&self.iv, "iv", &mut s);
        ::protobuf::PbPrint::fmt(&self.method, "method", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for FileInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FileDictionary {
    // message fields
    pub files: ::std::collections::HashMap<::std::string::String, FileInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FileDictionary {
    fn default() -> &'a FileDictionary {
        <FileDictionary as ::protobuf::Message>::default_instance()
    }
}

impl FileDictionary {
    pub fn new() -> FileDictionary {
        ::std::default::Default::default()
    }

    // repeated .encryptionpb.FileDictionary.FilesEntry files = 1;


    pub fn get_files(&self) -> &::std::collections::HashMap<::std::string::String, FileInfo> {
        &self.files
    }
    pub fn clear_files(&mut self) {
        self.files.clear();
    }

    // Param is passed by value, moved
    pub fn set_files(&mut self, v: ::std::collections::HashMap<::std::string::String, FileInfo>) {
        self.files = v;
    }

    // Mutable pointer to the field.
    pub fn mut_files(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, FileInfo> {
        &mut self.files
    }

    // Take field
    pub fn take_files(&mut self) -> ::std::collections::HashMap<::std::string::String, FileInfo> {
        ::std::mem::replace(&mut self.files, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for FileDictionary {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<FileInfo>>(wire_type, is, &mut self.files)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<FileInfo>>(1, &self.files);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<FileInfo>>(1, &self.files, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FileDictionary {
        FileDictionary::new()
    }

    fn default_instance() -> &'static FileDictionary {
        static mut instance: ::protobuf::lazy::Lazy<FileDictionary> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FileDictionary,
        };
        unsafe {
            instance.get(FileDictionary::new)
        }
    }
}

impl ::protobuf::Clear for FileDictionary {
    fn clear(&mut self) {
        self.files.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for FileDictionary {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.files, "files", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for FileDictionary {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.files, "files", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for FileDictionary {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DataKey {
    // message fields
    pub key: ::std::vec::Vec<u8>,
    pub method: EncryptionMethod,
    pub creation_time: u64,
    pub was_exposed: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DataKey {
    fn default() -> &'a DataKey {
        <DataKey as ::protobuf::Message>::default_instance()
    }
}

impl DataKey {
    pub fn new() -> DataKey {
        ::std::default::Default::default()
    }

    // bytes key = 1;


    pub fn get_key(&self) -> &[u8] {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.key, ::std::vec::Vec::new())
    }

    // .encryptionpb.EncryptionMethod method = 2;


    pub fn get_method(&self) -> EncryptionMethod {
        self.method
    }
    pub fn clear_method(&mut self) {
        self.method = EncryptionMethod::Unknown;
    }

    // Param is passed by value, moved
    pub fn set_method(&mut self, v: EncryptionMethod) {
        self.method = v;
    }

    // uint64 creation_time = 3;


    pub fn get_creation_time(&self) -> u64 {
        self.creation_time
    }
    pub fn clear_creation_time(&mut self) {
        self.creation_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_creation_time(&mut self, v: u64) {
        self.creation_time = v;
    }

    // bool was_exposed = 4;


    pub fn get_was_exposed(&self) -> bool {
        self.was_exposed
    }
    pub fn clear_was_exposed(&mut self) {
        self.was_exposed = false;
    }

    // Param is passed by value, moved
    pub fn set_was_exposed(&mut self, v: bool) {
        self.was_exposed = v;
    }
}

impl ::protobuf::Message for DataKey {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    if wire_type == ::protobuf::wire_format::WireTypeVarint {self.method = is.read_enum()?;} else {return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));}
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.creation_time = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.was_exposed = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.key);
        }
        if self.method != EncryptionMethod::Unknown {
            my_size += ::protobuf::rt::enum_size(2, self.method);
        }
        if self.creation_time != 0 {
            my_size += ::protobuf::rt::value_size(3, self.creation_time, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.was_exposed != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.key.is_empty() {
            os.write_bytes(1, &self.key)?;
        }
        if self.method != EncryptionMethod::Unknown {
            os.write_enum(2, self.method.value())?;
        }
        if self.creation_time != 0 {
            os.write_uint64(3, self.creation_time)?;
        }
        if self.was_exposed != false {
            os.write_bool(4, self.was_exposed)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DataKey {
        DataKey::new()
    }

    fn default_instance() -> &'static DataKey {
        static mut instance: ::protobuf::lazy::Lazy<DataKey> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DataKey,
        };
        unsafe {
            instance.get(DataKey::new)
        }
    }
}

impl ::protobuf::Clear for DataKey {
    fn clear(&mut self) {
        self.key.clear();
        self.method = EncryptionMethod::Unknown;
        self.creation_time = 0;
        self.was_exposed = false;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for DataKey {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.key, "key", buf);
        ::protobuf::PbPrint::fmt(&self.method, "method", buf);
        ::protobuf::PbPrint::fmt(&self.creation_time, "creation_time", buf);
        ::protobuf::PbPrint::fmt(&self.was_exposed, "was_exposed", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for DataKey {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.key, "key", &mut s);
        ::protobuf::PbPrint::fmt(&self.method, "method", &mut s);
        ::protobuf::PbPrint::fmt(&self.creation_time, "creation_time", &mut s);
        ::protobuf::PbPrint::fmt(&self.was_exposed, "was_exposed", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for DataKey {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct KeyDictionary {
    // message fields
    pub keys: ::std::collections::HashMap<u64, DataKey>,
    pub current_key_id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a KeyDictionary {
    fn default() -> &'a KeyDictionary {
        <KeyDictionary as ::protobuf::Message>::default_instance()
    }
}

impl KeyDictionary {
    pub fn new() -> KeyDictionary {
        ::std::default::Default::default()
    }

    // repeated .encryptionpb.KeyDictionary.KeysEntry keys = 1;


    pub fn get_keys(&self) -> &::std::collections::HashMap<u64, DataKey> {
        &self.keys
    }
    pub fn clear_keys(&mut self) {
        self.keys.clear();
    }

    // Param is passed by value, moved
    pub fn set_keys(&mut self, v: ::std::collections::HashMap<u64, DataKey>) {
        self.keys = v;
    }

    // Mutable pointer to the field.
    pub fn mut_keys(&mut self) -> &mut ::std::collections::HashMap<u64, DataKey> {
        &mut self.keys
    }

    // Take field
    pub fn take_keys(&mut self) -> ::std::collections::HashMap<u64, DataKey> {
        ::std::mem::replace(&mut self.keys, ::std::collections::HashMap::new())
    }

    // uint64 current_key_id = 2;


    pub fn get_current_key_id(&self) -> u64 {
        self.current_key_id
    }
    pub fn clear_current_key_id(&mut self) {
        self.current_key_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_current_key_id(&mut self, v: u64) {
        self.current_key_id = v;
    }
}

impl ::protobuf::Message for KeyDictionary {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeUint64, ::protobuf::types::ProtobufTypeMessage<DataKey>>(wire_type, is, &mut self.keys)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.current_key_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeUint64, ::protobuf::types::ProtobufTypeMessage<DataKey>>(1, &self.keys);
        if self.current_key_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.current_key_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeUint64, ::protobuf::types::ProtobufTypeMessage<DataKey>>(1, &self.keys, os)?;
        if self.current_key_id != 0 {
            os.write_uint64(2, self.current_key_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> KeyDictionary {
        KeyDictionary::new()
    }

    fn default_instance() -> &'static KeyDictionary {
        static mut instance: ::protobuf::lazy::Lazy<KeyDictionary> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const KeyDictionary,
        };
        unsafe {
            instance.get(KeyDictionary::new)
        }
    }
}

impl ::protobuf::Clear for KeyDictionary {
    fn clear(&mut self) {
        self.keys.clear();
        self.current_key_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for KeyDictionary {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.keys, "keys", buf);
        ::protobuf::PbPrint::fmt(&self.current_key_id, "current_key_id", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for KeyDictionary {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.keys, "keys", &mut s);
        ::protobuf::PbPrint::fmt(&self.current_key_id, "current_key_id", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for KeyDictionary {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MasterKey {
    // message oneof groups
    pub backend: ::std::option::Option<MasterKey_oneof_backend>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MasterKey {
    fn default() -> &'a MasterKey {
        <MasterKey as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq)]
pub enum MasterKey_oneof_backend {
    Plaintext(MasterKeyPlaintext),
    File(MasterKeyFile),
    Kms(MasterKeyKms),
}

impl ::protobuf::PbPrint for MasterKey_oneof_backend {
    fn fmt(&self, name: &str, buf: &mut String) {
        match self {
            MasterKey_oneof_backend::Plaintext(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            MasterKey_oneof_backend::File(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            MasterKey_oneof_backend::Kms(v) => ::protobuf::PbPrint::fmt(v, name, buf),
        }
    }
}

impl MasterKey {
    pub fn new() -> MasterKey {
        ::std::default::Default::default()
    }

    // .encryptionpb.MasterKeyPlaintext plaintext = 1;


    pub fn get_plaintext(&self) -> &MasterKeyPlaintext {
        match self.backend {
            ::std::option::Option::Some(MasterKey_oneof_backend::Plaintext(ref v)) => v,
            _ => MasterKeyPlaintext::default_instance(),
        }
    }
    pub fn clear_plaintext(&mut self) {
        self.backend = ::std::option::Option::None;
    }

    pub fn has_plaintext(&self) -> bool {
        match self.backend {
            ::std::option::Option::Some(MasterKey_oneof_backend::Plaintext(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_plaintext(&mut self, v: MasterKeyPlaintext) {
        self.backend = ::std::option::Option::Some(MasterKey_oneof_backend::Plaintext(v))
    }

    // Mutable pointer to the field.
    pub fn mut_plaintext(&mut self) -> &mut MasterKeyPlaintext {
        if let ::std::option::Option::Some(MasterKey_oneof_backend::Plaintext(_)) = self.backend {
        } else {
            self.backend = ::std::option::Option::Some(MasterKey_oneof_backend::Plaintext(MasterKeyPlaintext::new()));
        }
        match self.backend {
            ::std::option::Option::Some(MasterKey_oneof_backend::Plaintext(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_plaintext(&mut self) -> MasterKeyPlaintext {
        if self.has_plaintext() {
            match self.backend.take() {
                ::std::option::Option::Some(MasterKey_oneof_backend::Plaintext(v)) => v,
                _ => panic!(),
            }
        } else {
            MasterKeyPlaintext::new()
        }
    }

    // .encryptionpb.MasterKeyFile file = 2;


    pub fn get_file(&self) -> &MasterKeyFile {
        match self.backend {
            ::std::option::Option::Some(MasterKey_oneof_backend::File(ref v)) => v,
            _ => MasterKeyFile::default_instance(),
        }
    }
    pub fn clear_file(&mut self) {
        self.backend = ::std::option::Option::None;
    }

    pub fn has_file(&self) -> bool {
        match self.backend {
            ::std::option::Option::Some(MasterKey_oneof_backend::File(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_file(&mut self, v: MasterKeyFile) {
        self.backend = ::std::option::Option::Some(MasterKey_oneof_backend::File(v))
    }

    // Mutable pointer to the field.
    pub fn mut_file(&mut self) -> &mut MasterKeyFile {
        if let ::std::option::Option::Some(MasterKey_oneof_backend::File(_)) = self.backend {
        } else {
            self.backend = ::std::option::Option::Some(MasterKey_oneof_backend::File(MasterKeyFile::new()));
        }
        match self.backend {
            ::std::option::Option::Some(MasterKey_oneof_backend::File(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_file(&mut self) -> MasterKeyFile {
        if self.has_file() {
            match self.backend.take() {
                ::std::option::Option::Some(MasterKey_oneof_backend::File(v)) => v,
                _ => panic!(),
            }
        } else {
            MasterKeyFile::new()
        }
    }

    // .encryptionpb.MasterKeyKms kms = 3;


    pub fn get_kms(&self) -> &MasterKeyKms {
        match self.backend {
            ::std::option::Option::Some(MasterKey_oneof_backend::Kms(ref v)) => v,
            _ => MasterKeyKms::default_instance(),
        }
    }
    pub fn clear_kms(&mut self) {
        self.backend = ::std::option::Option::None;
    }

    pub fn has_kms(&self) -> bool {
        match self.backend {
            ::std::option::Option::Some(MasterKey_oneof_backend::Kms(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_kms(&mut self, v: MasterKeyKms) {
        self.backend = ::std::option::Option::Some(MasterKey_oneof_backend::Kms(v))
    }

    // Mutable pointer to the field.
    pub fn mut_kms(&mut self) -> &mut MasterKeyKms {
        if let ::std::option::Option::Some(MasterKey_oneof_backend::Kms(_)) = self.backend {
        } else {
            self.backend = ::std::option::Option::Some(MasterKey_oneof_backend::Kms(MasterKeyKms::new()));
        }
        match self.backend {
            ::std::option::Option::Some(MasterKey_oneof_backend::Kms(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_kms(&mut self) -> MasterKeyKms {
        if self.has_kms() {
            match self.backend.take() {
                ::std::option::Option::Some(MasterKey_oneof_backend::Kms(v)) => v,
                _ => panic!(),
            }
        } else {
            MasterKeyKms::new()
        }
    }
}

impl ::protobuf::Message for MasterKey {
    fn is_initialized(&self) -> bool {
        if let Some(MasterKey_oneof_backend::Plaintext(ref v)) = self.backend {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(MasterKey_oneof_backend::File(ref v)) = self.backend {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(MasterKey_oneof_backend::Kms(ref v)) = self.backend {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.backend = ::std::option::Option::Some(MasterKey_oneof_backend::Plaintext(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.backend = ::std::option::Option::Some(MasterKey_oneof_backend::File(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.backend = ::std::option::Option::Some(MasterKey_oneof_backend::Kms(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.backend {
            match v {
                &MasterKey_oneof_backend::Plaintext(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &MasterKey_oneof_backend::File(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &MasterKey_oneof_backend::Kms(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.backend {
            match v {
                &MasterKey_oneof_backend::Plaintext(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &MasterKey_oneof_backend::File(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &MasterKey_oneof_backend::Kms(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MasterKey {
        MasterKey::new()
    }

    fn default_instance() -> &'static MasterKey {
        static mut instance: ::protobuf::lazy::Lazy<MasterKey> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MasterKey,
        };
        unsafe {
            instance.get(MasterKey::new)
        }
    }
}

impl ::protobuf::Clear for MasterKey {
    fn clear(&mut self) {
        self.backend = ::std::option::Option::None;
        self.backend = ::std::option::Option::None;
        self.backend = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for MasterKey {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.backend, "backend", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for MasterKey {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.backend, "backend", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for MasterKey {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MasterKeyPlaintext {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MasterKeyPlaintext {
    fn default() -> &'a MasterKeyPlaintext {
        <MasterKeyPlaintext as ::protobuf::Message>::default_instance()
    }
}

impl MasterKeyPlaintext {
    pub fn new() -> MasterKeyPlaintext {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MasterKeyPlaintext {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MasterKeyPlaintext {
        MasterKeyPlaintext::new()
    }

    fn default_instance() -> &'static MasterKeyPlaintext {
        static mut instance: ::protobuf::lazy::Lazy<MasterKeyPlaintext> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MasterKeyPlaintext,
        };
        unsafe {
            instance.get(MasterKeyPlaintext::new)
        }
    }
}

impl ::protobuf::Clear for MasterKeyPlaintext {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for MasterKeyPlaintext {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
    }
}
impl ::std::fmt::Debug for MasterKeyPlaintext {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        Ok(())
    }
}

impl ::protobuf::reflect::ProtobufValue for MasterKeyPlaintext {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MasterKeyFile {
    // message fields
    pub path: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MasterKeyFile {
    fn default() -> &'a MasterKeyFile {
        <MasterKeyFile as ::protobuf::Message>::default_instance()
    }
}

impl MasterKeyFile {
    pub fn new() -> MasterKeyFile {
        ::std::default::Default::default()
    }

    // string path = 1;


    pub fn get_path(&self) -> &str {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MasterKeyFile {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.path);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.path.is_empty() {
            os.write_string(1, &self.path)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MasterKeyFile {
        MasterKeyFile::new()
    }

    fn default_instance() -> &'static MasterKeyFile {
        static mut instance: ::protobuf::lazy::Lazy<MasterKeyFile> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MasterKeyFile,
        };
        unsafe {
            instance.get(MasterKeyFile::new)
        }
    }
}

impl ::protobuf::Clear for MasterKeyFile {
    fn clear(&mut self) {
        self.path.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for MasterKeyFile {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.path, "path", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for MasterKeyFile {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.path, "path", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for MasterKeyFile {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MasterKeyKms {
    // message fields
    pub vendor: ::std::string::String,
    pub key_id: ::std::string::String,
    pub region: ::std::string::String,
    pub endpoint: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MasterKeyKms {
    fn default() -> &'a MasterKeyKms {
        <MasterKeyKms as ::protobuf::Message>::default_instance()
    }
}

impl MasterKeyKms {
    pub fn new() -> MasterKeyKms {
        ::std::default::Default::default()
    }

    // string vendor = 1;


    pub fn get_vendor(&self) -> &str {
        &self.vendor
    }
    pub fn clear_vendor(&mut self) {
        self.vendor.clear();
    }

    // Param is passed by value, moved
    pub fn set_vendor(&mut self, v: ::std::string::String) {
        self.vendor = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vendor(&mut self) -> &mut ::std::string::String {
        &mut self.vendor
    }

    // Take field
    pub fn take_vendor(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.vendor, ::std::string::String::new())
    }

    // string key_id = 2;


    pub fn get_key_id(&self) -> &str {
        &self.key_id
    }
    pub fn clear_key_id(&mut self) {
        self.key_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_key_id(&mut self, v: ::std::string::String) {
        self.key_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key_id(&mut self) -> &mut ::std::string::String {
        &mut self.key_id
    }

    // Take field
    pub fn take_key_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key_id, ::std::string::String::new())
    }

    // string region = 3;


    pub fn get_region(&self) -> &str {
        &self.region
    }
    pub fn clear_region(&mut self) {
        self.region.clear();
    }

    // Param is passed by value, moved
    pub fn set_region(&mut self, v: ::std::string::String) {
        self.region = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_region(&mut self) -> &mut ::std::string::String {
        &mut self.region
    }

    // Take field
    pub fn take_region(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.region, ::std::string::String::new())
    }

    // string endpoint = 4;


    pub fn get_endpoint(&self) -> &str {
        &self.endpoint
    }
    pub fn clear_endpoint(&mut self) {
        self.endpoint.clear();
    }

    // Param is passed by value, moved
    pub fn set_endpoint(&mut self, v: ::std::string::String) {
        self.endpoint = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_endpoint(&mut self) -> &mut ::std::string::String {
        &mut self.endpoint
    }

    // Take field
    pub fn take_endpoint(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.endpoint, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MasterKeyKms {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.vendor)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.region)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.endpoint)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.vendor.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.vendor);
        }
        if !self.key_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.key_id);
        }
        if !self.region.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.region);
        }
        if !self.endpoint.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.endpoint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.vendor.is_empty() {
            os.write_string(1, &self.vendor)?;
        }
        if !self.key_id.is_empty() {
            os.write_string(2, &self.key_id)?;
        }
        if !self.region.is_empty() {
            os.write_string(3, &self.region)?;
        }
        if !self.endpoint.is_empty() {
            os.write_string(4, &self.endpoint)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MasterKeyKms {
        MasterKeyKms::new()
    }

    fn default_instance() -> &'static MasterKeyKms {
        static mut instance: ::protobuf::lazy::Lazy<MasterKeyKms> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MasterKeyKms,
        };
        unsafe {
            instance.get(MasterKeyKms::new)
        }
    }
}

impl ::protobuf::Clear for MasterKeyKms {
    fn clear(&mut self) {
        self.vendor.clear();
        self.key_id.clear();
        self.region.clear();
        self.endpoint.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for MasterKeyKms {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.vendor, "vendor", buf);
        ::protobuf::PbPrint::fmt(&self.key_id, "key_id", buf);
        ::protobuf::PbPrint::fmt(&self.region, "region", buf);
        ::protobuf::PbPrint::fmt(&self.endpoint, "endpoint", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for MasterKeyKms {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.vendor, "vendor", &mut s);
        ::protobuf::PbPrint::fmt(&self.key_id, "key_id", &mut s);
        ::protobuf::PbPrint::fmt(&self.region, "region", &mut s);
        ::protobuf::PbPrint::fmt(&self.endpoint, "endpoint", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for MasterKeyKms {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EncryptedContent {
    // message fields
    pub metadata: ::std::collections::HashMap<::std::string::String, ::std::vec::Vec<u8>>,
    pub content: ::std::vec::Vec<u8>,
    pub master_key: ::protobuf::SingularPtrField<MasterKey>,
    pub iv: ::std::vec::Vec<u8>,
    pub ciphertext_key: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EncryptedContent {
    fn default() -> &'a EncryptedContent {
        <EncryptedContent as ::protobuf::Message>::default_instance()
    }
}

impl EncryptedContent {
    pub fn new() -> EncryptedContent {
        ::std::default::Default::default()
    }

    // repeated .encryptionpb.EncryptedContent.MetadataEntry metadata = 1;


    pub fn get_metadata(&self) -> &::std::collections::HashMap<::std::string::String, ::std::vec::Vec<u8>> {
        &self.metadata
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::vec::Vec<u8>>) {
        self.metadata = v;
    }

    // Mutable pointer to the field.
    pub fn mut_metadata(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::vec::Vec<u8>> {
        &mut self.metadata
    }

    // Take field
    pub fn take_metadata(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.metadata, ::std::collections::HashMap::new())
    }

    // bytes content = 2;


    pub fn get_content(&self) -> &[u8] {
        &self.content
    }
    pub fn clear_content(&mut self) {
        self.content.clear();
    }

    // Param is passed by value, moved
    pub fn set_content(&mut self, v: ::std::vec::Vec<u8>) {
        self.content = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_content(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.content
    }

    // Take field
    pub fn take_content(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.content, ::std::vec::Vec::new())
    }

    // .encryptionpb.MasterKey master_key = 3;


    pub fn get_master_key(&self) -> &MasterKey {
        self.master_key.as_ref().unwrap_or_else(|| MasterKey::default_instance())
    }
    pub fn clear_master_key(&mut self) {
        self.master_key.clear();
    }

    pub fn has_master_key(&self) -> bool {
        self.master_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_master_key(&mut self, v: MasterKey) {
        self.master_key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_master_key(&mut self) -> &mut MasterKey {
        if self.master_key.is_none() {
            self.master_key.set_default();
        }
        self.master_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_master_key(&mut self) -> MasterKey {
        self.master_key.take().unwrap_or_else(|| MasterKey::new())
    }

    // bytes iv = 4;


    pub fn get_iv(&self) -> &[u8] {
        &self.iv
    }
    pub fn clear_iv(&mut self) {
        self.iv.clear();
    }

    // Param is passed by value, moved
    pub fn set_iv(&mut self, v: ::std::vec::Vec<u8>) {
        self.iv = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_iv(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.iv
    }

    // Take field
    pub fn take_iv(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.iv, ::std::vec::Vec::new())
    }

    // bytes ciphertext_key = 5;


    pub fn get_ciphertext_key(&self) -> &[u8] {
        &self.ciphertext_key
    }
    pub fn clear_ciphertext_key(&mut self) {
        self.ciphertext_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_ciphertext_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.ciphertext_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ciphertext_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.ciphertext_key
    }

    // Take field
    pub fn take_ciphertext_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.ciphertext_key, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for EncryptedContent {
    fn is_initialized(&self) -> bool {
        for v in &self.master_key {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeBytes>(wire_type, is, &mut self.metadata)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.content)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.master_key)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.iv)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.ciphertext_key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeBytes>(1, &self.metadata);
        if !self.content.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.content);
        }
        if let Some(ref v) = self.master_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.iv.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.iv);
        }
        if !self.ciphertext_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.ciphertext_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeBytes>(1, &self.metadata, os)?;
        if !self.content.is_empty() {
            os.write_bytes(2, &self.content)?;
        }
        if let Some(ref v) = self.master_key.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.iv.is_empty() {
            os.write_bytes(4, &self.iv)?;
        }
        if !self.ciphertext_key.is_empty() {
            os.write_bytes(5, &self.ciphertext_key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EncryptedContent {
        EncryptedContent::new()
    }

    fn default_instance() -> &'static EncryptedContent {
        static mut instance: ::protobuf::lazy::Lazy<EncryptedContent> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EncryptedContent,
        };
        unsafe {
            instance.get(EncryptedContent::new)
        }
    }
}

impl ::protobuf::Clear for EncryptedContent {
    fn clear(&mut self) {
        self.metadata.clear();
        self.content.clear();
        self.master_key.clear();
        self.iv.clear();
        self.ciphertext_key.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for EncryptedContent {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.metadata, "metadata", buf);
        ::protobuf::PbPrint::fmt(&self.content, "content", buf);
        ::protobuf::PbPrint::fmt(&self.master_key, "master_key", buf);
        ::protobuf::PbPrint::fmt(&self.iv, "iv", buf);
        ::protobuf::PbPrint::fmt(&self.ciphertext_key, "ciphertext_key", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for EncryptedContent {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.metadata, "metadata", &mut s);
        ::protobuf::PbPrint::fmt(&self.content, "content", &mut s);
        ::protobuf::PbPrint::fmt(&self.master_key, "master_key", &mut s);
        ::protobuf::PbPrint::fmt(&self.iv, "iv", &mut s);
        ::protobuf::PbPrint::fmt(&self.ciphertext_key, "ciphertext_key", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for EncryptedContent {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum EncryptionMethod {
    Unknown = 0,
    Plaintext = 1,
    Aes128Ctr = 2,
    Aes192Ctr = 3,
    Aes256Ctr = 4,
    Sm4Ctr = 5,
}

impl ::protobuf::ProtobufEnum for EncryptionMethod {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EncryptionMethod> {
        match value {
            0 => ::std::option::Option::Some(EncryptionMethod::Unknown),
            1 => ::std::option::Option::Some(EncryptionMethod::Plaintext),
            2 => ::std::option::Option::Some(EncryptionMethod::Aes128Ctr),
            3 => ::std::option::Option::Some(EncryptionMethod::Aes192Ctr),
            4 => ::std::option::Option::Some(EncryptionMethod::Aes256Ctr),
            5 => ::std::option::Option::Some(EncryptionMethod::Sm4Ctr),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EncryptionMethod] = &[
            EncryptionMethod::Unknown,
            EncryptionMethod::Plaintext,
            EncryptionMethod::Aes128Ctr,
            EncryptionMethod::Aes192Ctr,
            EncryptionMethod::Aes256Ctr,
            EncryptionMethod::Sm4Ctr,
        ];
        values
    }
}

impl ::std::marker::Copy for EncryptionMethod {
}

impl ::protobuf::PbPrint for EncryptionMethod {
    fn fmt(&self, name: &str, buf: &mut String) {
        use std::fmt::Write;
        if *self == EncryptionMethod::default() {
            return;
        }
        ::protobuf::push_field_start(name, buf);
        write!(buf, "{:?}", self).unwrap();
    }
}

impl ::std::default::Default for EncryptionMethod {
    fn default() -> Self {
        EncryptionMethod::Unknown
    }
}

impl ::protobuf::reflect::ProtobufValue for EncryptionMethod {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}
