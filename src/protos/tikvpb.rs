// This file is generated by rust-protobuf 2.8.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tikvpb.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_0;

#[derive(PartialEq,Clone,Default)]
pub struct BatchCommandsRequest {
    // message fields
    pub requests: ::protobuf::RepeatedField<BatchCommandsRequestRequest>,
    pub request_ids: ::std::vec::Vec<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BatchCommandsRequest {
    fn default() -> &'a BatchCommandsRequest {
        <BatchCommandsRequest as ::protobuf::Message>::default_instance()
    }
}

impl BatchCommandsRequest {
    pub fn new() -> BatchCommandsRequest {
        ::std::default::Default::default()
    }

    // repeated .tikvpb.BatchCommandsRequest.Request requests = 1;


    pub fn get_requests(&self) -> &[BatchCommandsRequestRequest] {
        &self.requests
    }
    pub fn clear_requests(&mut self) {
        self.requests.clear();
    }

    // Param is passed by value, moved
    pub fn set_requests(&mut self, v: ::protobuf::RepeatedField<BatchCommandsRequestRequest>) {
        self.requests = v;
    }

    // Mutable pointer to the field.
    pub fn mut_requests(&mut self) -> &mut ::protobuf::RepeatedField<BatchCommandsRequestRequest> {
        &mut self.requests
    }

    // Take field
    pub fn take_requests(&mut self) -> ::protobuf::RepeatedField<BatchCommandsRequestRequest> {
        ::std::mem::replace(&mut self.requests, ::protobuf::RepeatedField::new())
    }

    // repeated uint64 request_ids = 2;


    pub fn get_request_ids(&self) -> &[u64] {
        &self.request_ids
    }
    pub fn clear_request_ids(&mut self) {
        self.request_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_request_ids(&mut self, v: ::std::vec::Vec<u64>) {
        self.request_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_request_ids(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.request_ids
    }

    // Take field
    pub fn take_request_ids(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.request_ids, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for BatchCommandsRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.requests {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.requests)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.request_ids)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.requests {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.request_ids {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.requests {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.request_ids {
            os.write_uint64(2, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BatchCommandsRequest {
        BatchCommandsRequest::new()
    }

    fn default_instance() -> &'static BatchCommandsRequest {
        static mut instance: ::protobuf::lazy::Lazy<BatchCommandsRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BatchCommandsRequest,
        };
        unsafe {
            instance.get(BatchCommandsRequest::new)
        }
    }
}

impl ::protobuf::Clear for BatchCommandsRequest {
    fn clear(&mut self) {
        self.requests.clear();
        self.request_ids.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for BatchCommandsRequest {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.requests, "requests", buf);
        ::protobuf::PbPrint::fmt(&self.request_ids, "request_ids", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for BatchCommandsRequest {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.requests, "requests", &mut s);
        ::protobuf::PbPrint::fmt(&self.request_ids, "request_ids", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchCommandsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BatchCommandsRequestRequest {
    // message oneof groups
    pub cmd: ::std::option::Option<BatchCommandsRequest_Request_oneof_cmd>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BatchCommandsRequestRequest {
    fn default() -> &'a BatchCommandsRequestRequest {
        <BatchCommandsRequestRequest as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq)]
pub enum BatchCommandsRequest_Request_oneof_cmd {
    Get(super::kvrpcpb::GetRequest),
    Scan(super::kvrpcpb::ScanRequest),
    Prewrite(super::kvrpcpb::PrewriteRequest),
    Commit(super::kvrpcpb::CommitRequest),
    Import(super::kvrpcpb::ImportRequest),
    Cleanup(super::kvrpcpb::CleanupRequest),
    BatchGet(super::kvrpcpb::BatchGetRequest),
    BatchRollback(super::kvrpcpb::BatchRollbackRequest),
    ScanLock(super::kvrpcpb::ScanLockRequest),
    ResolveLock(super::kvrpcpb::ResolveLockRequest),
    Gc(super::kvrpcpb::GcRequest),
    DeleteRange(super::kvrpcpb::DeleteRangeRequest),
    RawGet(super::kvrpcpb::RawGetRequest),
    RawBatchGet(super::kvrpcpb::RawBatchGetRequest),
    RawPut(super::kvrpcpb::RawPutRequest),
    RawBatchPut(super::kvrpcpb::RawBatchPutRequest),
    RawDelete(super::kvrpcpb::RawDeleteRequest),
    RawBatchDelete(super::kvrpcpb::RawBatchDeleteRequest),
    RawScan(super::kvrpcpb::RawScanRequest),
    RawDeleteRange(super::kvrpcpb::RawDeleteRangeRequest),
    RawBatchScan(super::kvrpcpb::RawBatchScanRequest),
    Coprocessor(super::coprocessor::Request),
    PessimisticLock(super::kvrpcpb::PessimisticLockRequest),
    PessimisticRollback(super::kvrpcpb::PessimisticRollbackRequest),
    CheckTxnStatus(super::kvrpcpb::CheckTxnStatusRequest),
    TxnHeartBeat(super::kvrpcpb::TxnHeartBeatRequest),
    CheckSecondaryLocks(super::kvrpcpb::CheckSecondaryLocksRequest),
    RawCoprocessor(super::kvrpcpb::RawCoprocessorRequest),
    FlashbackToVersion(super::kvrpcpb::FlashbackToVersionRequest),
    Empty(BatchCommandsEmptyRequest),
}

impl ::protobuf::PbPrint for BatchCommandsRequest_Request_oneof_cmd {
    fn fmt(&self, name: &str, buf: &mut String) {
        match self {
            BatchCommandsRequest_Request_oneof_cmd::Get(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::Scan(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::Prewrite(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::Commit(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::Import(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::Cleanup(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::BatchGet(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::BatchRollback(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::ScanLock(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::ResolveLock(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::Gc(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::DeleteRange(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::RawGet(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::RawBatchGet(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::RawPut(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::RawBatchPut(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::RawDelete(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::RawBatchDelete(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::RawScan(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::RawDeleteRange(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::RawBatchScan(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::Coprocessor(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::PessimisticLock(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::PessimisticRollback(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::CheckTxnStatus(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::TxnHeartBeat(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::CheckSecondaryLocks(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::RawCoprocessor(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::FlashbackToVersion(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsRequest_Request_oneof_cmd::Empty(v) => ::protobuf::PbPrint::fmt(v, name, buf),
        }
    }
}

impl BatchCommandsRequestRequest {
    pub fn new() -> BatchCommandsRequestRequest {
        ::std::default::Default::default()
    }

    // .kvrpcpb.GetRequest Get = 1;


    pub fn get_get(&self) -> &super::kvrpcpb::GetRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Get(ref v)) => v,
            _ => super::kvrpcpb::GetRequest::default_instance(),
        }
    }
    pub fn clear_get(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_get(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Get(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_get(&mut self, v: super::kvrpcpb::GetRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Get(v))
    }

    // Mutable pointer to the field.
    pub fn mut_get(&mut self) -> &mut super::kvrpcpb::GetRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Get(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Get(super::kvrpcpb::GetRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Get(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_get(&mut self) -> super::kvrpcpb::GetRequest {
        if self.has_get() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Get(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::GetRequest::new()
        }
    }

    // .kvrpcpb.ScanRequest Scan = 2;


    pub fn get_scan(&self) -> &super::kvrpcpb::ScanRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Scan(ref v)) => v,
            _ => super::kvrpcpb::ScanRequest::default_instance(),
        }
    }
    pub fn clear_scan(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_scan(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Scan(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_scan(&mut self, v: super::kvrpcpb::ScanRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Scan(v))
    }

    // Mutable pointer to the field.
    pub fn mut_scan(&mut self) -> &mut super::kvrpcpb::ScanRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Scan(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Scan(super::kvrpcpb::ScanRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Scan(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_scan(&mut self) -> super::kvrpcpb::ScanRequest {
        if self.has_scan() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Scan(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::ScanRequest::new()
        }
    }

    // .kvrpcpb.PrewriteRequest Prewrite = 3;


    pub fn get_prewrite(&self) -> &super::kvrpcpb::PrewriteRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Prewrite(ref v)) => v,
            _ => super::kvrpcpb::PrewriteRequest::default_instance(),
        }
    }
    pub fn clear_prewrite(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_prewrite(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Prewrite(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_prewrite(&mut self, v: super::kvrpcpb::PrewriteRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Prewrite(v))
    }

    // Mutable pointer to the field.
    pub fn mut_prewrite(&mut self) -> &mut super::kvrpcpb::PrewriteRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Prewrite(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Prewrite(super::kvrpcpb::PrewriteRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Prewrite(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_prewrite(&mut self) -> super::kvrpcpb::PrewriteRequest {
        if self.has_prewrite() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Prewrite(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::PrewriteRequest::new()
        }
    }

    // .kvrpcpb.CommitRequest Commit = 4;


    pub fn get_commit(&self) -> &super::kvrpcpb::CommitRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Commit(ref v)) => v,
            _ => super::kvrpcpb::CommitRequest::default_instance(),
        }
    }
    pub fn clear_commit(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_commit(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Commit(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_commit(&mut self, v: super::kvrpcpb::CommitRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Commit(v))
    }

    // Mutable pointer to the field.
    pub fn mut_commit(&mut self) -> &mut super::kvrpcpb::CommitRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Commit(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Commit(super::kvrpcpb::CommitRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Commit(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_commit(&mut self) -> super::kvrpcpb::CommitRequest {
        if self.has_commit() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Commit(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::CommitRequest::new()
        }
    }

    // .kvrpcpb.ImportRequest Import = 5;


    pub fn get_import(&self) -> &super::kvrpcpb::ImportRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Import(ref v)) => v,
            _ => super::kvrpcpb::ImportRequest::default_instance(),
        }
    }
    pub fn clear_import(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_import(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Import(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_import(&mut self, v: super::kvrpcpb::ImportRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Import(v))
    }

    // Mutable pointer to the field.
    pub fn mut_import(&mut self) -> &mut super::kvrpcpb::ImportRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Import(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Import(super::kvrpcpb::ImportRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Import(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_import(&mut self) -> super::kvrpcpb::ImportRequest {
        if self.has_import() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Import(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::ImportRequest::new()
        }
    }

    // .kvrpcpb.CleanupRequest Cleanup = 6;


    pub fn get_cleanup(&self) -> &super::kvrpcpb::CleanupRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Cleanup(ref v)) => v,
            _ => super::kvrpcpb::CleanupRequest::default_instance(),
        }
    }
    pub fn clear_cleanup(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_cleanup(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Cleanup(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_cleanup(&mut self, v: super::kvrpcpb::CleanupRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Cleanup(v))
    }

    // Mutable pointer to the field.
    pub fn mut_cleanup(&mut self) -> &mut super::kvrpcpb::CleanupRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Cleanup(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Cleanup(super::kvrpcpb::CleanupRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Cleanup(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_cleanup(&mut self) -> super::kvrpcpb::CleanupRequest {
        if self.has_cleanup() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Cleanup(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::CleanupRequest::new()
        }
    }

    // .kvrpcpb.BatchGetRequest BatchGet = 7;


    pub fn get_batch_get(&self) -> &super::kvrpcpb::BatchGetRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::BatchGet(ref v)) => v,
            _ => super::kvrpcpb::BatchGetRequest::default_instance(),
        }
    }
    pub fn clear_batch_get(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_batch_get(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::BatchGet(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_batch_get(&mut self, v: super::kvrpcpb::BatchGetRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::BatchGet(v))
    }

    // Mutable pointer to the field.
    pub fn mut_batch_get(&mut self) -> &mut super::kvrpcpb::BatchGetRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::BatchGet(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::BatchGet(super::kvrpcpb::BatchGetRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::BatchGet(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_batch_get(&mut self) -> super::kvrpcpb::BatchGetRequest {
        if self.has_batch_get() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::BatchGet(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::BatchGetRequest::new()
        }
    }

    // .kvrpcpb.BatchRollbackRequest BatchRollback = 8;


    pub fn get_batch_rollback(&self) -> &super::kvrpcpb::BatchRollbackRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::BatchRollback(ref v)) => v,
            _ => super::kvrpcpb::BatchRollbackRequest::default_instance(),
        }
    }
    pub fn clear_batch_rollback(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_batch_rollback(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::BatchRollback(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_batch_rollback(&mut self, v: super::kvrpcpb::BatchRollbackRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::BatchRollback(v))
    }

    // Mutable pointer to the field.
    pub fn mut_batch_rollback(&mut self) -> &mut super::kvrpcpb::BatchRollbackRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::BatchRollback(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::BatchRollback(super::kvrpcpb::BatchRollbackRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::BatchRollback(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_batch_rollback(&mut self) -> super::kvrpcpb::BatchRollbackRequest {
        if self.has_batch_rollback() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::BatchRollback(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::BatchRollbackRequest::new()
        }
    }

    // .kvrpcpb.ScanLockRequest ScanLock = 9;


    pub fn get_scan_lock(&self) -> &super::kvrpcpb::ScanLockRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::ScanLock(ref v)) => v,
            _ => super::kvrpcpb::ScanLockRequest::default_instance(),
        }
    }
    pub fn clear_scan_lock(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_scan_lock(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::ScanLock(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_scan_lock(&mut self, v: super::kvrpcpb::ScanLockRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::ScanLock(v))
    }

    // Mutable pointer to the field.
    pub fn mut_scan_lock(&mut self) -> &mut super::kvrpcpb::ScanLockRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::ScanLock(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::ScanLock(super::kvrpcpb::ScanLockRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::ScanLock(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_scan_lock(&mut self) -> super::kvrpcpb::ScanLockRequest {
        if self.has_scan_lock() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::ScanLock(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::ScanLockRequest::new()
        }
    }

    // .kvrpcpb.ResolveLockRequest ResolveLock = 10;


    pub fn get_resolve_lock(&self) -> &super::kvrpcpb::ResolveLockRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::ResolveLock(ref v)) => v,
            _ => super::kvrpcpb::ResolveLockRequest::default_instance(),
        }
    }
    pub fn clear_resolve_lock(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_resolve_lock(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::ResolveLock(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_resolve_lock(&mut self, v: super::kvrpcpb::ResolveLockRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::ResolveLock(v))
    }

    // Mutable pointer to the field.
    pub fn mut_resolve_lock(&mut self) -> &mut super::kvrpcpb::ResolveLockRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::ResolveLock(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::ResolveLock(super::kvrpcpb::ResolveLockRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::ResolveLock(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_resolve_lock(&mut self) -> super::kvrpcpb::ResolveLockRequest {
        if self.has_resolve_lock() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::ResolveLock(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::ResolveLockRequest::new()
        }
    }

    // .kvrpcpb.GCRequest GC = 11;


    pub fn get_gc(&self) -> &super::kvrpcpb::GcRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Gc(ref v)) => v,
            _ => super::kvrpcpb::GcRequest::default_instance(),
        }
    }
    pub fn clear_gc(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_gc(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Gc(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_gc(&mut self, v: super::kvrpcpb::GcRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Gc(v))
    }

    // Mutable pointer to the field.
    pub fn mut_gc(&mut self) -> &mut super::kvrpcpb::GcRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Gc(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Gc(super::kvrpcpb::GcRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Gc(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_gc(&mut self) -> super::kvrpcpb::GcRequest {
        if self.has_gc() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Gc(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::GcRequest::new()
        }
    }

    // .kvrpcpb.DeleteRangeRequest DeleteRange = 12;


    pub fn get_delete_range(&self) -> &super::kvrpcpb::DeleteRangeRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::DeleteRange(ref v)) => v,
            _ => super::kvrpcpb::DeleteRangeRequest::default_instance(),
        }
    }
    pub fn clear_delete_range(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_delete_range(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::DeleteRange(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_delete_range(&mut self, v: super::kvrpcpb::DeleteRangeRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::DeleteRange(v))
    }

    // Mutable pointer to the field.
    pub fn mut_delete_range(&mut self) -> &mut super::kvrpcpb::DeleteRangeRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::DeleteRange(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::DeleteRange(super::kvrpcpb::DeleteRangeRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::DeleteRange(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_delete_range(&mut self) -> super::kvrpcpb::DeleteRangeRequest {
        if self.has_delete_range() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::DeleteRange(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::DeleteRangeRequest::new()
        }
    }

    // .kvrpcpb.RawGetRequest RawGet = 13;


    pub fn get_raw_get(&self) -> &super::kvrpcpb::RawGetRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawGet(ref v)) => v,
            _ => super::kvrpcpb::RawGetRequest::default_instance(),
        }
    }
    pub fn clear_raw_get(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_raw_get(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawGet(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_raw_get(&mut self, v: super::kvrpcpb::RawGetRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawGet(v))
    }

    // Mutable pointer to the field.
    pub fn mut_raw_get(&mut self) -> &mut super::kvrpcpb::RawGetRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawGet(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawGet(super::kvrpcpb::RawGetRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawGet(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_raw_get(&mut self) -> super::kvrpcpb::RawGetRequest {
        if self.has_raw_get() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawGet(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::RawGetRequest::new()
        }
    }

    // .kvrpcpb.RawBatchGetRequest RawBatchGet = 14;


    pub fn get_raw_batch_get(&self) -> &super::kvrpcpb::RawBatchGetRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchGet(ref v)) => v,
            _ => super::kvrpcpb::RawBatchGetRequest::default_instance(),
        }
    }
    pub fn clear_raw_batch_get(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_raw_batch_get(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchGet(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_raw_batch_get(&mut self, v: super::kvrpcpb::RawBatchGetRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchGet(v))
    }

    // Mutable pointer to the field.
    pub fn mut_raw_batch_get(&mut self) -> &mut super::kvrpcpb::RawBatchGetRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchGet(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchGet(super::kvrpcpb::RawBatchGetRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchGet(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_raw_batch_get(&mut self) -> super::kvrpcpb::RawBatchGetRequest {
        if self.has_raw_batch_get() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchGet(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::RawBatchGetRequest::new()
        }
    }

    // .kvrpcpb.RawPutRequest RawPut = 15;


    pub fn get_raw_put(&self) -> &super::kvrpcpb::RawPutRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawPut(ref v)) => v,
            _ => super::kvrpcpb::RawPutRequest::default_instance(),
        }
    }
    pub fn clear_raw_put(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_raw_put(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawPut(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_raw_put(&mut self, v: super::kvrpcpb::RawPutRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawPut(v))
    }

    // Mutable pointer to the field.
    pub fn mut_raw_put(&mut self) -> &mut super::kvrpcpb::RawPutRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawPut(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawPut(super::kvrpcpb::RawPutRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawPut(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_raw_put(&mut self) -> super::kvrpcpb::RawPutRequest {
        if self.has_raw_put() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawPut(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::RawPutRequest::new()
        }
    }

    // .kvrpcpb.RawBatchPutRequest RawBatchPut = 16;


    pub fn get_raw_batch_put(&self) -> &super::kvrpcpb::RawBatchPutRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchPut(ref v)) => v,
            _ => super::kvrpcpb::RawBatchPutRequest::default_instance(),
        }
    }
    pub fn clear_raw_batch_put(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_raw_batch_put(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchPut(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_raw_batch_put(&mut self, v: super::kvrpcpb::RawBatchPutRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchPut(v))
    }

    // Mutable pointer to the field.
    pub fn mut_raw_batch_put(&mut self) -> &mut super::kvrpcpb::RawBatchPutRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchPut(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchPut(super::kvrpcpb::RawBatchPutRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchPut(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_raw_batch_put(&mut self) -> super::kvrpcpb::RawBatchPutRequest {
        if self.has_raw_batch_put() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchPut(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::RawBatchPutRequest::new()
        }
    }

    // .kvrpcpb.RawDeleteRequest RawDelete = 17;


    pub fn get_raw_delete(&self) -> &super::kvrpcpb::RawDeleteRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawDelete(ref v)) => v,
            _ => super::kvrpcpb::RawDeleteRequest::default_instance(),
        }
    }
    pub fn clear_raw_delete(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_raw_delete(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawDelete(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_raw_delete(&mut self, v: super::kvrpcpb::RawDeleteRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawDelete(v))
    }

    // Mutable pointer to the field.
    pub fn mut_raw_delete(&mut self) -> &mut super::kvrpcpb::RawDeleteRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawDelete(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawDelete(super::kvrpcpb::RawDeleteRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawDelete(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_raw_delete(&mut self) -> super::kvrpcpb::RawDeleteRequest {
        if self.has_raw_delete() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawDelete(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::RawDeleteRequest::new()
        }
    }

    // .kvrpcpb.RawBatchDeleteRequest RawBatchDelete = 18;


    pub fn get_raw_batch_delete(&self) -> &super::kvrpcpb::RawBatchDeleteRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchDelete(ref v)) => v,
            _ => super::kvrpcpb::RawBatchDeleteRequest::default_instance(),
        }
    }
    pub fn clear_raw_batch_delete(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_raw_batch_delete(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchDelete(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_raw_batch_delete(&mut self, v: super::kvrpcpb::RawBatchDeleteRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchDelete(v))
    }

    // Mutable pointer to the field.
    pub fn mut_raw_batch_delete(&mut self) -> &mut super::kvrpcpb::RawBatchDeleteRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchDelete(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchDelete(super::kvrpcpb::RawBatchDeleteRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchDelete(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_raw_batch_delete(&mut self) -> super::kvrpcpb::RawBatchDeleteRequest {
        if self.has_raw_batch_delete() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchDelete(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::RawBatchDeleteRequest::new()
        }
    }

    // .kvrpcpb.RawScanRequest RawScan = 19;


    pub fn get_raw_scan(&self) -> &super::kvrpcpb::RawScanRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawScan(ref v)) => v,
            _ => super::kvrpcpb::RawScanRequest::default_instance(),
        }
    }
    pub fn clear_raw_scan(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_raw_scan(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawScan(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_raw_scan(&mut self, v: super::kvrpcpb::RawScanRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawScan(v))
    }

    // Mutable pointer to the field.
    pub fn mut_raw_scan(&mut self) -> &mut super::kvrpcpb::RawScanRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawScan(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawScan(super::kvrpcpb::RawScanRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawScan(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_raw_scan(&mut self) -> super::kvrpcpb::RawScanRequest {
        if self.has_raw_scan() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawScan(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::RawScanRequest::new()
        }
    }

    // .kvrpcpb.RawDeleteRangeRequest RawDeleteRange = 20;


    pub fn get_raw_delete_range(&self) -> &super::kvrpcpb::RawDeleteRangeRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawDeleteRange(ref v)) => v,
            _ => super::kvrpcpb::RawDeleteRangeRequest::default_instance(),
        }
    }
    pub fn clear_raw_delete_range(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_raw_delete_range(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawDeleteRange(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_raw_delete_range(&mut self, v: super::kvrpcpb::RawDeleteRangeRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawDeleteRange(v))
    }

    // Mutable pointer to the field.
    pub fn mut_raw_delete_range(&mut self) -> &mut super::kvrpcpb::RawDeleteRangeRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawDeleteRange(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawDeleteRange(super::kvrpcpb::RawDeleteRangeRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawDeleteRange(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_raw_delete_range(&mut self) -> super::kvrpcpb::RawDeleteRangeRequest {
        if self.has_raw_delete_range() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawDeleteRange(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::RawDeleteRangeRequest::new()
        }
    }

    // .kvrpcpb.RawBatchScanRequest RawBatchScan = 21;


    pub fn get_raw_batch_scan(&self) -> &super::kvrpcpb::RawBatchScanRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchScan(ref v)) => v,
            _ => super::kvrpcpb::RawBatchScanRequest::default_instance(),
        }
    }
    pub fn clear_raw_batch_scan(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_raw_batch_scan(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchScan(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_raw_batch_scan(&mut self, v: super::kvrpcpb::RawBatchScanRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchScan(v))
    }

    // Mutable pointer to the field.
    pub fn mut_raw_batch_scan(&mut self) -> &mut super::kvrpcpb::RawBatchScanRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchScan(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchScan(super::kvrpcpb::RawBatchScanRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchScan(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_raw_batch_scan(&mut self) -> super::kvrpcpb::RawBatchScanRequest {
        if self.has_raw_batch_scan() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchScan(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::RawBatchScanRequest::new()
        }
    }

    // .coprocessor.Request Coprocessor = 22;


    pub fn get_coprocessor(&self) -> &super::coprocessor::Request {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Coprocessor(ref v)) => v,
            _ => super::coprocessor::Request::default_instance(),
        }
    }
    pub fn clear_coprocessor(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_coprocessor(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Coprocessor(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_coprocessor(&mut self, v: super::coprocessor::Request) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Coprocessor(v))
    }

    // Mutable pointer to the field.
    pub fn mut_coprocessor(&mut self) -> &mut super::coprocessor::Request {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Coprocessor(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Coprocessor(super::coprocessor::Request::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Coprocessor(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_coprocessor(&mut self) -> super::coprocessor::Request {
        if self.has_coprocessor() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Coprocessor(v)) => v,
                _ => panic!(),
            }
        } else {
            super::coprocessor::Request::new()
        }
    }

    // .kvrpcpb.PessimisticLockRequest PessimisticLock = 23;


    pub fn get_pessimistic_lock(&self) -> &super::kvrpcpb::PessimisticLockRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::PessimisticLock(ref v)) => v,
            _ => super::kvrpcpb::PessimisticLockRequest::default_instance(),
        }
    }
    pub fn clear_pessimistic_lock(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_pessimistic_lock(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::PessimisticLock(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_pessimistic_lock(&mut self, v: super::kvrpcpb::PessimisticLockRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::PessimisticLock(v))
    }

    // Mutable pointer to the field.
    pub fn mut_pessimistic_lock(&mut self) -> &mut super::kvrpcpb::PessimisticLockRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::PessimisticLock(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::PessimisticLock(super::kvrpcpb::PessimisticLockRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::PessimisticLock(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_pessimistic_lock(&mut self) -> super::kvrpcpb::PessimisticLockRequest {
        if self.has_pessimistic_lock() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::PessimisticLock(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::PessimisticLockRequest::new()
        }
    }

    // .kvrpcpb.PessimisticRollbackRequest PessimisticRollback = 24;


    pub fn get_pessimistic_rollback(&self) -> &super::kvrpcpb::PessimisticRollbackRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::PessimisticRollback(ref v)) => v,
            _ => super::kvrpcpb::PessimisticRollbackRequest::default_instance(),
        }
    }
    pub fn clear_pessimistic_rollback(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_pessimistic_rollback(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::PessimisticRollback(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_pessimistic_rollback(&mut self, v: super::kvrpcpb::PessimisticRollbackRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::PessimisticRollback(v))
    }

    // Mutable pointer to the field.
    pub fn mut_pessimistic_rollback(&mut self) -> &mut super::kvrpcpb::PessimisticRollbackRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::PessimisticRollback(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::PessimisticRollback(super::kvrpcpb::PessimisticRollbackRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::PessimisticRollback(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_pessimistic_rollback(&mut self) -> super::kvrpcpb::PessimisticRollbackRequest {
        if self.has_pessimistic_rollback() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::PessimisticRollback(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::PessimisticRollbackRequest::new()
        }
    }

    // .kvrpcpb.CheckTxnStatusRequest CheckTxnStatus = 25;


    pub fn get_check_txn_status(&self) -> &super::kvrpcpb::CheckTxnStatusRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::CheckTxnStatus(ref v)) => v,
            _ => super::kvrpcpb::CheckTxnStatusRequest::default_instance(),
        }
    }
    pub fn clear_check_txn_status(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_check_txn_status(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::CheckTxnStatus(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_check_txn_status(&mut self, v: super::kvrpcpb::CheckTxnStatusRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::CheckTxnStatus(v))
    }

    // Mutable pointer to the field.
    pub fn mut_check_txn_status(&mut self) -> &mut super::kvrpcpb::CheckTxnStatusRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::CheckTxnStatus(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::CheckTxnStatus(super::kvrpcpb::CheckTxnStatusRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::CheckTxnStatus(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_check_txn_status(&mut self) -> super::kvrpcpb::CheckTxnStatusRequest {
        if self.has_check_txn_status() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::CheckTxnStatus(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::CheckTxnStatusRequest::new()
        }
    }

    // .kvrpcpb.TxnHeartBeatRequest TxnHeartBeat = 26;


    pub fn get_txn_heart_beat(&self) -> &super::kvrpcpb::TxnHeartBeatRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::TxnHeartBeat(ref v)) => v,
            _ => super::kvrpcpb::TxnHeartBeatRequest::default_instance(),
        }
    }
    pub fn clear_txn_heart_beat(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_txn_heart_beat(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::TxnHeartBeat(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_txn_heart_beat(&mut self, v: super::kvrpcpb::TxnHeartBeatRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::TxnHeartBeat(v))
    }

    // Mutable pointer to the field.
    pub fn mut_txn_heart_beat(&mut self) -> &mut super::kvrpcpb::TxnHeartBeatRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::TxnHeartBeat(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::TxnHeartBeat(super::kvrpcpb::TxnHeartBeatRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::TxnHeartBeat(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_txn_heart_beat(&mut self) -> super::kvrpcpb::TxnHeartBeatRequest {
        if self.has_txn_heart_beat() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::TxnHeartBeat(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::TxnHeartBeatRequest::new()
        }
    }

    // .kvrpcpb.CheckSecondaryLocksRequest CheckSecondaryLocks = 33;


    pub fn get_check_secondary_locks(&self) -> &super::kvrpcpb::CheckSecondaryLocksRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::CheckSecondaryLocks(ref v)) => v,
            _ => super::kvrpcpb::CheckSecondaryLocksRequest::default_instance(),
        }
    }
    pub fn clear_check_secondary_locks(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_check_secondary_locks(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::CheckSecondaryLocks(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_check_secondary_locks(&mut self, v: super::kvrpcpb::CheckSecondaryLocksRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::CheckSecondaryLocks(v))
    }

    // Mutable pointer to the field.
    pub fn mut_check_secondary_locks(&mut self) -> &mut super::kvrpcpb::CheckSecondaryLocksRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::CheckSecondaryLocks(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::CheckSecondaryLocks(super::kvrpcpb::CheckSecondaryLocksRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::CheckSecondaryLocks(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_check_secondary_locks(&mut self) -> super::kvrpcpb::CheckSecondaryLocksRequest {
        if self.has_check_secondary_locks() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::CheckSecondaryLocks(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::CheckSecondaryLocksRequest::new()
        }
    }

    // .kvrpcpb.RawCoprocessorRequest RawCoprocessor = 34;


    pub fn get_raw_coprocessor(&self) -> &super::kvrpcpb::RawCoprocessorRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawCoprocessor(ref v)) => v,
            _ => super::kvrpcpb::RawCoprocessorRequest::default_instance(),
        }
    }
    pub fn clear_raw_coprocessor(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_raw_coprocessor(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawCoprocessor(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_raw_coprocessor(&mut self, v: super::kvrpcpb::RawCoprocessorRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawCoprocessor(v))
    }

    // Mutable pointer to the field.
    pub fn mut_raw_coprocessor(&mut self) -> &mut super::kvrpcpb::RawCoprocessorRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawCoprocessor(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawCoprocessor(super::kvrpcpb::RawCoprocessorRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawCoprocessor(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_raw_coprocessor(&mut self) -> super::kvrpcpb::RawCoprocessorRequest {
        if self.has_raw_coprocessor() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawCoprocessor(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::RawCoprocessorRequest::new()
        }
    }

    // .kvrpcpb.FlashbackToVersionRequest FlashbackToVersion = 35;


    pub fn get_flashback_to_version(&self) -> &super::kvrpcpb::FlashbackToVersionRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::FlashbackToVersion(ref v)) => v,
            _ => super::kvrpcpb::FlashbackToVersionRequest::default_instance(),
        }
    }
    pub fn clear_flashback_to_version(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_flashback_to_version(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::FlashbackToVersion(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_flashback_to_version(&mut self, v: super::kvrpcpb::FlashbackToVersionRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::FlashbackToVersion(v))
    }

    // Mutable pointer to the field.
    pub fn mut_flashback_to_version(&mut self) -> &mut super::kvrpcpb::FlashbackToVersionRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::FlashbackToVersion(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::FlashbackToVersion(super::kvrpcpb::FlashbackToVersionRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::FlashbackToVersion(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_flashback_to_version(&mut self) -> super::kvrpcpb::FlashbackToVersionRequest {
        if self.has_flashback_to_version() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::FlashbackToVersion(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::FlashbackToVersionRequest::new()
        }
    }

    // .tikvpb.BatchCommandsEmptyRequest Empty = 255;


    pub fn get_empty(&self) -> &BatchCommandsEmptyRequest {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Empty(ref v)) => v,
            _ => BatchCommandsEmptyRequest::default_instance(),
        }
    }
    pub fn clear_empty(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_empty(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Empty(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_empty(&mut self, v: BatchCommandsEmptyRequest) {
        self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Empty(v))
    }

    // Mutable pointer to the field.
    pub fn mut_empty(&mut self) -> &mut BatchCommandsEmptyRequest {
        if let ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Empty(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Empty(BatchCommandsEmptyRequest::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Empty(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_empty(&mut self) -> BatchCommandsEmptyRequest {
        if self.has_empty() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Empty(v)) => v,
                _ => panic!(),
            }
        } else {
            BatchCommandsEmptyRequest::new()
        }
    }
}

impl ::protobuf::Message for BatchCommandsRequestRequest {
    fn is_initialized(&self) -> bool {
        if let Some(BatchCommandsRequest_Request_oneof_cmd::Get(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::Scan(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::Prewrite(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::Commit(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::Import(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::Cleanup(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::BatchGet(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::BatchRollback(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::ScanLock(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::ResolveLock(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::Gc(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::DeleteRange(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::RawGet(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchGet(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::RawPut(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchPut(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::RawDelete(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchDelete(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::RawScan(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::RawDeleteRange(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchScan(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::Coprocessor(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::PessimisticLock(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::PessimisticRollback(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::CheckTxnStatus(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::TxnHeartBeat(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::CheckSecondaryLocks(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::RawCoprocessor(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::FlashbackToVersion(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsRequest_Request_oneof_cmd::Empty(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Get(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Scan(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Prewrite(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Commit(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Import(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Cleanup(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::BatchGet(is.read_message()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::BatchRollback(is.read_message()?));
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::ScanLock(is.read_message()?));
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::ResolveLock(is.read_message()?));
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Gc(is.read_message()?));
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::DeleteRange(is.read_message()?));
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawGet(is.read_message()?));
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchGet(is.read_message()?));
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawPut(is.read_message()?));
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchPut(is.read_message()?));
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawDelete(is.read_message()?));
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchDelete(is.read_message()?));
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawScan(is.read_message()?));
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawDeleteRange(is.read_message()?));
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawBatchScan(is.read_message()?));
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Coprocessor(is.read_message()?));
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::PessimisticLock(is.read_message()?));
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::PessimisticRollback(is.read_message()?));
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::CheckTxnStatus(is.read_message()?));
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::TxnHeartBeat(is.read_message()?));
                },
                33 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::CheckSecondaryLocks(is.read_message()?));
                },
                34 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::RawCoprocessor(is.read_message()?));
                },
                35 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::FlashbackToVersion(is.read_message()?));
                },
                255 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsRequest_Request_oneof_cmd::Empty(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.cmd {
            match v {
                &BatchCommandsRequest_Request_oneof_cmd::Get(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::Scan(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::Prewrite(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::Commit(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::Import(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::Cleanup(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::BatchGet(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::BatchRollback(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::ScanLock(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::ResolveLock(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::Gc(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::DeleteRange(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::RawGet(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::RawBatchGet(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::RawPut(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::RawBatchPut(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::RawDelete(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::RawBatchDelete(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::RawScan(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::RawDeleteRange(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::RawBatchScan(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::Coprocessor(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::PessimisticLock(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::PessimisticRollback(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::CheckTxnStatus(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::TxnHeartBeat(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::CheckSecondaryLocks(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::RawCoprocessor(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::FlashbackToVersion(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsRequest_Request_oneof_cmd::Empty(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.cmd {
            match v {
                &BatchCommandsRequest_Request_oneof_cmd::Get(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::Scan(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::Prewrite(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::Commit(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::Import(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::Cleanup(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::BatchGet(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::BatchRollback(ref v) => {
                    os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::ScanLock(ref v) => {
                    os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::ResolveLock(ref v) => {
                    os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::Gc(ref v) => {
                    os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::DeleteRange(ref v) => {
                    os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::RawGet(ref v) => {
                    os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::RawBatchGet(ref v) => {
                    os.write_tag(14, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::RawPut(ref v) => {
                    os.write_tag(15, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::RawBatchPut(ref v) => {
                    os.write_tag(16, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::RawDelete(ref v) => {
                    os.write_tag(17, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::RawBatchDelete(ref v) => {
                    os.write_tag(18, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::RawScan(ref v) => {
                    os.write_tag(19, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::RawDeleteRange(ref v) => {
                    os.write_tag(20, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::RawBatchScan(ref v) => {
                    os.write_tag(21, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::Coprocessor(ref v) => {
                    os.write_tag(22, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::PessimisticLock(ref v) => {
                    os.write_tag(23, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::PessimisticRollback(ref v) => {
                    os.write_tag(24, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::CheckTxnStatus(ref v) => {
                    os.write_tag(25, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::TxnHeartBeat(ref v) => {
                    os.write_tag(26, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::CheckSecondaryLocks(ref v) => {
                    os.write_tag(33, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::RawCoprocessor(ref v) => {
                    os.write_tag(34, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::FlashbackToVersion(ref v) => {
                    os.write_tag(35, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsRequest_Request_oneof_cmd::Empty(ref v) => {
                    os.write_tag(255, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BatchCommandsRequestRequest {
        BatchCommandsRequestRequest::new()
    }

    fn default_instance() -> &'static BatchCommandsRequestRequest {
        static mut instance: ::protobuf::lazy::Lazy<BatchCommandsRequestRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BatchCommandsRequestRequest,
        };
        unsafe {
            instance.get(BatchCommandsRequestRequest::new)
        }
    }
}

impl ::protobuf::Clear for BatchCommandsRequestRequest {
    fn clear(&mut self) {
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for BatchCommandsRequestRequest {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.cmd, "cmd", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for BatchCommandsRequestRequest {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.cmd, "cmd", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchCommandsRequestRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BatchCommandsResponse {
    // message fields
    pub responses: ::protobuf::RepeatedField<BatchCommandsResponseResponse>,
    pub request_ids: ::std::vec::Vec<u64>,
    pub transport_layer_load: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BatchCommandsResponse {
    fn default() -> &'a BatchCommandsResponse {
        <BatchCommandsResponse as ::protobuf::Message>::default_instance()
    }
}

impl BatchCommandsResponse {
    pub fn new() -> BatchCommandsResponse {
        ::std::default::Default::default()
    }

    // repeated .tikvpb.BatchCommandsResponse.Response responses = 1;


    pub fn get_responses(&self) -> &[BatchCommandsResponseResponse] {
        &self.responses
    }
    pub fn clear_responses(&mut self) {
        self.responses.clear();
    }

    // Param is passed by value, moved
    pub fn set_responses(&mut self, v: ::protobuf::RepeatedField<BatchCommandsResponseResponse>) {
        self.responses = v;
    }

    // Mutable pointer to the field.
    pub fn mut_responses(&mut self) -> &mut ::protobuf::RepeatedField<BatchCommandsResponseResponse> {
        &mut self.responses
    }

    // Take field
    pub fn take_responses(&mut self) -> ::protobuf::RepeatedField<BatchCommandsResponseResponse> {
        ::std::mem::replace(&mut self.responses, ::protobuf::RepeatedField::new())
    }

    // repeated uint64 request_ids = 2;


    pub fn get_request_ids(&self) -> &[u64] {
        &self.request_ids
    }
    pub fn clear_request_ids(&mut self) {
        self.request_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_request_ids(&mut self, v: ::std::vec::Vec<u64>) {
        self.request_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_request_ids(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.request_ids
    }

    // Take field
    pub fn take_request_ids(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.request_ids, ::std::vec::Vec::new())
    }

    // uint64 transport_layer_load = 3;


    pub fn get_transport_layer_load(&self) -> u64 {
        self.transport_layer_load
    }
    pub fn clear_transport_layer_load(&mut self) {
        self.transport_layer_load = 0;
    }

    // Param is passed by value, moved
    pub fn set_transport_layer_load(&mut self, v: u64) {
        self.transport_layer_load = v;
    }
}

impl ::protobuf::Message for BatchCommandsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.responses {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.responses)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.request_ids)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.transport_layer_load = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.responses {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.request_ids {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if self.transport_layer_load != 0 {
            my_size += ::protobuf::rt::value_size(3, self.transport_layer_load, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.responses {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.request_ids {
            os.write_uint64(2, *v)?;
        };
        if self.transport_layer_load != 0 {
            os.write_uint64(3, self.transport_layer_load)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BatchCommandsResponse {
        BatchCommandsResponse::new()
    }

    fn default_instance() -> &'static BatchCommandsResponse {
        static mut instance: ::protobuf::lazy::Lazy<BatchCommandsResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BatchCommandsResponse,
        };
        unsafe {
            instance.get(BatchCommandsResponse::new)
        }
    }
}

impl ::protobuf::Clear for BatchCommandsResponse {
    fn clear(&mut self) {
        self.responses.clear();
        self.request_ids.clear();
        self.transport_layer_load = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for BatchCommandsResponse {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.responses, "responses", buf);
        ::protobuf::PbPrint::fmt(&self.request_ids, "request_ids", buf);
        ::protobuf::PbPrint::fmt(&self.transport_layer_load, "transport_layer_load", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for BatchCommandsResponse {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.responses, "responses", &mut s);
        ::protobuf::PbPrint::fmt(&self.request_ids, "request_ids", &mut s);
        ::protobuf::PbPrint::fmt(&self.transport_layer_load, "transport_layer_load", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchCommandsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BatchCommandsResponseResponse {
    // message oneof groups
    pub cmd: ::std::option::Option<BatchCommandsResponse_Response_oneof_cmd>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BatchCommandsResponseResponse {
    fn default() -> &'a BatchCommandsResponseResponse {
        <BatchCommandsResponseResponse as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq)]
pub enum BatchCommandsResponse_Response_oneof_cmd {
    Get(super::kvrpcpb::GetResponse),
    Scan(super::kvrpcpb::ScanResponse),
    Prewrite(super::kvrpcpb::PrewriteResponse),
    Commit(super::kvrpcpb::CommitResponse),
    Import(super::kvrpcpb::ImportResponse),
    Cleanup(super::kvrpcpb::CleanupResponse),
    BatchGet(super::kvrpcpb::BatchGetResponse),
    BatchRollback(super::kvrpcpb::BatchRollbackResponse),
    ScanLock(super::kvrpcpb::ScanLockResponse),
    ResolveLock(super::kvrpcpb::ResolveLockResponse),
    Gc(super::kvrpcpb::GcResponse),
    DeleteRange(super::kvrpcpb::DeleteRangeResponse),
    RawGet(super::kvrpcpb::RawGetResponse),
    RawBatchGet(super::kvrpcpb::RawBatchGetResponse),
    RawPut(super::kvrpcpb::RawPutResponse),
    RawBatchPut(super::kvrpcpb::RawBatchPutResponse),
    RawDelete(super::kvrpcpb::RawDeleteResponse),
    RawBatchDelete(super::kvrpcpb::RawBatchDeleteResponse),
    RawScan(super::kvrpcpb::RawScanResponse),
    RawDeleteRange(super::kvrpcpb::RawDeleteRangeResponse),
    RawBatchScan(super::kvrpcpb::RawBatchScanResponse),
    Coprocessor(super::coprocessor::Response),
    PessimisticLock(super::kvrpcpb::PessimisticLockResponse),
    PessimisticRollback(super::kvrpcpb::PessimisticRollbackResponse),
    CheckTxnStatus(super::kvrpcpb::CheckTxnStatusResponse),
    TxnHeartBeat(super::kvrpcpb::TxnHeartBeatResponse),
    CheckSecondaryLocks(super::kvrpcpb::CheckSecondaryLocksResponse),
    RawCoprocessor(super::kvrpcpb::RawCoprocessorResponse),
    FlashbackToVersion(super::kvrpcpb::FlashbackToVersionResponse),
    Empty(BatchCommandsEmptyResponse),
}

impl ::protobuf::PbPrint for BatchCommandsResponse_Response_oneof_cmd {
    fn fmt(&self, name: &str, buf: &mut String) {
        match self {
            BatchCommandsResponse_Response_oneof_cmd::Get(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::Scan(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::Prewrite(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::Commit(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::Import(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::Cleanup(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::BatchGet(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::BatchRollback(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::ScanLock(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::ResolveLock(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::Gc(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::DeleteRange(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::RawGet(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::RawBatchGet(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::RawPut(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::RawBatchPut(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::RawDelete(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::RawBatchDelete(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::RawScan(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::RawDeleteRange(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::RawBatchScan(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::Coprocessor(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::PessimisticLock(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::PessimisticRollback(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::CheckTxnStatus(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::TxnHeartBeat(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::CheckSecondaryLocks(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::RawCoprocessor(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::FlashbackToVersion(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            BatchCommandsResponse_Response_oneof_cmd::Empty(v) => ::protobuf::PbPrint::fmt(v, name, buf),
        }
    }
}

impl BatchCommandsResponseResponse {
    pub fn new() -> BatchCommandsResponseResponse {
        ::std::default::Default::default()
    }

    // .kvrpcpb.GetResponse Get = 1;


    pub fn get_get(&self) -> &super::kvrpcpb::GetResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Get(ref v)) => v,
            _ => super::kvrpcpb::GetResponse::default_instance(),
        }
    }
    pub fn clear_get(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_get(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Get(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_get(&mut self, v: super::kvrpcpb::GetResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Get(v))
    }

    // Mutable pointer to the field.
    pub fn mut_get(&mut self) -> &mut super::kvrpcpb::GetResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Get(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Get(super::kvrpcpb::GetResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Get(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_get(&mut self) -> super::kvrpcpb::GetResponse {
        if self.has_get() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Get(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::GetResponse::new()
        }
    }

    // .kvrpcpb.ScanResponse Scan = 2;


    pub fn get_scan(&self) -> &super::kvrpcpb::ScanResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Scan(ref v)) => v,
            _ => super::kvrpcpb::ScanResponse::default_instance(),
        }
    }
    pub fn clear_scan(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_scan(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Scan(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_scan(&mut self, v: super::kvrpcpb::ScanResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Scan(v))
    }

    // Mutable pointer to the field.
    pub fn mut_scan(&mut self) -> &mut super::kvrpcpb::ScanResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Scan(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Scan(super::kvrpcpb::ScanResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Scan(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_scan(&mut self) -> super::kvrpcpb::ScanResponse {
        if self.has_scan() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Scan(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::ScanResponse::new()
        }
    }

    // .kvrpcpb.PrewriteResponse Prewrite = 3;


    pub fn get_prewrite(&self) -> &super::kvrpcpb::PrewriteResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Prewrite(ref v)) => v,
            _ => super::kvrpcpb::PrewriteResponse::default_instance(),
        }
    }
    pub fn clear_prewrite(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_prewrite(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Prewrite(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_prewrite(&mut self, v: super::kvrpcpb::PrewriteResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Prewrite(v))
    }

    // Mutable pointer to the field.
    pub fn mut_prewrite(&mut self) -> &mut super::kvrpcpb::PrewriteResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Prewrite(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Prewrite(super::kvrpcpb::PrewriteResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Prewrite(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_prewrite(&mut self) -> super::kvrpcpb::PrewriteResponse {
        if self.has_prewrite() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Prewrite(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::PrewriteResponse::new()
        }
    }

    // .kvrpcpb.CommitResponse Commit = 4;


    pub fn get_commit(&self) -> &super::kvrpcpb::CommitResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Commit(ref v)) => v,
            _ => super::kvrpcpb::CommitResponse::default_instance(),
        }
    }
    pub fn clear_commit(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_commit(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Commit(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_commit(&mut self, v: super::kvrpcpb::CommitResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Commit(v))
    }

    // Mutable pointer to the field.
    pub fn mut_commit(&mut self) -> &mut super::kvrpcpb::CommitResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Commit(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Commit(super::kvrpcpb::CommitResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Commit(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_commit(&mut self) -> super::kvrpcpb::CommitResponse {
        if self.has_commit() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Commit(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::CommitResponse::new()
        }
    }

    // .kvrpcpb.ImportResponse Import = 5;


    pub fn get_import(&self) -> &super::kvrpcpb::ImportResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Import(ref v)) => v,
            _ => super::kvrpcpb::ImportResponse::default_instance(),
        }
    }
    pub fn clear_import(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_import(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Import(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_import(&mut self, v: super::kvrpcpb::ImportResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Import(v))
    }

    // Mutable pointer to the field.
    pub fn mut_import(&mut self) -> &mut super::kvrpcpb::ImportResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Import(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Import(super::kvrpcpb::ImportResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Import(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_import(&mut self) -> super::kvrpcpb::ImportResponse {
        if self.has_import() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Import(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::ImportResponse::new()
        }
    }

    // .kvrpcpb.CleanupResponse Cleanup = 6;


    pub fn get_cleanup(&self) -> &super::kvrpcpb::CleanupResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Cleanup(ref v)) => v,
            _ => super::kvrpcpb::CleanupResponse::default_instance(),
        }
    }
    pub fn clear_cleanup(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_cleanup(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Cleanup(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_cleanup(&mut self, v: super::kvrpcpb::CleanupResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Cleanup(v))
    }

    // Mutable pointer to the field.
    pub fn mut_cleanup(&mut self) -> &mut super::kvrpcpb::CleanupResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Cleanup(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Cleanup(super::kvrpcpb::CleanupResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Cleanup(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_cleanup(&mut self) -> super::kvrpcpb::CleanupResponse {
        if self.has_cleanup() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Cleanup(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::CleanupResponse::new()
        }
    }

    // .kvrpcpb.BatchGetResponse BatchGet = 7;


    pub fn get_batch_get(&self) -> &super::kvrpcpb::BatchGetResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::BatchGet(ref v)) => v,
            _ => super::kvrpcpb::BatchGetResponse::default_instance(),
        }
    }
    pub fn clear_batch_get(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_batch_get(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::BatchGet(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_batch_get(&mut self, v: super::kvrpcpb::BatchGetResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::BatchGet(v))
    }

    // Mutable pointer to the field.
    pub fn mut_batch_get(&mut self) -> &mut super::kvrpcpb::BatchGetResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::BatchGet(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::BatchGet(super::kvrpcpb::BatchGetResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::BatchGet(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_batch_get(&mut self) -> super::kvrpcpb::BatchGetResponse {
        if self.has_batch_get() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::BatchGet(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::BatchGetResponse::new()
        }
    }

    // .kvrpcpb.BatchRollbackResponse BatchRollback = 8;


    pub fn get_batch_rollback(&self) -> &super::kvrpcpb::BatchRollbackResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::BatchRollback(ref v)) => v,
            _ => super::kvrpcpb::BatchRollbackResponse::default_instance(),
        }
    }
    pub fn clear_batch_rollback(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_batch_rollback(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::BatchRollback(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_batch_rollback(&mut self, v: super::kvrpcpb::BatchRollbackResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::BatchRollback(v))
    }

    // Mutable pointer to the field.
    pub fn mut_batch_rollback(&mut self) -> &mut super::kvrpcpb::BatchRollbackResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::BatchRollback(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::BatchRollback(super::kvrpcpb::BatchRollbackResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::BatchRollback(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_batch_rollback(&mut self) -> super::kvrpcpb::BatchRollbackResponse {
        if self.has_batch_rollback() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::BatchRollback(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::BatchRollbackResponse::new()
        }
    }

    // .kvrpcpb.ScanLockResponse ScanLock = 9;


    pub fn get_scan_lock(&self) -> &super::kvrpcpb::ScanLockResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::ScanLock(ref v)) => v,
            _ => super::kvrpcpb::ScanLockResponse::default_instance(),
        }
    }
    pub fn clear_scan_lock(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_scan_lock(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::ScanLock(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_scan_lock(&mut self, v: super::kvrpcpb::ScanLockResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::ScanLock(v))
    }

    // Mutable pointer to the field.
    pub fn mut_scan_lock(&mut self) -> &mut super::kvrpcpb::ScanLockResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::ScanLock(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::ScanLock(super::kvrpcpb::ScanLockResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::ScanLock(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_scan_lock(&mut self) -> super::kvrpcpb::ScanLockResponse {
        if self.has_scan_lock() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::ScanLock(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::ScanLockResponse::new()
        }
    }

    // .kvrpcpb.ResolveLockResponse ResolveLock = 10;


    pub fn get_resolve_lock(&self) -> &super::kvrpcpb::ResolveLockResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::ResolveLock(ref v)) => v,
            _ => super::kvrpcpb::ResolveLockResponse::default_instance(),
        }
    }
    pub fn clear_resolve_lock(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_resolve_lock(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::ResolveLock(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_resolve_lock(&mut self, v: super::kvrpcpb::ResolveLockResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::ResolveLock(v))
    }

    // Mutable pointer to the field.
    pub fn mut_resolve_lock(&mut self) -> &mut super::kvrpcpb::ResolveLockResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::ResolveLock(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::ResolveLock(super::kvrpcpb::ResolveLockResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::ResolveLock(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_resolve_lock(&mut self) -> super::kvrpcpb::ResolveLockResponse {
        if self.has_resolve_lock() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::ResolveLock(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::ResolveLockResponse::new()
        }
    }

    // .kvrpcpb.GCResponse GC = 11;


    pub fn get_gc(&self) -> &super::kvrpcpb::GcResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Gc(ref v)) => v,
            _ => super::kvrpcpb::GcResponse::default_instance(),
        }
    }
    pub fn clear_gc(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_gc(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Gc(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_gc(&mut self, v: super::kvrpcpb::GcResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Gc(v))
    }

    // Mutable pointer to the field.
    pub fn mut_gc(&mut self) -> &mut super::kvrpcpb::GcResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Gc(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Gc(super::kvrpcpb::GcResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Gc(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_gc(&mut self) -> super::kvrpcpb::GcResponse {
        if self.has_gc() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Gc(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::GcResponse::new()
        }
    }

    // .kvrpcpb.DeleteRangeResponse DeleteRange = 12;


    pub fn get_delete_range(&self) -> &super::kvrpcpb::DeleteRangeResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::DeleteRange(ref v)) => v,
            _ => super::kvrpcpb::DeleteRangeResponse::default_instance(),
        }
    }
    pub fn clear_delete_range(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_delete_range(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::DeleteRange(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_delete_range(&mut self, v: super::kvrpcpb::DeleteRangeResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::DeleteRange(v))
    }

    // Mutable pointer to the field.
    pub fn mut_delete_range(&mut self) -> &mut super::kvrpcpb::DeleteRangeResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::DeleteRange(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::DeleteRange(super::kvrpcpb::DeleteRangeResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::DeleteRange(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_delete_range(&mut self) -> super::kvrpcpb::DeleteRangeResponse {
        if self.has_delete_range() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::DeleteRange(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::DeleteRangeResponse::new()
        }
    }

    // .kvrpcpb.RawGetResponse RawGet = 13;


    pub fn get_raw_get(&self) -> &super::kvrpcpb::RawGetResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawGet(ref v)) => v,
            _ => super::kvrpcpb::RawGetResponse::default_instance(),
        }
    }
    pub fn clear_raw_get(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_raw_get(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawGet(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_raw_get(&mut self, v: super::kvrpcpb::RawGetResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawGet(v))
    }

    // Mutable pointer to the field.
    pub fn mut_raw_get(&mut self) -> &mut super::kvrpcpb::RawGetResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawGet(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawGet(super::kvrpcpb::RawGetResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawGet(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_raw_get(&mut self) -> super::kvrpcpb::RawGetResponse {
        if self.has_raw_get() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawGet(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::RawGetResponse::new()
        }
    }

    // .kvrpcpb.RawBatchGetResponse RawBatchGet = 14;


    pub fn get_raw_batch_get(&self) -> &super::kvrpcpb::RawBatchGetResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchGet(ref v)) => v,
            _ => super::kvrpcpb::RawBatchGetResponse::default_instance(),
        }
    }
    pub fn clear_raw_batch_get(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_raw_batch_get(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchGet(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_raw_batch_get(&mut self, v: super::kvrpcpb::RawBatchGetResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchGet(v))
    }

    // Mutable pointer to the field.
    pub fn mut_raw_batch_get(&mut self) -> &mut super::kvrpcpb::RawBatchGetResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchGet(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchGet(super::kvrpcpb::RawBatchGetResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchGet(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_raw_batch_get(&mut self) -> super::kvrpcpb::RawBatchGetResponse {
        if self.has_raw_batch_get() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchGet(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::RawBatchGetResponse::new()
        }
    }

    // .kvrpcpb.RawPutResponse RawPut = 15;


    pub fn get_raw_put(&self) -> &super::kvrpcpb::RawPutResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawPut(ref v)) => v,
            _ => super::kvrpcpb::RawPutResponse::default_instance(),
        }
    }
    pub fn clear_raw_put(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_raw_put(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawPut(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_raw_put(&mut self, v: super::kvrpcpb::RawPutResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawPut(v))
    }

    // Mutable pointer to the field.
    pub fn mut_raw_put(&mut self) -> &mut super::kvrpcpb::RawPutResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawPut(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawPut(super::kvrpcpb::RawPutResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawPut(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_raw_put(&mut self) -> super::kvrpcpb::RawPutResponse {
        if self.has_raw_put() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawPut(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::RawPutResponse::new()
        }
    }

    // .kvrpcpb.RawBatchPutResponse RawBatchPut = 16;


    pub fn get_raw_batch_put(&self) -> &super::kvrpcpb::RawBatchPutResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchPut(ref v)) => v,
            _ => super::kvrpcpb::RawBatchPutResponse::default_instance(),
        }
    }
    pub fn clear_raw_batch_put(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_raw_batch_put(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchPut(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_raw_batch_put(&mut self, v: super::kvrpcpb::RawBatchPutResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchPut(v))
    }

    // Mutable pointer to the field.
    pub fn mut_raw_batch_put(&mut self) -> &mut super::kvrpcpb::RawBatchPutResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchPut(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchPut(super::kvrpcpb::RawBatchPutResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchPut(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_raw_batch_put(&mut self) -> super::kvrpcpb::RawBatchPutResponse {
        if self.has_raw_batch_put() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchPut(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::RawBatchPutResponse::new()
        }
    }

    // .kvrpcpb.RawDeleteResponse RawDelete = 17;


    pub fn get_raw_delete(&self) -> &super::kvrpcpb::RawDeleteResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawDelete(ref v)) => v,
            _ => super::kvrpcpb::RawDeleteResponse::default_instance(),
        }
    }
    pub fn clear_raw_delete(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_raw_delete(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawDelete(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_raw_delete(&mut self, v: super::kvrpcpb::RawDeleteResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawDelete(v))
    }

    // Mutable pointer to the field.
    pub fn mut_raw_delete(&mut self) -> &mut super::kvrpcpb::RawDeleteResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawDelete(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawDelete(super::kvrpcpb::RawDeleteResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawDelete(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_raw_delete(&mut self) -> super::kvrpcpb::RawDeleteResponse {
        if self.has_raw_delete() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawDelete(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::RawDeleteResponse::new()
        }
    }

    // .kvrpcpb.RawBatchDeleteResponse RawBatchDelete = 18;


    pub fn get_raw_batch_delete(&self) -> &super::kvrpcpb::RawBatchDeleteResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchDelete(ref v)) => v,
            _ => super::kvrpcpb::RawBatchDeleteResponse::default_instance(),
        }
    }
    pub fn clear_raw_batch_delete(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_raw_batch_delete(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchDelete(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_raw_batch_delete(&mut self, v: super::kvrpcpb::RawBatchDeleteResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchDelete(v))
    }

    // Mutable pointer to the field.
    pub fn mut_raw_batch_delete(&mut self) -> &mut super::kvrpcpb::RawBatchDeleteResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchDelete(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchDelete(super::kvrpcpb::RawBatchDeleteResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchDelete(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_raw_batch_delete(&mut self) -> super::kvrpcpb::RawBatchDeleteResponse {
        if self.has_raw_batch_delete() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchDelete(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::RawBatchDeleteResponse::new()
        }
    }

    // .kvrpcpb.RawScanResponse RawScan = 19;


    pub fn get_raw_scan(&self) -> &super::kvrpcpb::RawScanResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawScan(ref v)) => v,
            _ => super::kvrpcpb::RawScanResponse::default_instance(),
        }
    }
    pub fn clear_raw_scan(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_raw_scan(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawScan(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_raw_scan(&mut self, v: super::kvrpcpb::RawScanResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawScan(v))
    }

    // Mutable pointer to the field.
    pub fn mut_raw_scan(&mut self) -> &mut super::kvrpcpb::RawScanResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawScan(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawScan(super::kvrpcpb::RawScanResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawScan(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_raw_scan(&mut self) -> super::kvrpcpb::RawScanResponse {
        if self.has_raw_scan() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawScan(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::RawScanResponse::new()
        }
    }

    // .kvrpcpb.RawDeleteRangeResponse RawDeleteRange = 20;


    pub fn get_raw_delete_range(&self) -> &super::kvrpcpb::RawDeleteRangeResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawDeleteRange(ref v)) => v,
            _ => super::kvrpcpb::RawDeleteRangeResponse::default_instance(),
        }
    }
    pub fn clear_raw_delete_range(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_raw_delete_range(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawDeleteRange(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_raw_delete_range(&mut self, v: super::kvrpcpb::RawDeleteRangeResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawDeleteRange(v))
    }

    // Mutable pointer to the field.
    pub fn mut_raw_delete_range(&mut self) -> &mut super::kvrpcpb::RawDeleteRangeResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawDeleteRange(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawDeleteRange(super::kvrpcpb::RawDeleteRangeResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawDeleteRange(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_raw_delete_range(&mut self) -> super::kvrpcpb::RawDeleteRangeResponse {
        if self.has_raw_delete_range() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawDeleteRange(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::RawDeleteRangeResponse::new()
        }
    }

    // .kvrpcpb.RawBatchScanResponse RawBatchScan = 21;


    pub fn get_raw_batch_scan(&self) -> &super::kvrpcpb::RawBatchScanResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchScan(ref v)) => v,
            _ => super::kvrpcpb::RawBatchScanResponse::default_instance(),
        }
    }
    pub fn clear_raw_batch_scan(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_raw_batch_scan(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchScan(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_raw_batch_scan(&mut self, v: super::kvrpcpb::RawBatchScanResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchScan(v))
    }

    // Mutable pointer to the field.
    pub fn mut_raw_batch_scan(&mut self) -> &mut super::kvrpcpb::RawBatchScanResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchScan(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchScan(super::kvrpcpb::RawBatchScanResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchScan(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_raw_batch_scan(&mut self) -> super::kvrpcpb::RawBatchScanResponse {
        if self.has_raw_batch_scan() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchScan(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::RawBatchScanResponse::new()
        }
    }

    // .coprocessor.Response Coprocessor = 22;


    pub fn get_coprocessor(&self) -> &super::coprocessor::Response {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Coprocessor(ref v)) => v,
            _ => super::coprocessor::Response::default_instance(),
        }
    }
    pub fn clear_coprocessor(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_coprocessor(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Coprocessor(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_coprocessor(&mut self, v: super::coprocessor::Response) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Coprocessor(v))
    }

    // Mutable pointer to the field.
    pub fn mut_coprocessor(&mut self) -> &mut super::coprocessor::Response {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Coprocessor(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Coprocessor(super::coprocessor::Response::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Coprocessor(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_coprocessor(&mut self) -> super::coprocessor::Response {
        if self.has_coprocessor() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Coprocessor(v)) => v,
                _ => panic!(),
            }
        } else {
            super::coprocessor::Response::new()
        }
    }

    // .kvrpcpb.PessimisticLockResponse PessimisticLock = 23;


    pub fn get_pessimistic_lock(&self) -> &super::kvrpcpb::PessimisticLockResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::PessimisticLock(ref v)) => v,
            _ => super::kvrpcpb::PessimisticLockResponse::default_instance(),
        }
    }
    pub fn clear_pessimistic_lock(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_pessimistic_lock(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::PessimisticLock(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_pessimistic_lock(&mut self, v: super::kvrpcpb::PessimisticLockResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::PessimisticLock(v))
    }

    // Mutable pointer to the field.
    pub fn mut_pessimistic_lock(&mut self) -> &mut super::kvrpcpb::PessimisticLockResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::PessimisticLock(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::PessimisticLock(super::kvrpcpb::PessimisticLockResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::PessimisticLock(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_pessimistic_lock(&mut self) -> super::kvrpcpb::PessimisticLockResponse {
        if self.has_pessimistic_lock() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::PessimisticLock(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::PessimisticLockResponse::new()
        }
    }

    // .kvrpcpb.PessimisticRollbackResponse PessimisticRollback = 24;


    pub fn get_pessimistic_rollback(&self) -> &super::kvrpcpb::PessimisticRollbackResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::PessimisticRollback(ref v)) => v,
            _ => super::kvrpcpb::PessimisticRollbackResponse::default_instance(),
        }
    }
    pub fn clear_pessimistic_rollback(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_pessimistic_rollback(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::PessimisticRollback(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_pessimistic_rollback(&mut self, v: super::kvrpcpb::PessimisticRollbackResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::PessimisticRollback(v))
    }

    // Mutable pointer to the field.
    pub fn mut_pessimistic_rollback(&mut self) -> &mut super::kvrpcpb::PessimisticRollbackResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::PessimisticRollback(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::PessimisticRollback(super::kvrpcpb::PessimisticRollbackResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::PessimisticRollback(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_pessimistic_rollback(&mut self) -> super::kvrpcpb::PessimisticRollbackResponse {
        if self.has_pessimistic_rollback() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::PessimisticRollback(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::PessimisticRollbackResponse::new()
        }
    }

    // .kvrpcpb.CheckTxnStatusResponse CheckTxnStatus = 25;


    pub fn get_check_txn_status(&self) -> &super::kvrpcpb::CheckTxnStatusResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::CheckTxnStatus(ref v)) => v,
            _ => super::kvrpcpb::CheckTxnStatusResponse::default_instance(),
        }
    }
    pub fn clear_check_txn_status(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_check_txn_status(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::CheckTxnStatus(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_check_txn_status(&mut self, v: super::kvrpcpb::CheckTxnStatusResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::CheckTxnStatus(v))
    }

    // Mutable pointer to the field.
    pub fn mut_check_txn_status(&mut self) -> &mut super::kvrpcpb::CheckTxnStatusResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::CheckTxnStatus(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::CheckTxnStatus(super::kvrpcpb::CheckTxnStatusResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::CheckTxnStatus(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_check_txn_status(&mut self) -> super::kvrpcpb::CheckTxnStatusResponse {
        if self.has_check_txn_status() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::CheckTxnStatus(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::CheckTxnStatusResponse::new()
        }
    }

    // .kvrpcpb.TxnHeartBeatResponse TxnHeartBeat = 26;


    pub fn get_txn_heart_beat(&self) -> &super::kvrpcpb::TxnHeartBeatResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::TxnHeartBeat(ref v)) => v,
            _ => super::kvrpcpb::TxnHeartBeatResponse::default_instance(),
        }
    }
    pub fn clear_txn_heart_beat(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_txn_heart_beat(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::TxnHeartBeat(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_txn_heart_beat(&mut self, v: super::kvrpcpb::TxnHeartBeatResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::TxnHeartBeat(v))
    }

    // Mutable pointer to the field.
    pub fn mut_txn_heart_beat(&mut self) -> &mut super::kvrpcpb::TxnHeartBeatResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::TxnHeartBeat(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::TxnHeartBeat(super::kvrpcpb::TxnHeartBeatResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::TxnHeartBeat(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_txn_heart_beat(&mut self) -> super::kvrpcpb::TxnHeartBeatResponse {
        if self.has_txn_heart_beat() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::TxnHeartBeat(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::TxnHeartBeatResponse::new()
        }
    }

    // .kvrpcpb.CheckSecondaryLocksResponse CheckSecondaryLocks = 33;


    pub fn get_check_secondary_locks(&self) -> &super::kvrpcpb::CheckSecondaryLocksResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::CheckSecondaryLocks(ref v)) => v,
            _ => super::kvrpcpb::CheckSecondaryLocksResponse::default_instance(),
        }
    }
    pub fn clear_check_secondary_locks(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_check_secondary_locks(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::CheckSecondaryLocks(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_check_secondary_locks(&mut self, v: super::kvrpcpb::CheckSecondaryLocksResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::CheckSecondaryLocks(v))
    }

    // Mutable pointer to the field.
    pub fn mut_check_secondary_locks(&mut self) -> &mut super::kvrpcpb::CheckSecondaryLocksResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::CheckSecondaryLocks(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::CheckSecondaryLocks(super::kvrpcpb::CheckSecondaryLocksResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::CheckSecondaryLocks(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_check_secondary_locks(&mut self) -> super::kvrpcpb::CheckSecondaryLocksResponse {
        if self.has_check_secondary_locks() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::CheckSecondaryLocks(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::CheckSecondaryLocksResponse::new()
        }
    }

    // .kvrpcpb.RawCoprocessorResponse RawCoprocessor = 34;


    pub fn get_raw_coprocessor(&self) -> &super::kvrpcpb::RawCoprocessorResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawCoprocessor(ref v)) => v,
            _ => super::kvrpcpb::RawCoprocessorResponse::default_instance(),
        }
    }
    pub fn clear_raw_coprocessor(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_raw_coprocessor(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawCoprocessor(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_raw_coprocessor(&mut self, v: super::kvrpcpb::RawCoprocessorResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawCoprocessor(v))
    }

    // Mutable pointer to the field.
    pub fn mut_raw_coprocessor(&mut self) -> &mut super::kvrpcpb::RawCoprocessorResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawCoprocessor(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawCoprocessor(super::kvrpcpb::RawCoprocessorResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawCoprocessor(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_raw_coprocessor(&mut self) -> super::kvrpcpb::RawCoprocessorResponse {
        if self.has_raw_coprocessor() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawCoprocessor(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::RawCoprocessorResponse::new()
        }
    }

    // .kvrpcpb.FlashbackToVersionResponse FlashbackToVersion = 35;


    pub fn get_flashback_to_version(&self) -> &super::kvrpcpb::FlashbackToVersionResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::FlashbackToVersion(ref v)) => v,
            _ => super::kvrpcpb::FlashbackToVersionResponse::default_instance(),
        }
    }
    pub fn clear_flashback_to_version(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_flashback_to_version(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::FlashbackToVersion(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_flashback_to_version(&mut self, v: super::kvrpcpb::FlashbackToVersionResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::FlashbackToVersion(v))
    }

    // Mutable pointer to the field.
    pub fn mut_flashback_to_version(&mut self) -> &mut super::kvrpcpb::FlashbackToVersionResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::FlashbackToVersion(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::FlashbackToVersion(super::kvrpcpb::FlashbackToVersionResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::FlashbackToVersion(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_flashback_to_version(&mut self) -> super::kvrpcpb::FlashbackToVersionResponse {
        if self.has_flashback_to_version() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::FlashbackToVersion(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::FlashbackToVersionResponse::new()
        }
    }

    // .tikvpb.BatchCommandsEmptyResponse Empty = 255;


    pub fn get_empty(&self) -> &BatchCommandsEmptyResponse {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Empty(ref v)) => v,
            _ => BatchCommandsEmptyResponse::default_instance(),
        }
    }
    pub fn clear_empty(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_empty(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Empty(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_empty(&mut self, v: BatchCommandsEmptyResponse) {
        self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Empty(v))
    }

    // Mutable pointer to the field.
    pub fn mut_empty(&mut self) -> &mut BatchCommandsEmptyResponse {
        if let ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Empty(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Empty(BatchCommandsEmptyResponse::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Empty(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_empty(&mut self) -> BatchCommandsEmptyResponse {
        if self.has_empty() {
            match self.cmd.take() {
                ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Empty(v)) => v,
                _ => panic!(),
            }
        } else {
            BatchCommandsEmptyResponse::new()
        }
    }
}

impl ::protobuf::Message for BatchCommandsResponseResponse {
    fn is_initialized(&self) -> bool {
        if let Some(BatchCommandsResponse_Response_oneof_cmd::Get(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::Scan(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::Prewrite(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::Commit(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::Import(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::Cleanup(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::BatchGet(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::BatchRollback(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::ScanLock(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::ResolveLock(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::Gc(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::DeleteRange(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::RawGet(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchGet(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::RawPut(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchPut(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::RawDelete(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchDelete(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::RawScan(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::RawDeleteRange(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchScan(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::Coprocessor(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::PessimisticLock(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::PessimisticRollback(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::CheckTxnStatus(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::TxnHeartBeat(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::CheckSecondaryLocks(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::RawCoprocessor(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::FlashbackToVersion(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BatchCommandsResponse_Response_oneof_cmd::Empty(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Get(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Scan(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Prewrite(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Commit(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Import(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Cleanup(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::BatchGet(is.read_message()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::BatchRollback(is.read_message()?));
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::ScanLock(is.read_message()?));
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::ResolveLock(is.read_message()?));
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Gc(is.read_message()?));
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::DeleteRange(is.read_message()?));
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawGet(is.read_message()?));
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchGet(is.read_message()?));
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawPut(is.read_message()?));
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchPut(is.read_message()?));
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawDelete(is.read_message()?));
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchDelete(is.read_message()?));
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawScan(is.read_message()?));
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawDeleteRange(is.read_message()?));
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawBatchScan(is.read_message()?));
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Coprocessor(is.read_message()?));
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::PessimisticLock(is.read_message()?));
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::PessimisticRollback(is.read_message()?));
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::CheckTxnStatus(is.read_message()?));
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::TxnHeartBeat(is.read_message()?));
                },
                33 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::CheckSecondaryLocks(is.read_message()?));
                },
                34 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::RawCoprocessor(is.read_message()?));
                },
                35 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::FlashbackToVersion(is.read_message()?));
                },
                255 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(BatchCommandsResponse_Response_oneof_cmd::Empty(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.cmd {
            match v {
                &BatchCommandsResponse_Response_oneof_cmd::Get(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::Scan(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::Prewrite(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::Commit(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::Import(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::Cleanup(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::BatchGet(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::BatchRollback(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::ScanLock(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::ResolveLock(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::Gc(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::DeleteRange(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::RawGet(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::RawBatchGet(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::RawPut(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::RawBatchPut(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::RawDelete(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::RawBatchDelete(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::RawScan(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::RawDeleteRange(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::RawBatchScan(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::Coprocessor(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::PessimisticLock(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::PessimisticRollback(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::CheckTxnStatus(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::TxnHeartBeat(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::CheckSecondaryLocks(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::RawCoprocessor(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::FlashbackToVersion(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BatchCommandsResponse_Response_oneof_cmd::Empty(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.cmd {
            match v {
                &BatchCommandsResponse_Response_oneof_cmd::Get(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::Scan(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::Prewrite(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::Commit(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::Import(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::Cleanup(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::BatchGet(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::BatchRollback(ref v) => {
                    os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::ScanLock(ref v) => {
                    os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::ResolveLock(ref v) => {
                    os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::Gc(ref v) => {
                    os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::DeleteRange(ref v) => {
                    os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::RawGet(ref v) => {
                    os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::RawBatchGet(ref v) => {
                    os.write_tag(14, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::RawPut(ref v) => {
                    os.write_tag(15, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::RawBatchPut(ref v) => {
                    os.write_tag(16, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::RawDelete(ref v) => {
                    os.write_tag(17, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::RawBatchDelete(ref v) => {
                    os.write_tag(18, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::RawScan(ref v) => {
                    os.write_tag(19, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::RawDeleteRange(ref v) => {
                    os.write_tag(20, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::RawBatchScan(ref v) => {
                    os.write_tag(21, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::Coprocessor(ref v) => {
                    os.write_tag(22, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::PessimisticLock(ref v) => {
                    os.write_tag(23, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::PessimisticRollback(ref v) => {
                    os.write_tag(24, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::CheckTxnStatus(ref v) => {
                    os.write_tag(25, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::TxnHeartBeat(ref v) => {
                    os.write_tag(26, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::CheckSecondaryLocks(ref v) => {
                    os.write_tag(33, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::RawCoprocessor(ref v) => {
                    os.write_tag(34, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::FlashbackToVersion(ref v) => {
                    os.write_tag(35, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BatchCommandsResponse_Response_oneof_cmd::Empty(ref v) => {
                    os.write_tag(255, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BatchCommandsResponseResponse {
        BatchCommandsResponseResponse::new()
    }

    fn default_instance() -> &'static BatchCommandsResponseResponse {
        static mut instance: ::protobuf::lazy::Lazy<BatchCommandsResponseResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BatchCommandsResponseResponse,
        };
        unsafe {
            instance.get(BatchCommandsResponseResponse::new)
        }
    }
}

impl ::protobuf::Clear for BatchCommandsResponseResponse {
    fn clear(&mut self) {
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for BatchCommandsResponseResponse {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.cmd, "cmd", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for BatchCommandsResponseResponse {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.cmd, "cmd", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchCommandsResponseResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BatchRaftMessage {
    // message fields
    pub msgs: ::protobuf::RepeatedField<super::raft_serverpb::RaftMessage>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BatchRaftMessage {
    fn default() -> &'a BatchRaftMessage {
        <BatchRaftMessage as ::protobuf::Message>::default_instance()
    }
}

impl BatchRaftMessage {
    pub fn new() -> BatchRaftMessage {
        ::std::default::Default::default()
    }

    // repeated .raft_serverpb.RaftMessage msgs = 1;


    pub fn get_msgs(&self) -> &[super::raft_serverpb::RaftMessage] {
        &self.msgs
    }
    pub fn clear_msgs(&mut self) {
        self.msgs.clear();
    }

    // Param is passed by value, moved
    pub fn set_msgs(&mut self, v: ::protobuf::RepeatedField<super::raft_serverpb::RaftMessage>) {
        self.msgs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_msgs(&mut self) -> &mut ::protobuf::RepeatedField<super::raft_serverpb::RaftMessage> {
        &mut self.msgs
    }

    // Take field
    pub fn take_msgs(&mut self) -> ::protobuf::RepeatedField<super::raft_serverpb::RaftMessage> {
        ::std::mem::replace(&mut self.msgs, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for BatchRaftMessage {
    fn is_initialized(&self) -> bool {
        for v in &self.msgs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.msgs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.msgs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.msgs {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BatchRaftMessage {
        BatchRaftMessage::new()
    }

    fn default_instance() -> &'static BatchRaftMessage {
        static mut instance: ::protobuf::lazy::Lazy<BatchRaftMessage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BatchRaftMessage,
        };
        unsafe {
            instance.get(BatchRaftMessage::new)
        }
    }
}

impl ::protobuf::Clear for BatchRaftMessage {
    fn clear(&mut self) {
        self.msgs.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for BatchRaftMessage {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.msgs, "msgs", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for BatchRaftMessage {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.msgs, "msgs", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchRaftMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BatchCommandsEmptyRequest {
    // message fields
    pub test_id: u64,
    pub delay_time: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BatchCommandsEmptyRequest {
    fn default() -> &'a BatchCommandsEmptyRequest {
        <BatchCommandsEmptyRequest as ::protobuf::Message>::default_instance()
    }
}

impl BatchCommandsEmptyRequest {
    pub fn new() -> BatchCommandsEmptyRequest {
        ::std::default::Default::default()
    }

    // uint64 test_id = 1;


    pub fn get_test_id(&self) -> u64 {
        self.test_id
    }
    pub fn clear_test_id(&mut self) {
        self.test_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_test_id(&mut self, v: u64) {
        self.test_id = v;
    }

    // uint64 delay_time = 2;


    pub fn get_delay_time(&self) -> u64 {
        self.delay_time
    }
    pub fn clear_delay_time(&mut self) {
        self.delay_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_delay_time(&mut self, v: u64) {
        self.delay_time = v;
    }
}

impl ::protobuf::Message for BatchCommandsEmptyRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.test_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.delay_time = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.test_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.test_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.delay_time != 0 {
            my_size += ::protobuf::rt::value_size(2, self.delay_time, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.test_id != 0 {
            os.write_uint64(1, self.test_id)?;
        }
        if self.delay_time != 0 {
            os.write_uint64(2, self.delay_time)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BatchCommandsEmptyRequest {
        BatchCommandsEmptyRequest::new()
    }

    fn default_instance() -> &'static BatchCommandsEmptyRequest {
        static mut instance: ::protobuf::lazy::Lazy<BatchCommandsEmptyRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BatchCommandsEmptyRequest,
        };
        unsafe {
            instance.get(BatchCommandsEmptyRequest::new)
        }
    }
}

impl ::protobuf::Clear for BatchCommandsEmptyRequest {
    fn clear(&mut self) {
        self.test_id = 0;
        self.delay_time = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for BatchCommandsEmptyRequest {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.test_id, "test_id", buf);
        ::protobuf::PbPrint::fmt(&self.delay_time, "delay_time", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for BatchCommandsEmptyRequest {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.test_id, "test_id", &mut s);
        ::protobuf::PbPrint::fmt(&self.delay_time, "delay_time", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchCommandsEmptyRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BatchCommandsEmptyResponse {
    // message fields
    pub test_id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BatchCommandsEmptyResponse {
    fn default() -> &'a BatchCommandsEmptyResponse {
        <BatchCommandsEmptyResponse as ::protobuf::Message>::default_instance()
    }
}

impl BatchCommandsEmptyResponse {
    pub fn new() -> BatchCommandsEmptyResponse {
        ::std::default::Default::default()
    }

    // uint64 test_id = 1;


    pub fn get_test_id(&self) -> u64 {
        self.test_id
    }
    pub fn clear_test_id(&mut self) {
        self.test_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_test_id(&mut self, v: u64) {
        self.test_id = v;
    }
}

impl ::protobuf::Message for BatchCommandsEmptyResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.test_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.test_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.test_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.test_id != 0 {
            os.write_uint64(1, self.test_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BatchCommandsEmptyResponse {
        BatchCommandsEmptyResponse::new()
    }

    fn default_instance() -> &'static BatchCommandsEmptyResponse {
        static mut instance: ::protobuf::lazy::Lazy<BatchCommandsEmptyResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BatchCommandsEmptyResponse,
        };
        unsafe {
            instance.get(BatchCommandsEmptyResponse::new)
        }
    }
}

impl ::protobuf::Clear for BatchCommandsEmptyResponse {
    fn clear(&mut self) {
        self.test_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for BatchCommandsEmptyResponse {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.test_id, "test_id", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for BatchCommandsEmptyResponse {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.test_id, "test_id", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchCommandsEmptyResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}
pub use super::tikvpb_grpc::*;
