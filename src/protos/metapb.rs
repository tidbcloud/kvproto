// This file is generated by rust-protobuf 2.8.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `metapb.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_0;

#[derive(PartialEq,Clone,Default)]
pub struct Cluster {
    // message fields
    pub id: u64,
    pub max_peer_count: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cluster {
    fn default() -> &'a Cluster {
        <Cluster as ::protobuf::Message>::default_instance()
    }
}

impl Cluster {
    pub fn new() -> Cluster {
        ::std::default::Default::default()
    }

    // uint64 id = 1;


    pub fn get_id(&self) -> u64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u64) {
        self.id = v;
    }

    // uint32 max_peer_count = 2;


    pub fn get_max_peer_count(&self) -> u32 {
        self.max_peer_count
    }
    pub fn clear_max_peer_count(&mut self) {
        self.max_peer_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_max_peer_count(&mut self, v: u32) {
        self.max_peer_count = v;
    }
}

impl ::protobuf::Message for Cluster {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.max_peer_count = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.max_peer_count != 0 {
            my_size += ::protobuf::rt::value_size(2, self.max_peer_count, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint64(1, self.id)?;
        }
        if self.max_peer_count != 0 {
            os.write_uint32(2, self.max_peer_count)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cluster {
        Cluster::new()
    }

    fn default_instance() -> &'static Cluster {
        static mut instance: ::protobuf::lazy::Lazy<Cluster> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cluster,
        };
        unsafe {
            instance.get(Cluster::new)
        }
    }
}

impl ::protobuf::Clear for Cluster {
    fn clear(&mut self) {
        self.id = 0;
        self.max_peer_count = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for Cluster {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.id, "id", buf);
        ::protobuf::PbPrint::fmt(&self.max_peer_count, "max_peer_count", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for Cluster {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.id, "id", &mut s);
        ::protobuf::PbPrint::fmt(&self.max_peer_count, "max_peer_count", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cluster {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StoreLabel {
    // message fields
    pub key: ::std::string::String,
    pub value: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StoreLabel {
    fn default() -> &'a StoreLabel {
        <StoreLabel as ::protobuf::Message>::default_instance()
    }
}

impl StoreLabel {
    pub fn new() -> StoreLabel {
        ::std::default::Default::default()
    }

    // string key = 1;


    pub fn get_key(&self) -> &str {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    // string value = 2;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }
}

impl ::protobuf::Message for StoreLabel {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        if !self.value.is_empty() {
            os.write_string(2, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StoreLabel {
        StoreLabel::new()
    }

    fn default_instance() -> &'static StoreLabel {
        static mut instance: ::protobuf::lazy::Lazy<StoreLabel> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StoreLabel,
        };
        unsafe {
            instance.get(StoreLabel::new)
        }
    }
}

impl ::protobuf::Clear for StoreLabel {
    fn clear(&mut self) {
        self.key.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for StoreLabel {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.key, "key", buf);
        ::protobuf::PbPrint::fmt(&self.value, "value", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for StoreLabel {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.key, "key", &mut s);
        ::protobuf::PbPrint::fmt(&self.value, "value", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for StoreLabel {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Store {
    // message fields
    pub id: u64,
    pub address: ::std::string::String,
    pub state: StoreState,
    pub labels: ::protobuf::RepeatedField<StoreLabel>,
    pub version: ::std::string::String,
    pub peer_address: ::std::string::String,
    pub status_address: ::std::string::String,
    pub git_hash: ::std::string::String,
    pub start_timestamp: i64,
    pub deploy_path: ::std::string::String,
    pub last_heartbeat: i64,
    pub physically_destroyed: bool,
    pub node_state: NodeState,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Store {
    fn default() -> &'a Store {
        <Store as ::protobuf::Message>::default_instance()
    }
}

impl Store {
    pub fn new() -> Store {
        ::std::default::Default::default()
    }

    // uint64 id = 1;


    pub fn get_id(&self) -> u64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u64) {
        self.id = v;
    }

    // string address = 2;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }

    // .metapb.StoreState state = 3;


    pub fn get_state(&self) -> StoreState {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = StoreState::Up;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: StoreState) {
        self.state = v;
    }

    // repeated .metapb.StoreLabel labels = 4;


    pub fn get_labels(&self) -> &[StoreLabel] {
        &self.labels
    }
    pub fn clear_labels(&mut self) {
        self.labels.clear();
    }

    // Param is passed by value, moved
    pub fn set_labels(&mut self, v: ::protobuf::RepeatedField<StoreLabel>) {
        self.labels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_labels(&mut self) -> &mut ::protobuf::RepeatedField<StoreLabel> {
        &mut self.labels
    }

    // Take field
    pub fn take_labels(&mut self) -> ::protobuf::RepeatedField<StoreLabel> {
        ::std::mem::replace(&mut self.labels, ::protobuf::RepeatedField::new())
    }

    // string version = 5;


    pub fn get_version(&self) -> &str {
        &self.version
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }

    // string peer_address = 6;


    pub fn get_peer_address(&self) -> &str {
        &self.peer_address
    }
    pub fn clear_peer_address(&mut self) {
        self.peer_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_peer_address(&mut self, v: ::std::string::String) {
        self.peer_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_peer_address(&mut self) -> &mut ::std::string::String {
        &mut self.peer_address
    }

    // Take field
    pub fn take_peer_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.peer_address, ::std::string::String::new())
    }

    // string status_address = 7;


    pub fn get_status_address(&self) -> &str {
        &self.status_address
    }
    pub fn clear_status_address(&mut self) {
        self.status_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_status_address(&mut self, v: ::std::string::String) {
        self.status_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status_address(&mut self) -> &mut ::std::string::String {
        &mut self.status_address
    }

    // Take field
    pub fn take_status_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.status_address, ::std::string::String::new())
    }

    // string git_hash = 8;


    pub fn get_git_hash(&self) -> &str {
        &self.git_hash
    }
    pub fn clear_git_hash(&mut self) {
        self.git_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_git_hash(&mut self, v: ::std::string::String) {
        self.git_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_git_hash(&mut self) -> &mut ::std::string::String {
        &mut self.git_hash
    }

    // Take field
    pub fn take_git_hash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.git_hash, ::std::string::String::new())
    }

    // int64 start_timestamp = 9;


    pub fn get_start_timestamp(&self) -> i64 {
        self.start_timestamp
    }
    pub fn clear_start_timestamp(&mut self) {
        self.start_timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_start_timestamp(&mut self, v: i64) {
        self.start_timestamp = v;
    }

    // string deploy_path = 10;


    pub fn get_deploy_path(&self) -> &str {
        &self.deploy_path
    }
    pub fn clear_deploy_path(&mut self) {
        self.deploy_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_deploy_path(&mut self, v: ::std::string::String) {
        self.deploy_path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deploy_path(&mut self) -> &mut ::std::string::String {
        &mut self.deploy_path
    }

    // Take field
    pub fn take_deploy_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deploy_path, ::std::string::String::new())
    }

    // int64 last_heartbeat = 11;


    pub fn get_last_heartbeat(&self) -> i64 {
        self.last_heartbeat
    }
    pub fn clear_last_heartbeat(&mut self) {
        self.last_heartbeat = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_heartbeat(&mut self, v: i64) {
        self.last_heartbeat = v;
    }

    // bool physically_destroyed = 12;


    pub fn get_physically_destroyed(&self) -> bool {
        self.physically_destroyed
    }
    pub fn clear_physically_destroyed(&mut self) {
        self.physically_destroyed = false;
    }

    // Param is passed by value, moved
    pub fn set_physically_destroyed(&mut self, v: bool) {
        self.physically_destroyed = v;
    }

    // .metapb.NodeState node_state = 13;


    pub fn get_node_state(&self) -> NodeState {
        self.node_state
    }
    pub fn clear_node_state(&mut self) {
        self.node_state = NodeState::Preparing;
    }

    // Param is passed by value, moved
    pub fn set_node_state(&mut self, v: NodeState) {
        self.node_state = v;
    }
}

impl ::protobuf::Message for Store {
    fn is_initialized(&self) -> bool {
        for v in &self.labels {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                3 => {
                    if wire_type == ::protobuf::wire_format::WireTypeVarint {self.state = is.read_enum()?;} else {return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));}
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.labels)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.peer_address)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.status_address)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.git_hash)?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.start_timestamp = tmp;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deploy_path)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.last_heartbeat = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.physically_destroyed = tmp;
                },
                13 => {
                    if wire_type == ::protobuf::wire_format::WireTypeVarint {self.node_state = is.read_enum()?;} else {return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));}
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.address);
        }
        if self.state != StoreState::Up {
            my_size += ::protobuf::rt::enum_size(3, self.state);
        }
        for value in &self.labels {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.version);
        }
        if !self.peer_address.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.peer_address);
        }
        if !self.status_address.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.status_address);
        }
        if !self.git_hash.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.git_hash);
        }
        if self.start_timestamp != 0 {
            my_size += ::protobuf::rt::value_size(9, self.start_timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.deploy_path.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.deploy_path);
        }
        if self.last_heartbeat != 0 {
            my_size += ::protobuf::rt::value_size(11, self.last_heartbeat, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.physically_destroyed != false {
            my_size += 2;
        }
        if self.node_state != NodeState::Preparing {
            my_size += ::protobuf::rt::enum_size(13, self.node_state);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint64(1, self.id)?;
        }
        if !self.address.is_empty() {
            os.write_string(2, &self.address)?;
        }
        if self.state != StoreState::Up {
            os.write_enum(3, self.state.value())?;
        }
        for v in &self.labels {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.version.is_empty() {
            os.write_string(5, &self.version)?;
        }
        if !self.peer_address.is_empty() {
            os.write_string(6, &self.peer_address)?;
        }
        if !self.status_address.is_empty() {
            os.write_string(7, &self.status_address)?;
        }
        if !self.git_hash.is_empty() {
            os.write_string(8, &self.git_hash)?;
        }
        if self.start_timestamp != 0 {
            os.write_int64(9, self.start_timestamp)?;
        }
        if !self.deploy_path.is_empty() {
            os.write_string(10, &self.deploy_path)?;
        }
        if self.last_heartbeat != 0 {
            os.write_int64(11, self.last_heartbeat)?;
        }
        if self.physically_destroyed != false {
            os.write_bool(12, self.physically_destroyed)?;
        }
        if self.node_state != NodeState::Preparing {
            os.write_enum(13, self.node_state.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Store {
        Store::new()
    }

    fn default_instance() -> &'static Store {
        static mut instance: ::protobuf::lazy::Lazy<Store> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Store,
        };
        unsafe {
            instance.get(Store::new)
        }
    }
}

impl ::protobuf::Clear for Store {
    fn clear(&mut self) {
        self.id = 0;
        self.address.clear();
        self.state = StoreState::Up;
        self.labels.clear();
        self.version.clear();
        self.peer_address.clear();
        self.status_address.clear();
        self.git_hash.clear();
        self.start_timestamp = 0;
        self.deploy_path.clear();
        self.last_heartbeat = 0;
        self.physically_destroyed = false;
        self.node_state = NodeState::Preparing;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for Store {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.id, "id", buf);
        ::protobuf::PbPrint::fmt(&self.address, "address", buf);
        ::protobuf::PbPrint::fmt(&self.state, "state", buf);
        ::protobuf::PbPrint::fmt(&self.labels, "labels", buf);
        ::protobuf::PbPrint::fmt(&self.version, "version", buf);
        ::protobuf::PbPrint::fmt(&self.peer_address, "peer_address", buf);
        ::protobuf::PbPrint::fmt(&self.status_address, "status_address", buf);
        ::protobuf::PbPrint::fmt(&self.git_hash, "git_hash", buf);
        ::protobuf::PbPrint::fmt(&self.start_timestamp, "start_timestamp", buf);
        ::protobuf::PbPrint::fmt(&self.deploy_path, "deploy_path", buf);
        ::protobuf::PbPrint::fmt(&self.last_heartbeat, "last_heartbeat", buf);
        ::protobuf::PbPrint::fmt(&self.physically_destroyed, "physically_destroyed", buf);
        ::protobuf::PbPrint::fmt(&self.node_state, "node_state", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for Store {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.id, "id", &mut s);
        ::protobuf::PbPrint::fmt(&self.address, "address", &mut s);
        ::protobuf::PbPrint::fmt(&self.state, "state", &mut s);
        ::protobuf::PbPrint::fmt(&self.labels, "labels", &mut s);
        ::protobuf::PbPrint::fmt(&self.version, "version", &mut s);
        ::protobuf::PbPrint::fmt(&self.peer_address, "peer_address", &mut s);
        ::protobuf::PbPrint::fmt(&self.status_address, "status_address", &mut s);
        ::protobuf::PbPrint::fmt(&self.git_hash, "git_hash", &mut s);
        ::protobuf::PbPrint::fmt(&self.start_timestamp, "start_timestamp", &mut s);
        ::protobuf::PbPrint::fmt(&self.deploy_path, "deploy_path", &mut s);
        ::protobuf::PbPrint::fmt(&self.last_heartbeat, "last_heartbeat", &mut s);
        ::protobuf::PbPrint::fmt(&self.physically_destroyed, "physically_destroyed", &mut s);
        ::protobuf::PbPrint::fmt(&self.node_state, "node_state", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for Store {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RegionEpoch {
    // message fields
    pub conf_ver: u64,
    pub version: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RegionEpoch {
    fn default() -> &'a RegionEpoch {
        <RegionEpoch as ::protobuf::Message>::default_instance()
    }
}

impl RegionEpoch {
    pub fn new() -> RegionEpoch {
        ::std::default::Default::default()
    }

    // uint64 conf_ver = 1;


    pub fn get_conf_ver(&self) -> u64 {
        self.conf_ver
    }
    pub fn clear_conf_ver(&mut self) {
        self.conf_ver = 0;
    }

    // Param is passed by value, moved
    pub fn set_conf_ver(&mut self, v: u64) {
        self.conf_ver = v;
    }

    // uint64 version = 2;


    pub fn get_version(&self) -> u64 {
        self.version
    }
    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u64) {
        self.version = v;
    }
}

impl ::protobuf::Message for RegionEpoch {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.conf_ver = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.version = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.conf_ver != 0 {
            my_size += ::protobuf::rt::value_size(1, self.conf_ver, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(2, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.conf_ver != 0 {
            os.write_uint64(1, self.conf_ver)?;
        }
        if self.version != 0 {
            os.write_uint64(2, self.version)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RegionEpoch {
        RegionEpoch::new()
    }

    fn default_instance() -> &'static RegionEpoch {
        static mut instance: ::protobuf::lazy::Lazy<RegionEpoch> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RegionEpoch,
        };
        unsafe {
            instance.get(RegionEpoch::new)
        }
    }
}

impl ::protobuf::Clear for RegionEpoch {
    fn clear(&mut self) {
        self.conf_ver = 0;
        self.version = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for RegionEpoch {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.conf_ver, "conf_ver", buf);
        ::protobuf::PbPrint::fmt(&self.version, "version", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for RegionEpoch {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.conf_ver, "conf_ver", &mut s);
        ::protobuf::PbPrint::fmt(&self.version, "version", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegionEpoch {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BucketStats {
    // message fields
    pub read_bytes: ::std::vec::Vec<u64>,
    pub write_bytes: ::std::vec::Vec<u64>,
    pub read_qps: ::std::vec::Vec<u64>,
    pub write_qps: ::std::vec::Vec<u64>,
    pub read_keys: ::std::vec::Vec<u64>,
    pub write_keys: ::std::vec::Vec<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BucketStats {
    fn default() -> &'a BucketStats {
        <BucketStats as ::protobuf::Message>::default_instance()
    }
}

impl BucketStats {
    pub fn new() -> BucketStats {
        ::std::default::Default::default()
    }

    // repeated uint64 read_bytes = 1;


    pub fn get_read_bytes(&self) -> &[u64] {
        &self.read_bytes
    }
    pub fn clear_read_bytes(&mut self) {
        self.read_bytes.clear();
    }

    // Param is passed by value, moved
    pub fn set_read_bytes(&mut self, v: ::std::vec::Vec<u64>) {
        self.read_bytes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_read_bytes(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.read_bytes
    }

    // Take field
    pub fn take_read_bytes(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.read_bytes, ::std::vec::Vec::new())
    }

    // repeated uint64 write_bytes = 2;


    pub fn get_write_bytes(&self) -> &[u64] {
        &self.write_bytes
    }
    pub fn clear_write_bytes(&mut self) {
        self.write_bytes.clear();
    }

    // Param is passed by value, moved
    pub fn set_write_bytes(&mut self, v: ::std::vec::Vec<u64>) {
        self.write_bytes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_write_bytes(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.write_bytes
    }

    // Take field
    pub fn take_write_bytes(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.write_bytes, ::std::vec::Vec::new())
    }

    // repeated uint64 read_qps = 3;


    pub fn get_read_qps(&self) -> &[u64] {
        &self.read_qps
    }
    pub fn clear_read_qps(&mut self) {
        self.read_qps.clear();
    }

    // Param is passed by value, moved
    pub fn set_read_qps(&mut self, v: ::std::vec::Vec<u64>) {
        self.read_qps = v;
    }

    // Mutable pointer to the field.
    pub fn mut_read_qps(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.read_qps
    }

    // Take field
    pub fn take_read_qps(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.read_qps, ::std::vec::Vec::new())
    }

    // repeated uint64 write_qps = 4;


    pub fn get_write_qps(&self) -> &[u64] {
        &self.write_qps
    }
    pub fn clear_write_qps(&mut self) {
        self.write_qps.clear();
    }

    // Param is passed by value, moved
    pub fn set_write_qps(&mut self, v: ::std::vec::Vec<u64>) {
        self.write_qps = v;
    }

    // Mutable pointer to the field.
    pub fn mut_write_qps(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.write_qps
    }

    // Take field
    pub fn take_write_qps(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.write_qps, ::std::vec::Vec::new())
    }

    // repeated uint64 read_keys = 5;


    pub fn get_read_keys(&self) -> &[u64] {
        &self.read_keys
    }
    pub fn clear_read_keys(&mut self) {
        self.read_keys.clear();
    }

    // Param is passed by value, moved
    pub fn set_read_keys(&mut self, v: ::std::vec::Vec<u64>) {
        self.read_keys = v;
    }

    // Mutable pointer to the field.
    pub fn mut_read_keys(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.read_keys
    }

    // Take field
    pub fn take_read_keys(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.read_keys, ::std::vec::Vec::new())
    }

    // repeated uint64 write_keys = 6;


    pub fn get_write_keys(&self) -> &[u64] {
        &self.write_keys
    }
    pub fn clear_write_keys(&mut self) {
        self.write_keys.clear();
    }

    // Param is passed by value, moved
    pub fn set_write_keys(&mut self, v: ::std::vec::Vec<u64>) {
        self.write_keys = v;
    }

    // Mutable pointer to the field.
    pub fn mut_write_keys(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.write_keys
    }

    // Take field
    pub fn take_write_keys(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.write_keys, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for BucketStats {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.read_bytes)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.write_bytes)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.read_qps)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.write_qps)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.read_keys)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.write_keys)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.read_bytes {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.write_bytes {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.read_qps {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.write_qps {
            my_size += ::protobuf::rt::value_size(4, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.read_keys {
            my_size += ::protobuf::rt::value_size(5, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.write_keys {
            my_size += ::protobuf::rt::value_size(6, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.read_bytes {
            os.write_uint64(1, *v)?;
        };
        for v in &self.write_bytes {
            os.write_uint64(2, *v)?;
        };
        for v in &self.read_qps {
            os.write_uint64(3, *v)?;
        };
        for v in &self.write_qps {
            os.write_uint64(4, *v)?;
        };
        for v in &self.read_keys {
            os.write_uint64(5, *v)?;
        };
        for v in &self.write_keys {
            os.write_uint64(6, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BucketStats {
        BucketStats::new()
    }

    fn default_instance() -> &'static BucketStats {
        static mut instance: ::protobuf::lazy::Lazy<BucketStats> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BucketStats,
        };
        unsafe {
            instance.get(BucketStats::new)
        }
    }
}

impl ::protobuf::Clear for BucketStats {
    fn clear(&mut self) {
        self.read_bytes.clear();
        self.write_bytes.clear();
        self.read_qps.clear();
        self.write_qps.clear();
        self.read_keys.clear();
        self.write_keys.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for BucketStats {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.read_bytes, "read_bytes", buf);
        ::protobuf::PbPrint::fmt(&self.write_bytes, "write_bytes", buf);
        ::protobuf::PbPrint::fmt(&self.read_qps, "read_qps", buf);
        ::protobuf::PbPrint::fmt(&self.write_qps, "write_qps", buf);
        ::protobuf::PbPrint::fmt(&self.read_keys, "read_keys", buf);
        ::protobuf::PbPrint::fmt(&self.write_keys, "write_keys", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for BucketStats {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.read_bytes, "read_bytes", &mut s);
        ::protobuf::PbPrint::fmt(&self.write_bytes, "write_bytes", &mut s);
        ::protobuf::PbPrint::fmt(&self.read_qps, "read_qps", &mut s);
        ::protobuf::PbPrint::fmt(&self.write_qps, "write_qps", &mut s);
        ::protobuf::PbPrint::fmt(&self.read_keys, "read_keys", &mut s);
        ::protobuf::PbPrint::fmt(&self.write_keys, "write_keys", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for BucketStats {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Buckets {
    // message fields
    pub region_id: u64,
    pub version: u64,
    pub keys: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    pub stats: ::protobuf::SingularPtrField<BucketStats>,
    pub period_in_ms: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Buckets {
    fn default() -> &'a Buckets {
        <Buckets as ::protobuf::Message>::default_instance()
    }
}

impl Buckets {
    pub fn new() -> Buckets {
        ::std::default::Default::default()
    }

    // uint64 region_id = 1;


    pub fn get_region_id(&self) -> u64 {
        self.region_id
    }
    pub fn clear_region_id(&mut self) {
        self.region_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_region_id(&mut self, v: u64) {
        self.region_id = v;
    }

    // uint64 version = 2;


    pub fn get_version(&self) -> u64 {
        self.version
    }
    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u64) {
        self.version = v;
    }

    // repeated bytes keys = 3;


    pub fn get_keys(&self) -> &[::std::vec::Vec<u8>] {
        &self.keys
    }
    pub fn clear_keys(&mut self) {
        self.keys.clear();
    }

    // Param is passed by value, moved
    pub fn set_keys(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.keys = v;
    }

    // Mutable pointer to the field.
    pub fn mut_keys(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.keys
    }

    // Take field
    pub fn take_keys(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.keys, ::protobuf::RepeatedField::new())
    }

    // .metapb.BucketStats stats = 4;


    pub fn get_stats(&self) -> &BucketStats {
        self.stats.as_ref().unwrap_or_else(|| BucketStats::default_instance())
    }
    pub fn clear_stats(&mut self) {
        self.stats.clear();
    }

    pub fn has_stats(&self) -> bool {
        self.stats.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stats(&mut self, v: BucketStats) {
        self.stats = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stats(&mut self) -> &mut BucketStats {
        if self.stats.is_none() {
            self.stats.set_default();
        }
        self.stats.as_mut().unwrap()
    }

    // Take field
    pub fn take_stats(&mut self) -> BucketStats {
        self.stats.take().unwrap_or_else(|| BucketStats::new())
    }

    // uint64 period_in_ms = 5;


    pub fn get_period_in_ms(&self) -> u64 {
        self.period_in_ms
    }
    pub fn clear_period_in_ms(&mut self) {
        self.period_in_ms = 0;
    }

    // Param is passed by value, moved
    pub fn set_period_in_ms(&mut self, v: u64) {
        self.period_in_ms = v;
    }
}

impl ::protobuf::Message for Buckets {
    fn is_initialized(&self) -> bool {
        for v in &self.stats {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.region_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.version = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.keys)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.stats)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.period_in_ms = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.region_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.region_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(2, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.keys {
            my_size += ::protobuf::rt::bytes_size(3, &value);
        };
        if let Some(ref v) = self.stats.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.period_in_ms != 0 {
            my_size += ::protobuf::rt::value_size(5, self.period_in_ms, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.region_id != 0 {
            os.write_uint64(1, self.region_id)?;
        }
        if self.version != 0 {
            os.write_uint64(2, self.version)?;
        }
        for v in &self.keys {
            os.write_bytes(3, &v)?;
        };
        if let Some(ref v) = self.stats.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.period_in_ms != 0 {
            os.write_uint64(5, self.period_in_ms)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Buckets {
        Buckets::new()
    }

    fn default_instance() -> &'static Buckets {
        static mut instance: ::protobuf::lazy::Lazy<Buckets> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Buckets,
        };
        unsafe {
            instance.get(Buckets::new)
        }
    }
}

impl ::protobuf::Clear for Buckets {
    fn clear(&mut self) {
        self.region_id = 0;
        self.version = 0;
        self.keys.clear();
        self.stats.clear();
        self.period_in_ms = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for Buckets {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.region_id, "region_id", buf);
        ::protobuf::PbPrint::fmt(&self.version, "version", buf);
        ::protobuf::PbPrint::fmt(&self.keys, "keys", buf);
        ::protobuf::PbPrint::fmt(&self.stats, "stats", buf);
        ::protobuf::PbPrint::fmt(&self.period_in_ms, "period_in_ms", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for Buckets {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.region_id, "region_id", &mut s);
        ::protobuf::PbPrint::fmt(&self.version, "version", &mut s);
        ::protobuf::PbPrint::fmt(&self.keys, "keys", &mut s);
        ::protobuf::PbPrint::fmt(&self.stats, "stats", &mut s);
        ::protobuf::PbPrint::fmt(&self.period_in_ms, "period_in_ms", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for Buckets {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Region {
    // message fields
    pub id: u64,
    pub start_key: ::std::vec::Vec<u8>,
    pub end_key: ::std::vec::Vec<u8>,
    pub region_epoch: ::protobuf::SingularPtrField<RegionEpoch>,
    pub peers: ::protobuf::RepeatedField<Peer>,
    pub encryption_meta: ::protobuf::SingularPtrField<super::encryptionpb::EncryptionMeta>,
    pub is_in_flashback: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Region {
    fn default() -> &'a Region {
        <Region as ::protobuf::Message>::default_instance()
    }
}

impl Region {
    pub fn new() -> Region {
        ::std::default::Default::default()
    }

    // uint64 id = 1;


    pub fn get_id(&self) -> u64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u64) {
        self.id = v;
    }

    // bytes start_key = 2;


    pub fn get_start_key(&self) -> &[u8] {
        &self.start_key
    }
    pub fn clear_start_key(&mut self) {
        self.start_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_start_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.start_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.start_key
    }

    // Take field
    pub fn take_start_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.start_key, ::std::vec::Vec::new())
    }

    // bytes end_key = 3;


    pub fn get_end_key(&self) -> &[u8] {
        &self.end_key
    }
    pub fn clear_end_key(&mut self) {
        self.end_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_end_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.end_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_end_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.end_key
    }

    // Take field
    pub fn take_end_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.end_key, ::std::vec::Vec::new())
    }

    // .metapb.RegionEpoch region_epoch = 4;


    pub fn get_region_epoch(&self) -> &RegionEpoch {
        self.region_epoch.as_ref().unwrap_or_else(|| RegionEpoch::default_instance())
    }
    pub fn clear_region_epoch(&mut self) {
        self.region_epoch.clear();
    }

    pub fn has_region_epoch(&self) -> bool {
        self.region_epoch.is_some()
    }

    // Param is passed by value, moved
    pub fn set_region_epoch(&mut self, v: RegionEpoch) {
        self.region_epoch = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_region_epoch(&mut self) -> &mut RegionEpoch {
        if self.region_epoch.is_none() {
            self.region_epoch.set_default();
        }
        self.region_epoch.as_mut().unwrap()
    }

    // Take field
    pub fn take_region_epoch(&mut self) -> RegionEpoch {
        self.region_epoch.take().unwrap_or_else(|| RegionEpoch::new())
    }

    // repeated .metapb.Peer peers = 5;


    pub fn get_peers(&self) -> &[Peer] {
        &self.peers
    }
    pub fn clear_peers(&mut self) {
        self.peers.clear();
    }

    // Param is passed by value, moved
    pub fn set_peers(&mut self, v: ::protobuf::RepeatedField<Peer>) {
        self.peers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_peers(&mut self) -> &mut ::protobuf::RepeatedField<Peer> {
        &mut self.peers
    }

    // Take field
    pub fn take_peers(&mut self) -> ::protobuf::RepeatedField<Peer> {
        ::std::mem::replace(&mut self.peers, ::protobuf::RepeatedField::new())
    }

    // .encryptionpb.EncryptionMeta encryption_meta = 6;


    pub fn get_encryption_meta(&self) -> &super::encryptionpb::EncryptionMeta {
        self.encryption_meta.as_ref().unwrap_or_else(|| super::encryptionpb::EncryptionMeta::default_instance())
    }
    pub fn clear_encryption_meta(&mut self) {
        self.encryption_meta.clear();
    }

    pub fn has_encryption_meta(&self) -> bool {
        self.encryption_meta.is_some()
    }

    // Param is passed by value, moved
    pub fn set_encryption_meta(&mut self, v: super::encryptionpb::EncryptionMeta) {
        self.encryption_meta = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_encryption_meta(&mut self) -> &mut super::encryptionpb::EncryptionMeta {
        if self.encryption_meta.is_none() {
            self.encryption_meta.set_default();
        }
        self.encryption_meta.as_mut().unwrap()
    }

    // Take field
    pub fn take_encryption_meta(&mut self) -> super::encryptionpb::EncryptionMeta {
        self.encryption_meta.take().unwrap_or_else(|| super::encryptionpb::EncryptionMeta::new())
    }

    // bool is_in_flashback = 7;


    pub fn get_is_in_flashback(&self) -> bool {
        self.is_in_flashback
    }
    pub fn clear_is_in_flashback(&mut self) {
        self.is_in_flashback = false;
    }

    // Param is passed by value, moved
    pub fn set_is_in_flashback(&mut self, v: bool) {
        self.is_in_flashback = v;
    }
}

impl ::protobuf::Message for Region {
    fn is_initialized(&self) -> bool {
        for v in &self.region_epoch {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.peers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.encryption_meta {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.start_key)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.end_key)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.region_epoch)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.peers)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.encryption_meta)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_in_flashback = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.start_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.start_key);
        }
        if !self.end_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.end_key);
        }
        if let Some(ref v) = self.region_epoch.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.peers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.encryption_meta.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.is_in_flashback != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint64(1, self.id)?;
        }
        if !self.start_key.is_empty() {
            os.write_bytes(2, &self.start_key)?;
        }
        if !self.end_key.is_empty() {
            os.write_bytes(3, &self.end_key)?;
        }
        if let Some(ref v) = self.region_epoch.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.peers {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.encryption_meta.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.is_in_flashback != false {
            os.write_bool(7, self.is_in_flashback)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Region {
        Region::new()
    }

    fn default_instance() -> &'static Region {
        static mut instance: ::protobuf::lazy::Lazy<Region> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Region,
        };
        unsafe {
            instance.get(Region::new)
        }
    }
}

impl ::protobuf::Clear for Region {
    fn clear(&mut self) {
        self.id = 0;
        self.start_key.clear();
        self.end_key.clear();
        self.region_epoch.clear();
        self.peers.clear();
        self.encryption_meta.clear();
        self.is_in_flashback = false;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for Region {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.id, "id", buf);
        ::protobuf::PbPrint::fmt(&self.start_key, "start_key", buf);
        ::protobuf::PbPrint::fmt(&self.end_key, "end_key", buf);
        ::protobuf::PbPrint::fmt(&self.region_epoch, "region_epoch", buf);
        ::protobuf::PbPrint::fmt(&self.peers, "peers", buf);
        ::protobuf::PbPrint::fmt(&self.encryption_meta, "encryption_meta", buf);
        ::protobuf::PbPrint::fmt(&self.is_in_flashback, "is_in_flashback", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for Region {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.id, "id", &mut s);
        ::protobuf::PbPrint::fmt(&self.start_key, "start_key", &mut s);
        ::protobuf::PbPrint::fmt(&self.end_key, "end_key", &mut s);
        ::protobuf::PbPrint::fmt(&self.region_epoch, "region_epoch", &mut s);
        ::protobuf::PbPrint::fmt(&self.peers, "peers", &mut s);
        ::protobuf::PbPrint::fmt(&self.encryption_meta, "encryption_meta", &mut s);
        ::protobuf::PbPrint::fmt(&self.is_in_flashback, "is_in_flashback", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for Region {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Peer {
    // message fields
    pub id: u64,
    pub store_id: u64,
    pub role: PeerRole,
    pub is_witness: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Peer {
    fn default() -> &'a Peer {
        <Peer as ::protobuf::Message>::default_instance()
    }
}

impl Peer {
    pub fn new() -> Peer {
        ::std::default::Default::default()
    }

    // uint64 id = 1;


    pub fn get_id(&self) -> u64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u64) {
        self.id = v;
    }

    // uint64 store_id = 2;


    pub fn get_store_id(&self) -> u64 {
        self.store_id
    }
    pub fn clear_store_id(&mut self) {
        self.store_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_store_id(&mut self, v: u64) {
        self.store_id = v;
    }

    // .metapb.PeerRole role = 3;


    pub fn get_role(&self) -> PeerRole {
        self.role
    }
    pub fn clear_role(&mut self) {
        self.role = PeerRole::Voter;
    }

    // Param is passed by value, moved
    pub fn set_role(&mut self, v: PeerRole) {
        self.role = v;
    }

    // bool is_witness = 4;


    pub fn get_is_witness(&self) -> bool {
        self.is_witness
    }
    pub fn clear_is_witness(&mut self) {
        self.is_witness = false;
    }

    // Param is passed by value, moved
    pub fn set_is_witness(&mut self, v: bool) {
        self.is_witness = v;
    }
}

impl ::protobuf::Message for Peer {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.store_id = tmp;
                },
                3 => {
                    if wire_type == ::protobuf::wire_format::WireTypeVarint {self.role = is.read_enum()?;} else {return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));}
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_witness = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.store_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.store_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.role != PeerRole::Voter {
            my_size += ::protobuf::rt::enum_size(3, self.role);
        }
        if self.is_witness != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint64(1, self.id)?;
        }
        if self.store_id != 0 {
            os.write_uint64(2, self.store_id)?;
        }
        if self.role != PeerRole::Voter {
            os.write_enum(3, self.role.value())?;
        }
        if self.is_witness != false {
            os.write_bool(4, self.is_witness)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Peer {
        Peer::new()
    }

    fn default_instance() -> &'static Peer {
        static mut instance: ::protobuf::lazy::Lazy<Peer> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Peer,
        };
        unsafe {
            instance.get(Peer::new)
        }
    }
}

impl ::protobuf::Clear for Peer {
    fn clear(&mut self) {
        self.id = 0;
        self.store_id = 0;
        self.role = PeerRole::Voter;
        self.is_witness = false;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for Peer {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.id, "id", buf);
        ::protobuf::PbPrint::fmt(&self.store_id, "store_id", buf);
        ::protobuf::PbPrint::fmt(&self.role, "role", buf);
        ::protobuf::PbPrint::fmt(&self.is_witness, "is_witness", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for Peer {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.id, "id", &mut s);
        ::protobuf::PbPrint::fmt(&self.store_id, "store_id", &mut s);
        ::protobuf::PbPrint::fmt(&self.role, "role", &mut s);
        ::protobuf::PbPrint::fmt(&self.is_witness, "is_witness", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for Peer {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum StoreState {
    Up = 0,
    Offline = 1,
    Tombstone = 2,
}

impl ::protobuf::ProtobufEnum for StoreState {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<StoreState> {
        match value {
            0 => ::std::option::Option::Some(StoreState::Up),
            1 => ::std::option::Option::Some(StoreState::Offline),
            2 => ::std::option::Option::Some(StoreState::Tombstone),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [StoreState] = &[
            StoreState::Up,
            StoreState::Offline,
            StoreState::Tombstone,
        ];
        values
    }
}

impl ::std::marker::Copy for StoreState {
}

impl ::protobuf::PbPrint for StoreState {
    fn fmt(&self, name: &str, buf: &mut String) {
        use std::fmt::Write;
        if *self == StoreState::default() {
            return;
        }
        ::protobuf::push_field_start(name, buf);
        write!(buf, "{:?}", self).unwrap();
    }
}

impl ::std::default::Default for StoreState {
    fn default() -> Self {
        StoreState::Up
    }
}

impl ::protobuf::reflect::ProtobufValue for StoreState {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum NodeState {
    Preparing = 0,
    Serving = 1,
    Removing = 2,
    Removed = 3,
}

impl ::protobuf::ProtobufEnum for NodeState {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<NodeState> {
        match value {
            0 => ::std::option::Option::Some(NodeState::Preparing),
            1 => ::std::option::Option::Some(NodeState::Serving),
            2 => ::std::option::Option::Some(NodeState::Removing),
            3 => ::std::option::Option::Some(NodeState::Removed),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [NodeState] = &[
            NodeState::Preparing,
            NodeState::Serving,
            NodeState::Removing,
            NodeState::Removed,
        ];
        values
    }
}

impl ::std::marker::Copy for NodeState {
}

impl ::protobuf::PbPrint for NodeState {
    fn fmt(&self, name: &str, buf: &mut String) {
        use std::fmt::Write;
        if *self == NodeState::default() {
            return;
        }
        ::protobuf::push_field_start(name, buf);
        write!(buf, "{:?}", self).unwrap();
    }
}

impl ::std::default::Default for NodeState {
    fn default() -> Self {
        NodeState::Preparing
    }
}

impl ::protobuf::reflect::ProtobufValue for NodeState {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum PeerRole {
    Voter = 0,
    Learner = 1,
    IncomingVoter = 2,
    DemotingVoter = 3,
}

impl ::protobuf::ProtobufEnum for PeerRole {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<PeerRole> {
        match value {
            0 => ::std::option::Option::Some(PeerRole::Voter),
            1 => ::std::option::Option::Some(PeerRole::Learner),
            2 => ::std::option::Option::Some(PeerRole::IncomingVoter),
            3 => ::std::option::Option::Some(PeerRole::DemotingVoter),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [PeerRole] = &[
            PeerRole::Voter,
            PeerRole::Learner,
            PeerRole::IncomingVoter,
            PeerRole::DemotingVoter,
        ];
        values
    }
}

impl ::std::marker::Copy for PeerRole {
}

impl ::protobuf::PbPrint for PeerRole {
    fn fmt(&self, name: &str, buf: &mut String) {
        use std::fmt::Write;
        if *self == PeerRole::default() {
            return;
        }
        ::protobuf::push_field_start(name, buf);
        write!(buf, "{:?}", self).unwrap();
    }
}

impl ::std::default::Default for PeerRole {
    fn default() -> Self {
        PeerRole::Voter
    }
}

impl ::protobuf::reflect::ProtobufValue for PeerRole {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}
