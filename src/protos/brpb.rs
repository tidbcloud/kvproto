// This file is generated by rust-protobuf 2.8.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `brpb.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_0;

#[derive(PartialEq,Clone,Default)]
pub struct BackupMeta {
    // message fields
    pub cluster_id: u64,
    pub cluster_version: ::std::string::String,
    pub br_version: ::std::string::String,
    pub version: i32,
    pub files: ::protobuf::RepeatedField<File>,
    pub file_index: ::protobuf::SingularPtrField<MetaFile>,
    pub start_version: u64,
    pub end_version: u64,
    pub schemas: ::protobuf::RepeatedField<Schema>,
    pub schema_index: ::protobuf::SingularPtrField<MetaFile>,
    pub is_raw_kv: bool,
    pub raw_ranges: ::protobuf::RepeatedField<RawRange>,
    pub raw_range_index: ::protobuf::SingularPtrField<MetaFile>,
    pub ddls: ::std::vec::Vec<u8>,
    pub ddl_indexes: ::protobuf::SingularPtrField<MetaFile>,
    pub backup_result: ::std::string::String,
    pub api_version: super::kvrpcpb::ApiVersion,
    pub policies: ::protobuf::RepeatedField<PlacementPolicy>,
    pub new_collations_enabled: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BackupMeta {
    fn default() -> &'a BackupMeta {
        <BackupMeta as ::protobuf::Message>::default_instance()
    }
}

impl BackupMeta {
    pub fn new() -> BackupMeta {
        ::std::default::Default::default()
    }

    // uint64 cluster_id = 1;


    pub fn get_cluster_id(&self) -> u64 {
        self.cluster_id
    }
    pub fn clear_cluster_id(&mut self) {
        self.cluster_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_cluster_id(&mut self, v: u64) {
        self.cluster_id = v;
    }

    // string cluster_version = 2;


    pub fn get_cluster_version(&self) -> &str {
        &self.cluster_version
    }
    pub fn clear_cluster_version(&mut self) {
        self.cluster_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_cluster_version(&mut self, v: ::std::string::String) {
        self.cluster_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cluster_version(&mut self) -> &mut ::std::string::String {
        &mut self.cluster_version
    }

    // Take field
    pub fn take_cluster_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cluster_version, ::std::string::String::new())
    }

    // string br_version = 11;


    pub fn get_br_version(&self) -> &str {
        &self.br_version
    }
    pub fn clear_br_version(&mut self) {
        self.br_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_br_version(&mut self, v: ::std::string::String) {
        self.br_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_br_version(&mut self) -> &mut ::std::string::String {
        &mut self.br_version
    }

    // Take field
    pub fn take_br_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.br_version, ::std::string::String::new())
    }

    // int32 version = 12;


    pub fn get_version(&self) -> i32 {
        self.version
    }
    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: i32) {
        self.version = v;
    }

    // repeated .backup.File files = 4;


    pub fn get_files(&self) -> &[File] {
        &self.files
    }
    pub fn clear_files(&mut self) {
        self.files.clear();
    }

    // Param is passed by value, moved
    pub fn set_files(&mut self, v: ::protobuf::RepeatedField<File>) {
        self.files = v;
    }

    // Mutable pointer to the field.
    pub fn mut_files(&mut self) -> &mut ::protobuf::RepeatedField<File> {
        &mut self.files
    }

    // Take field
    pub fn take_files(&mut self) -> ::protobuf::RepeatedField<File> {
        ::std::mem::replace(&mut self.files, ::protobuf::RepeatedField::new())
    }

    // .backup.MetaFile file_index = 13;


    pub fn get_file_index(&self) -> &MetaFile {
        self.file_index.as_ref().unwrap_or_else(|| MetaFile::default_instance())
    }
    pub fn clear_file_index(&mut self) {
        self.file_index.clear();
    }

    pub fn has_file_index(&self) -> bool {
        self.file_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_index(&mut self, v: MetaFile) {
        self.file_index = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file_index(&mut self) -> &mut MetaFile {
        if self.file_index.is_none() {
            self.file_index.set_default();
        }
        self.file_index.as_mut().unwrap()
    }

    // Take field
    pub fn take_file_index(&mut self) -> MetaFile {
        self.file_index.take().unwrap_or_else(|| MetaFile::new())
    }

    // uint64 start_version = 5;


    pub fn get_start_version(&self) -> u64 {
        self.start_version
    }
    pub fn clear_start_version(&mut self) {
        self.start_version = 0;
    }

    // Param is passed by value, moved
    pub fn set_start_version(&mut self, v: u64) {
        self.start_version = v;
    }

    // uint64 end_version = 6;


    pub fn get_end_version(&self) -> u64 {
        self.end_version
    }
    pub fn clear_end_version(&mut self) {
        self.end_version = 0;
    }

    // Param is passed by value, moved
    pub fn set_end_version(&mut self, v: u64) {
        self.end_version = v;
    }

    // repeated .backup.Schema schemas = 7;


    pub fn get_schemas(&self) -> &[Schema] {
        &self.schemas
    }
    pub fn clear_schemas(&mut self) {
        self.schemas.clear();
    }

    // Param is passed by value, moved
    pub fn set_schemas(&mut self, v: ::protobuf::RepeatedField<Schema>) {
        self.schemas = v;
    }

    // Mutable pointer to the field.
    pub fn mut_schemas(&mut self) -> &mut ::protobuf::RepeatedField<Schema> {
        &mut self.schemas
    }

    // Take field
    pub fn take_schemas(&mut self) -> ::protobuf::RepeatedField<Schema> {
        ::std::mem::replace(&mut self.schemas, ::protobuf::RepeatedField::new())
    }

    // .backup.MetaFile schema_index = 14;


    pub fn get_schema_index(&self) -> &MetaFile {
        self.schema_index.as_ref().unwrap_or_else(|| MetaFile::default_instance())
    }
    pub fn clear_schema_index(&mut self) {
        self.schema_index.clear();
    }

    pub fn has_schema_index(&self) -> bool {
        self.schema_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_schema_index(&mut self, v: MetaFile) {
        self.schema_index = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schema_index(&mut self) -> &mut MetaFile {
        if self.schema_index.is_none() {
            self.schema_index.set_default();
        }
        self.schema_index.as_mut().unwrap()
    }

    // Take field
    pub fn take_schema_index(&mut self) -> MetaFile {
        self.schema_index.take().unwrap_or_else(|| MetaFile::new())
    }

    // bool is_raw_kv = 8;


    pub fn get_is_raw_kv(&self) -> bool {
        self.is_raw_kv
    }
    pub fn clear_is_raw_kv(&mut self) {
        self.is_raw_kv = false;
    }

    // Param is passed by value, moved
    pub fn set_is_raw_kv(&mut self, v: bool) {
        self.is_raw_kv = v;
    }

    // repeated .backup.RawRange raw_ranges = 9;


    pub fn get_raw_ranges(&self) -> &[RawRange] {
        &self.raw_ranges
    }
    pub fn clear_raw_ranges(&mut self) {
        self.raw_ranges.clear();
    }

    // Param is passed by value, moved
    pub fn set_raw_ranges(&mut self, v: ::protobuf::RepeatedField<RawRange>) {
        self.raw_ranges = v;
    }

    // Mutable pointer to the field.
    pub fn mut_raw_ranges(&mut self) -> &mut ::protobuf::RepeatedField<RawRange> {
        &mut self.raw_ranges
    }

    // Take field
    pub fn take_raw_ranges(&mut self) -> ::protobuf::RepeatedField<RawRange> {
        ::std::mem::replace(&mut self.raw_ranges, ::protobuf::RepeatedField::new())
    }

    // .backup.MetaFile raw_range_index = 15;


    pub fn get_raw_range_index(&self) -> &MetaFile {
        self.raw_range_index.as_ref().unwrap_or_else(|| MetaFile::default_instance())
    }
    pub fn clear_raw_range_index(&mut self) {
        self.raw_range_index.clear();
    }

    pub fn has_raw_range_index(&self) -> bool {
        self.raw_range_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_raw_range_index(&mut self, v: MetaFile) {
        self.raw_range_index = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_raw_range_index(&mut self) -> &mut MetaFile {
        if self.raw_range_index.is_none() {
            self.raw_range_index.set_default();
        }
        self.raw_range_index.as_mut().unwrap()
    }

    // Take field
    pub fn take_raw_range_index(&mut self) -> MetaFile {
        self.raw_range_index.take().unwrap_or_else(|| MetaFile::new())
    }

    // bytes ddls = 10;


    pub fn get_ddls(&self) -> &[u8] {
        &self.ddls
    }
    pub fn clear_ddls(&mut self) {
        self.ddls.clear();
    }

    // Param is passed by value, moved
    pub fn set_ddls(&mut self, v: ::std::vec::Vec<u8>) {
        self.ddls = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ddls(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.ddls
    }

    // Take field
    pub fn take_ddls(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.ddls, ::std::vec::Vec::new())
    }

    // .backup.MetaFile ddl_indexes = 16;


    pub fn get_ddl_indexes(&self) -> &MetaFile {
        self.ddl_indexes.as_ref().unwrap_or_else(|| MetaFile::default_instance())
    }
    pub fn clear_ddl_indexes(&mut self) {
        self.ddl_indexes.clear();
    }

    pub fn has_ddl_indexes(&self) -> bool {
        self.ddl_indexes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ddl_indexes(&mut self, v: MetaFile) {
        self.ddl_indexes = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ddl_indexes(&mut self) -> &mut MetaFile {
        if self.ddl_indexes.is_none() {
            self.ddl_indexes.set_default();
        }
        self.ddl_indexes.as_mut().unwrap()
    }

    // Take field
    pub fn take_ddl_indexes(&mut self) -> MetaFile {
        self.ddl_indexes.take().unwrap_or_else(|| MetaFile::new())
    }

    // string backup_result = 17;


    pub fn get_backup_result(&self) -> &str {
        &self.backup_result
    }
    pub fn clear_backup_result(&mut self) {
        self.backup_result.clear();
    }

    // Param is passed by value, moved
    pub fn set_backup_result(&mut self, v: ::std::string::String) {
        self.backup_result = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_backup_result(&mut self) -> &mut ::std::string::String {
        &mut self.backup_result
    }

    // Take field
    pub fn take_backup_result(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.backup_result, ::std::string::String::new())
    }

    // .kvrpcpb.APIVersion api_version = 18;


    pub fn get_api_version(&self) -> super::kvrpcpb::ApiVersion {
        self.api_version
    }
    pub fn clear_api_version(&mut self) {
        self.api_version = super::kvrpcpb::ApiVersion::V1;
    }

    // Param is passed by value, moved
    pub fn set_api_version(&mut self, v: super::kvrpcpb::ApiVersion) {
        self.api_version = v;
    }

    // repeated .backup.PlacementPolicy policies = 19;


    pub fn get_policies(&self) -> &[PlacementPolicy] {
        &self.policies
    }
    pub fn clear_policies(&mut self) {
        self.policies.clear();
    }

    // Param is passed by value, moved
    pub fn set_policies(&mut self, v: ::protobuf::RepeatedField<PlacementPolicy>) {
        self.policies = v;
    }

    // Mutable pointer to the field.
    pub fn mut_policies(&mut self) -> &mut ::protobuf::RepeatedField<PlacementPolicy> {
        &mut self.policies
    }

    // Take field
    pub fn take_policies(&mut self) -> ::protobuf::RepeatedField<PlacementPolicy> {
        ::std::mem::replace(&mut self.policies, ::protobuf::RepeatedField::new())
    }

    // string new_collations_enabled = 20;


    pub fn get_new_collations_enabled(&self) -> &str {
        &self.new_collations_enabled
    }
    pub fn clear_new_collations_enabled(&mut self) {
        self.new_collations_enabled.clear();
    }

    // Param is passed by value, moved
    pub fn set_new_collations_enabled(&mut self, v: ::std::string::String) {
        self.new_collations_enabled = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_new_collations_enabled(&mut self) -> &mut ::std::string::String {
        &mut self.new_collations_enabled
    }

    // Take field
    pub fn take_new_collations_enabled(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.new_collations_enabled, ::std::string::String::new())
    }
}

impl ::protobuf::Message for BackupMeta {
    fn is_initialized(&self) -> bool {
        for v in &self.files {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.file_index {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.schemas {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.schema_index {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.raw_ranges {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.raw_range_index {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ddl_indexes {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.policies {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.cluster_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cluster_version)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.br_version)?;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.version = tmp;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.files)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.file_index)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.start_version = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.end_version = tmp;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.schemas)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.schema_index)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_raw_kv = tmp;
                },
                9 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.raw_ranges)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.raw_range_index)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.ddls)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ddl_indexes)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.backup_result)?;
                },
                18 => {
                    if wire_type == ::protobuf::wire_format::WireTypeVarint {self.api_version = is.read_enum()?;} else {return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));}
                },
                19 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.policies)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.new_collations_enabled)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.cluster_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.cluster_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.cluster_version.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.cluster_version);
        }
        if !self.br_version.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.br_version);
        }
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(12, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.files {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.file_index.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.start_version != 0 {
            my_size += ::protobuf::rt::value_size(5, self.start_version, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.end_version != 0 {
            my_size += ::protobuf::rt::value_size(6, self.end_version, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.schemas {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.schema_index.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.is_raw_kv != false {
            my_size += 2;
        }
        for value in &self.raw_ranges {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.raw_range_index.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.ddls.is_empty() {
            my_size += ::protobuf::rt::bytes_size(10, &self.ddls);
        }
        if let Some(ref v) = self.ddl_indexes.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.backup_result.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.backup_result);
        }
        if self.api_version != super::kvrpcpb::ApiVersion::V1 {
            my_size += ::protobuf::rt::enum_size(18, self.api_version);
        }
        for value in &self.policies {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.new_collations_enabled.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.new_collations_enabled);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.cluster_id != 0 {
            os.write_uint64(1, self.cluster_id)?;
        }
        if !self.cluster_version.is_empty() {
            os.write_string(2, &self.cluster_version)?;
        }
        if !self.br_version.is_empty() {
            os.write_string(11, &self.br_version)?;
        }
        if self.version != 0 {
            os.write_int32(12, self.version)?;
        }
        for v in &self.files {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.file_index.as_ref() {
            os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.start_version != 0 {
            os.write_uint64(5, self.start_version)?;
        }
        if self.end_version != 0 {
            os.write_uint64(6, self.end_version)?;
        }
        for v in &self.schemas {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.schema_index.as_ref() {
            os.write_tag(14, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.is_raw_kv != false {
            os.write_bool(8, self.is_raw_kv)?;
        }
        for v in &self.raw_ranges {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.raw_range_index.as_ref() {
            os.write_tag(15, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.ddls.is_empty() {
            os.write_bytes(10, &self.ddls)?;
        }
        if let Some(ref v) = self.ddl_indexes.as_ref() {
            os.write_tag(16, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.backup_result.is_empty() {
            os.write_string(17, &self.backup_result)?;
        }
        if self.api_version != super::kvrpcpb::ApiVersion::V1 {
            os.write_enum(18, self.api_version.value())?;
        }
        for v in &self.policies {
            os.write_tag(19, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.new_collations_enabled.is_empty() {
            os.write_string(20, &self.new_collations_enabled)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BackupMeta {
        BackupMeta::new()
    }

    fn default_instance() -> &'static BackupMeta {
        static mut instance: ::protobuf::lazy::Lazy<BackupMeta> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BackupMeta,
        };
        unsafe {
            instance.get(BackupMeta::new)
        }
    }
}

impl ::protobuf::Clear for BackupMeta {
    fn clear(&mut self) {
        self.cluster_id = 0;
        self.cluster_version.clear();
        self.br_version.clear();
        self.version = 0;
        self.files.clear();
        self.file_index.clear();
        self.start_version = 0;
        self.end_version = 0;
        self.schemas.clear();
        self.schema_index.clear();
        self.is_raw_kv = false;
        self.raw_ranges.clear();
        self.raw_range_index.clear();
        self.ddls.clear();
        self.ddl_indexes.clear();
        self.backup_result.clear();
        self.api_version = super::kvrpcpb::ApiVersion::V1;
        self.policies.clear();
        self.new_collations_enabled.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for BackupMeta {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.cluster_id, "cluster_id", buf);
        ::protobuf::PbPrint::fmt(&self.cluster_version, "cluster_version", buf);
        ::protobuf::PbPrint::fmt(&self.br_version, "br_version", buf);
        ::protobuf::PbPrint::fmt(&self.version, "version", buf);
        ::protobuf::PbPrint::fmt(&self.files, "files", buf);
        ::protobuf::PbPrint::fmt(&self.file_index, "file_index", buf);
        ::protobuf::PbPrint::fmt(&self.start_version, "start_version", buf);
        ::protobuf::PbPrint::fmt(&self.end_version, "end_version", buf);
        ::protobuf::PbPrint::fmt(&self.schemas, "schemas", buf);
        ::protobuf::PbPrint::fmt(&self.schema_index, "schema_index", buf);
        ::protobuf::PbPrint::fmt(&self.is_raw_kv, "is_raw_kv", buf);
        ::protobuf::PbPrint::fmt(&self.raw_ranges, "raw_ranges", buf);
        ::protobuf::PbPrint::fmt(&self.raw_range_index, "raw_range_index", buf);
        ::protobuf::PbPrint::fmt(&self.ddls, "ddls", buf);
        ::protobuf::PbPrint::fmt(&self.ddl_indexes, "ddl_indexes", buf);
        ::protobuf::PbPrint::fmt(&self.backup_result, "backup_result", buf);
        ::protobuf::PbPrint::fmt(&self.api_version, "api_version", buf);
        ::protobuf::PbPrint::fmt(&self.policies, "policies", buf);
        ::protobuf::PbPrint::fmt(&self.new_collations_enabled, "new_collations_enabled", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for BackupMeta {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.cluster_id, "cluster_id", &mut s);
        ::protobuf::PbPrint::fmt(&self.cluster_version, "cluster_version", &mut s);
        ::protobuf::PbPrint::fmt(&self.br_version, "br_version", &mut s);
        ::protobuf::PbPrint::fmt(&self.version, "version", &mut s);
        ::protobuf::PbPrint::fmt(&self.files, "files", &mut s);
        ::protobuf::PbPrint::fmt(&self.file_index, "file_index", &mut s);
        ::protobuf::PbPrint::fmt(&self.start_version, "start_version", &mut s);
        ::protobuf::PbPrint::fmt(&self.end_version, "end_version", &mut s);
        ::protobuf::PbPrint::fmt(&self.schemas, "schemas", &mut s);
        ::protobuf::PbPrint::fmt(&self.schema_index, "schema_index", &mut s);
        ::protobuf::PbPrint::fmt(&self.is_raw_kv, "is_raw_kv", &mut s);
        ::protobuf::PbPrint::fmt(&self.raw_ranges, "raw_ranges", &mut s);
        ::protobuf::PbPrint::fmt(&self.raw_range_index, "raw_range_index", &mut s);
        ::protobuf::PbPrint::fmt(&self.ddls, "ddls", &mut s);
        ::protobuf::PbPrint::fmt(&self.ddl_indexes, "ddl_indexes", &mut s);
        ::protobuf::PbPrint::fmt(&self.backup_result, "backup_result", &mut s);
        ::protobuf::PbPrint::fmt(&self.api_version, "api_version", &mut s);
        ::protobuf::PbPrint::fmt(&self.policies, "policies", &mut s);
        ::protobuf::PbPrint::fmt(&self.new_collations_enabled, "new_collations_enabled", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for BackupMeta {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct File {
    // message fields
    pub name: ::std::string::String,
    pub sha256: ::std::vec::Vec<u8>,
    pub start_key: ::std::vec::Vec<u8>,
    pub end_key: ::std::vec::Vec<u8>,
    pub start_version: u64,
    pub end_version: u64,
    pub crc64xor: u64,
    pub total_kvs: u64,
    pub total_bytes: u64,
    pub cf: ::std::string::String,
    pub size: u64,
    pub cipher_iv: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a File {
    fn default() -> &'a File {
        <File as ::protobuf::Message>::default_instance()
    }
}

impl File {
    pub fn new() -> File {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // bytes sha256 = 2;


    pub fn get_sha256(&self) -> &[u8] {
        &self.sha256
    }
    pub fn clear_sha256(&mut self) {
        self.sha256.clear();
    }

    // Param is passed by value, moved
    pub fn set_sha256(&mut self, v: ::std::vec::Vec<u8>) {
        self.sha256 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sha256(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.sha256
    }

    // Take field
    pub fn take_sha256(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.sha256, ::std::vec::Vec::new())
    }

    // bytes start_key = 3;


    pub fn get_start_key(&self) -> &[u8] {
        &self.start_key
    }
    pub fn clear_start_key(&mut self) {
        self.start_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_start_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.start_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.start_key
    }

    // Take field
    pub fn take_start_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.start_key, ::std::vec::Vec::new())
    }

    // bytes end_key = 4;


    pub fn get_end_key(&self) -> &[u8] {
        &self.end_key
    }
    pub fn clear_end_key(&mut self) {
        self.end_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_end_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.end_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_end_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.end_key
    }

    // Take field
    pub fn take_end_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.end_key, ::std::vec::Vec::new())
    }

    // uint64 start_version = 5;


    pub fn get_start_version(&self) -> u64 {
        self.start_version
    }
    pub fn clear_start_version(&mut self) {
        self.start_version = 0;
    }

    // Param is passed by value, moved
    pub fn set_start_version(&mut self, v: u64) {
        self.start_version = v;
    }

    // uint64 end_version = 6;


    pub fn get_end_version(&self) -> u64 {
        self.end_version
    }
    pub fn clear_end_version(&mut self) {
        self.end_version = 0;
    }

    // Param is passed by value, moved
    pub fn set_end_version(&mut self, v: u64) {
        self.end_version = v;
    }

    // uint64 crc64xor = 7;


    pub fn get_crc64xor(&self) -> u64 {
        self.crc64xor
    }
    pub fn clear_crc64xor(&mut self) {
        self.crc64xor = 0;
    }

    // Param is passed by value, moved
    pub fn set_crc64xor(&mut self, v: u64) {
        self.crc64xor = v;
    }

    // uint64 total_kvs = 8;


    pub fn get_total_kvs(&self) -> u64 {
        self.total_kvs
    }
    pub fn clear_total_kvs(&mut self) {
        self.total_kvs = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_kvs(&mut self, v: u64) {
        self.total_kvs = v;
    }

    // uint64 total_bytes = 9;


    pub fn get_total_bytes(&self) -> u64 {
        self.total_bytes
    }
    pub fn clear_total_bytes(&mut self) {
        self.total_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_bytes(&mut self, v: u64) {
        self.total_bytes = v;
    }

    // string cf = 10;


    pub fn get_cf(&self) -> &str {
        &self.cf
    }
    pub fn clear_cf(&mut self) {
        self.cf.clear();
    }

    // Param is passed by value, moved
    pub fn set_cf(&mut self, v: ::std::string::String) {
        self.cf = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cf(&mut self) -> &mut ::std::string::String {
        &mut self.cf
    }

    // Take field
    pub fn take_cf(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cf, ::std::string::String::new())
    }

    // uint64 size = 11;


    pub fn get_size(&self) -> u64 {
        self.size
    }
    pub fn clear_size(&mut self) {
        self.size = 0;
    }

    // Param is passed by value, moved
    pub fn set_size(&mut self, v: u64) {
        self.size = v;
    }

    // bytes cipher_iv = 12;


    pub fn get_cipher_iv(&self) -> &[u8] {
        &self.cipher_iv
    }
    pub fn clear_cipher_iv(&mut self) {
        self.cipher_iv.clear();
    }

    // Param is passed by value, moved
    pub fn set_cipher_iv(&mut self, v: ::std::vec::Vec<u8>) {
        self.cipher_iv = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cipher_iv(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.cipher_iv
    }

    // Take field
    pub fn take_cipher_iv(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.cipher_iv, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for File {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.sha256)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.start_key)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.end_key)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.start_version = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.end_version = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.crc64xor = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.total_kvs = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.total_bytes = tmp;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cf)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.size = tmp;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.cipher_iv)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.sha256.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.sha256);
        }
        if !self.start_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.start_key);
        }
        if !self.end_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.end_key);
        }
        if self.start_version != 0 {
            my_size += ::protobuf::rt::value_size(5, self.start_version, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.end_version != 0 {
            my_size += ::protobuf::rt::value_size(6, self.end_version, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.crc64xor != 0 {
            my_size += ::protobuf::rt::value_size(7, self.crc64xor, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.total_kvs != 0 {
            my_size += ::protobuf::rt::value_size(8, self.total_kvs, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.total_bytes != 0 {
            my_size += ::protobuf::rt::value_size(9, self.total_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.cf.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.cf);
        }
        if self.size != 0 {
            my_size += ::protobuf::rt::value_size(11, self.size, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.cipher_iv.is_empty() {
            my_size += ::protobuf::rt::bytes_size(12, &self.cipher_iv);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.sha256.is_empty() {
            os.write_bytes(2, &self.sha256)?;
        }
        if !self.start_key.is_empty() {
            os.write_bytes(3, &self.start_key)?;
        }
        if !self.end_key.is_empty() {
            os.write_bytes(4, &self.end_key)?;
        }
        if self.start_version != 0 {
            os.write_uint64(5, self.start_version)?;
        }
        if self.end_version != 0 {
            os.write_uint64(6, self.end_version)?;
        }
        if self.crc64xor != 0 {
            os.write_uint64(7, self.crc64xor)?;
        }
        if self.total_kvs != 0 {
            os.write_uint64(8, self.total_kvs)?;
        }
        if self.total_bytes != 0 {
            os.write_uint64(9, self.total_bytes)?;
        }
        if !self.cf.is_empty() {
            os.write_string(10, &self.cf)?;
        }
        if self.size != 0 {
            os.write_uint64(11, self.size)?;
        }
        if !self.cipher_iv.is_empty() {
            os.write_bytes(12, &self.cipher_iv)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> File {
        File::new()
    }

    fn default_instance() -> &'static File {
        static mut instance: ::protobuf::lazy::Lazy<File> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const File,
        };
        unsafe {
            instance.get(File::new)
        }
    }
}

impl ::protobuf::Clear for File {
    fn clear(&mut self) {
        self.name.clear();
        self.sha256.clear();
        self.start_key.clear();
        self.end_key.clear();
        self.start_version = 0;
        self.end_version = 0;
        self.crc64xor = 0;
        self.total_kvs = 0;
        self.total_bytes = 0;
        self.cf.clear();
        self.size = 0;
        self.cipher_iv.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for File {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.name, "name", buf);
        ::protobuf::PbPrint::fmt(&self.sha256, "sha256", buf);
        ::protobuf::PbPrint::fmt(&self.start_key, "start_key", buf);
        ::protobuf::PbPrint::fmt(&self.end_key, "end_key", buf);
        ::protobuf::PbPrint::fmt(&self.start_version, "start_version", buf);
        ::protobuf::PbPrint::fmt(&self.end_version, "end_version", buf);
        ::protobuf::PbPrint::fmt(&self.crc64xor, "crc64xor", buf);
        ::protobuf::PbPrint::fmt(&self.total_kvs, "total_kvs", buf);
        ::protobuf::PbPrint::fmt(&self.total_bytes, "total_bytes", buf);
        ::protobuf::PbPrint::fmt(&self.cf, "cf", buf);
        ::protobuf::PbPrint::fmt(&self.size, "size", buf);
        ::protobuf::PbPrint::fmt(&self.cipher_iv, "cipher_iv", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for File {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.name, "name", &mut s);
        ::protobuf::PbPrint::fmt(&self.sha256, "sha256", &mut s);
        ::protobuf::PbPrint::fmt(&self.start_key, "start_key", &mut s);
        ::protobuf::PbPrint::fmt(&self.end_key, "end_key", &mut s);
        ::protobuf::PbPrint::fmt(&self.start_version, "start_version", &mut s);
        ::protobuf::PbPrint::fmt(&self.end_version, "end_version", &mut s);
        ::protobuf::PbPrint::fmt(&self.crc64xor, "crc64xor", &mut s);
        ::protobuf::PbPrint::fmt(&self.total_kvs, "total_kvs", &mut s);
        ::protobuf::PbPrint::fmt(&self.total_bytes, "total_bytes", &mut s);
        ::protobuf::PbPrint::fmt(&self.cf, "cf", &mut s);
        ::protobuf::PbPrint::fmt(&self.size, "size", &mut s);
        ::protobuf::PbPrint::fmt(&self.cipher_iv, "cipher_iv", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for File {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MetaFile {
    // message fields
    pub meta_files: ::protobuf::RepeatedField<File>,
    pub data_files: ::protobuf::RepeatedField<File>,
    pub schemas: ::protobuf::RepeatedField<Schema>,
    pub raw_ranges: ::protobuf::RepeatedField<RawRange>,
    pub ddls: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MetaFile {
    fn default() -> &'a MetaFile {
        <MetaFile as ::protobuf::Message>::default_instance()
    }
}

impl MetaFile {
    pub fn new() -> MetaFile {
        ::std::default::Default::default()
    }

    // repeated .backup.File meta_files = 1;


    pub fn get_meta_files(&self) -> &[File] {
        &self.meta_files
    }
    pub fn clear_meta_files(&mut self) {
        self.meta_files.clear();
    }

    // Param is passed by value, moved
    pub fn set_meta_files(&mut self, v: ::protobuf::RepeatedField<File>) {
        self.meta_files = v;
    }

    // Mutable pointer to the field.
    pub fn mut_meta_files(&mut self) -> &mut ::protobuf::RepeatedField<File> {
        &mut self.meta_files
    }

    // Take field
    pub fn take_meta_files(&mut self) -> ::protobuf::RepeatedField<File> {
        ::std::mem::replace(&mut self.meta_files, ::protobuf::RepeatedField::new())
    }

    // repeated .backup.File data_files = 2;


    pub fn get_data_files(&self) -> &[File] {
        &self.data_files
    }
    pub fn clear_data_files(&mut self) {
        self.data_files.clear();
    }

    // Param is passed by value, moved
    pub fn set_data_files(&mut self, v: ::protobuf::RepeatedField<File>) {
        self.data_files = v;
    }

    // Mutable pointer to the field.
    pub fn mut_data_files(&mut self) -> &mut ::protobuf::RepeatedField<File> {
        &mut self.data_files
    }

    // Take field
    pub fn take_data_files(&mut self) -> ::protobuf::RepeatedField<File> {
        ::std::mem::replace(&mut self.data_files, ::protobuf::RepeatedField::new())
    }

    // repeated .backup.Schema schemas = 3;


    pub fn get_schemas(&self) -> &[Schema] {
        &self.schemas
    }
    pub fn clear_schemas(&mut self) {
        self.schemas.clear();
    }

    // Param is passed by value, moved
    pub fn set_schemas(&mut self, v: ::protobuf::RepeatedField<Schema>) {
        self.schemas = v;
    }

    // Mutable pointer to the field.
    pub fn mut_schemas(&mut self) -> &mut ::protobuf::RepeatedField<Schema> {
        &mut self.schemas
    }

    // Take field
    pub fn take_schemas(&mut self) -> ::protobuf::RepeatedField<Schema> {
        ::std::mem::replace(&mut self.schemas, ::protobuf::RepeatedField::new())
    }

    // repeated .backup.RawRange raw_ranges = 4;


    pub fn get_raw_ranges(&self) -> &[RawRange] {
        &self.raw_ranges
    }
    pub fn clear_raw_ranges(&mut self) {
        self.raw_ranges.clear();
    }

    // Param is passed by value, moved
    pub fn set_raw_ranges(&mut self, v: ::protobuf::RepeatedField<RawRange>) {
        self.raw_ranges = v;
    }

    // Mutable pointer to the field.
    pub fn mut_raw_ranges(&mut self) -> &mut ::protobuf::RepeatedField<RawRange> {
        &mut self.raw_ranges
    }

    // Take field
    pub fn take_raw_ranges(&mut self) -> ::protobuf::RepeatedField<RawRange> {
        ::std::mem::replace(&mut self.raw_ranges, ::protobuf::RepeatedField::new())
    }

    // repeated bytes ddls = 5;


    pub fn get_ddls(&self) -> &[::std::vec::Vec<u8>] {
        &self.ddls
    }
    pub fn clear_ddls(&mut self) {
        self.ddls.clear();
    }

    // Param is passed by value, moved
    pub fn set_ddls(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.ddls = v;
    }

    // Mutable pointer to the field.
    pub fn mut_ddls(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.ddls
    }

    // Take field
    pub fn take_ddls(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.ddls, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MetaFile {
    fn is_initialized(&self) -> bool {
        for v in &self.meta_files {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.data_files {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.schemas {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.raw_ranges {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.meta_files)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.data_files)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.schemas)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.raw_ranges)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.ddls)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.meta_files {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.data_files {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.schemas {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.raw_ranges {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.ddls {
            my_size += ::protobuf::rt::bytes_size(5, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.meta_files {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.data_files {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.schemas {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.raw_ranges {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.ddls {
            os.write_bytes(5, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MetaFile {
        MetaFile::new()
    }

    fn default_instance() -> &'static MetaFile {
        static mut instance: ::protobuf::lazy::Lazy<MetaFile> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MetaFile,
        };
        unsafe {
            instance.get(MetaFile::new)
        }
    }
}

impl ::protobuf::Clear for MetaFile {
    fn clear(&mut self) {
        self.meta_files.clear();
        self.data_files.clear();
        self.schemas.clear();
        self.raw_ranges.clear();
        self.ddls.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for MetaFile {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.meta_files, "meta_files", buf);
        ::protobuf::PbPrint::fmt(&self.data_files, "data_files", buf);
        ::protobuf::PbPrint::fmt(&self.schemas, "schemas", buf);
        ::protobuf::PbPrint::fmt(&self.raw_ranges, "raw_ranges", buf);
        ::protobuf::PbPrint::fmt(&self.ddls, "ddls", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for MetaFile {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.meta_files, "meta_files", &mut s);
        ::protobuf::PbPrint::fmt(&self.data_files, "data_files", &mut s);
        ::protobuf::PbPrint::fmt(&self.schemas, "schemas", &mut s);
        ::protobuf::PbPrint::fmt(&self.raw_ranges, "raw_ranges", &mut s);
        ::protobuf::PbPrint::fmt(&self.ddls, "ddls", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetaFile {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PlacementPolicy {
    // message fields
    pub info: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PlacementPolicy {
    fn default() -> &'a PlacementPolicy {
        <PlacementPolicy as ::protobuf::Message>::default_instance()
    }
}

impl PlacementPolicy {
    pub fn new() -> PlacementPolicy {
        ::std::default::Default::default()
    }

    // bytes info = 1;


    pub fn get_info(&self) -> &[u8] {
        &self.info
    }
    pub fn clear_info(&mut self) {
        self.info.clear();
    }

    // Param is passed by value, moved
    pub fn set_info(&mut self, v: ::std::vec::Vec<u8>) {
        self.info = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_info(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.info
    }

    // Take field
    pub fn take_info(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.info, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for PlacementPolicy {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.info)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.info.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.info);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.info.is_empty() {
            os.write_bytes(1, &self.info)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PlacementPolicy {
        PlacementPolicy::new()
    }

    fn default_instance() -> &'static PlacementPolicy {
        static mut instance: ::protobuf::lazy::Lazy<PlacementPolicy> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PlacementPolicy,
        };
        unsafe {
            instance.get(PlacementPolicy::new)
        }
    }
}

impl ::protobuf::Clear for PlacementPolicy {
    fn clear(&mut self) {
        self.info.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for PlacementPolicy {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.info, "info", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for PlacementPolicy {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.info, "info", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlacementPolicy {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Schema {
    // message fields
    pub db: ::std::vec::Vec<u8>,
    pub table: ::std::vec::Vec<u8>,
    pub crc64xor: u64,
    pub total_kvs: u64,
    pub total_bytes: u64,
    pub tiflash_replicas: u32,
    pub stats: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Schema {
    fn default() -> &'a Schema {
        <Schema as ::protobuf::Message>::default_instance()
    }
}

impl Schema {
    pub fn new() -> Schema {
        ::std::default::Default::default()
    }

    // bytes db = 1;


    pub fn get_db(&self) -> &[u8] {
        &self.db
    }
    pub fn clear_db(&mut self) {
        self.db.clear();
    }

    // Param is passed by value, moved
    pub fn set_db(&mut self, v: ::std::vec::Vec<u8>) {
        self.db = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_db(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.db
    }

    // Take field
    pub fn take_db(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.db, ::std::vec::Vec::new())
    }

    // bytes table = 2;


    pub fn get_table(&self) -> &[u8] {
        &self.table
    }
    pub fn clear_table(&mut self) {
        self.table.clear();
    }

    // Param is passed by value, moved
    pub fn set_table(&mut self, v: ::std::vec::Vec<u8>) {
        self.table = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_table(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.table
    }

    // Take field
    pub fn take_table(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.table, ::std::vec::Vec::new())
    }

    // uint64 crc64xor = 3;


    pub fn get_crc64xor(&self) -> u64 {
        self.crc64xor
    }
    pub fn clear_crc64xor(&mut self) {
        self.crc64xor = 0;
    }

    // Param is passed by value, moved
    pub fn set_crc64xor(&mut self, v: u64) {
        self.crc64xor = v;
    }

    // uint64 total_kvs = 4;


    pub fn get_total_kvs(&self) -> u64 {
        self.total_kvs
    }
    pub fn clear_total_kvs(&mut self) {
        self.total_kvs = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_kvs(&mut self, v: u64) {
        self.total_kvs = v;
    }

    // uint64 total_bytes = 5;


    pub fn get_total_bytes(&self) -> u64 {
        self.total_bytes
    }
    pub fn clear_total_bytes(&mut self) {
        self.total_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_bytes(&mut self, v: u64) {
        self.total_bytes = v;
    }

    // uint32 tiflash_replicas = 6;


    pub fn get_tiflash_replicas(&self) -> u32 {
        self.tiflash_replicas
    }
    pub fn clear_tiflash_replicas(&mut self) {
        self.tiflash_replicas = 0;
    }

    // Param is passed by value, moved
    pub fn set_tiflash_replicas(&mut self, v: u32) {
        self.tiflash_replicas = v;
    }

    // bytes stats = 7;


    pub fn get_stats(&self) -> &[u8] {
        &self.stats
    }
    pub fn clear_stats(&mut self) {
        self.stats.clear();
    }

    // Param is passed by value, moved
    pub fn set_stats(&mut self, v: ::std::vec::Vec<u8>) {
        self.stats = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stats(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.stats
    }

    // Take field
    pub fn take_stats(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.stats, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Schema {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.db)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.table)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.crc64xor = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.total_kvs = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.total_bytes = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.tiflash_replicas = tmp;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.stats)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.db.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.db);
        }
        if !self.table.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.table);
        }
        if self.crc64xor != 0 {
            my_size += ::protobuf::rt::value_size(3, self.crc64xor, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.total_kvs != 0 {
            my_size += ::protobuf::rt::value_size(4, self.total_kvs, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.total_bytes != 0 {
            my_size += ::protobuf::rt::value_size(5, self.total_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tiflash_replicas != 0 {
            my_size += ::protobuf::rt::value_size(6, self.tiflash_replicas, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.stats.is_empty() {
            my_size += ::protobuf::rt::bytes_size(7, &self.stats);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.db.is_empty() {
            os.write_bytes(1, &self.db)?;
        }
        if !self.table.is_empty() {
            os.write_bytes(2, &self.table)?;
        }
        if self.crc64xor != 0 {
            os.write_uint64(3, self.crc64xor)?;
        }
        if self.total_kvs != 0 {
            os.write_uint64(4, self.total_kvs)?;
        }
        if self.total_bytes != 0 {
            os.write_uint64(5, self.total_bytes)?;
        }
        if self.tiflash_replicas != 0 {
            os.write_uint32(6, self.tiflash_replicas)?;
        }
        if !self.stats.is_empty() {
            os.write_bytes(7, &self.stats)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Schema {
        Schema::new()
    }

    fn default_instance() -> &'static Schema {
        static mut instance: ::protobuf::lazy::Lazy<Schema> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Schema,
        };
        unsafe {
            instance.get(Schema::new)
        }
    }
}

impl ::protobuf::Clear for Schema {
    fn clear(&mut self) {
        self.db.clear();
        self.table.clear();
        self.crc64xor = 0;
        self.total_kvs = 0;
        self.total_bytes = 0;
        self.tiflash_replicas = 0;
        self.stats.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for Schema {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.db, "db", buf);
        ::protobuf::PbPrint::fmt(&self.table, "table", buf);
        ::protobuf::PbPrint::fmt(&self.crc64xor, "crc64xor", buf);
        ::protobuf::PbPrint::fmt(&self.total_kvs, "total_kvs", buf);
        ::protobuf::PbPrint::fmt(&self.total_bytes, "total_bytes", buf);
        ::protobuf::PbPrint::fmt(&self.tiflash_replicas, "tiflash_replicas", buf);
        ::protobuf::PbPrint::fmt(&self.stats, "stats", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for Schema {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.db, "db", &mut s);
        ::protobuf::PbPrint::fmt(&self.table, "table", &mut s);
        ::protobuf::PbPrint::fmt(&self.crc64xor, "crc64xor", &mut s);
        ::protobuf::PbPrint::fmt(&self.total_kvs, "total_kvs", &mut s);
        ::protobuf::PbPrint::fmt(&self.total_bytes, "total_bytes", &mut s);
        ::protobuf::PbPrint::fmt(&self.tiflash_replicas, "tiflash_replicas", &mut s);
        ::protobuf::PbPrint::fmt(&self.stats, "stats", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for Schema {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RawRange {
    // message fields
    pub start_key: ::std::vec::Vec<u8>,
    pub end_key: ::std::vec::Vec<u8>,
    pub cf: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RawRange {
    fn default() -> &'a RawRange {
        <RawRange as ::protobuf::Message>::default_instance()
    }
}

impl RawRange {
    pub fn new() -> RawRange {
        ::std::default::Default::default()
    }

    // bytes start_key = 1;


    pub fn get_start_key(&self) -> &[u8] {
        &self.start_key
    }
    pub fn clear_start_key(&mut self) {
        self.start_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_start_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.start_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.start_key
    }

    // Take field
    pub fn take_start_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.start_key, ::std::vec::Vec::new())
    }

    // bytes end_key = 2;


    pub fn get_end_key(&self) -> &[u8] {
        &self.end_key
    }
    pub fn clear_end_key(&mut self) {
        self.end_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_end_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.end_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_end_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.end_key
    }

    // Take field
    pub fn take_end_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.end_key, ::std::vec::Vec::new())
    }

    // string cf = 3;


    pub fn get_cf(&self) -> &str {
        &self.cf
    }
    pub fn clear_cf(&mut self) {
        self.cf.clear();
    }

    // Param is passed by value, moved
    pub fn set_cf(&mut self, v: ::std::string::String) {
        self.cf = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cf(&mut self) -> &mut ::std::string::String {
        &mut self.cf
    }

    // Take field
    pub fn take_cf(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cf, ::std::string::String::new())
    }
}

impl ::protobuf::Message for RawRange {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.start_key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.end_key)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cf)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.start_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.start_key);
        }
        if !self.end_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.end_key);
        }
        if !self.cf.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.cf);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.start_key.is_empty() {
            os.write_bytes(1, &self.start_key)?;
        }
        if !self.end_key.is_empty() {
            os.write_bytes(2, &self.end_key)?;
        }
        if !self.cf.is_empty() {
            os.write_string(3, &self.cf)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RawRange {
        RawRange::new()
    }

    fn default_instance() -> &'static RawRange {
        static mut instance: ::protobuf::lazy::Lazy<RawRange> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RawRange,
        };
        unsafe {
            instance.get(RawRange::new)
        }
    }
}

impl ::protobuf::Clear for RawRange {
    fn clear(&mut self) {
        self.start_key.clear();
        self.end_key.clear();
        self.cf.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for RawRange {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.start_key, "start_key", buf);
        ::protobuf::PbPrint::fmt(&self.end_key, "end_key", buf);
        ::protobuf::PbPrint::fmt(&self.cf, "cf", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for RawRange {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.start_key, "start_key", &mut s);
        ::protobuf::PbPrint::fmt(&self.end_key, "end_key", &mut s);
        ::protobuf::PbPrint::fmt(&self.cf, "cf", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for RawRange {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClusterIdError {
    // message fields
    pub current: u64,
    pub request: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClusterIdError {
    fn default() -> &'a ClusterIdError {
        <ClusterIdError as ::protobuf::Message>::default_instance()
    }
}

impl ClusterIdError {
    pub fn new() -> ClusterIdError {
        ::std::default::Default::default()
    }

    // uint64 current = 1;


    pub fn get_current(&self) -> u64 {
        self.current
    }
    pub fn clear_current(&mut self) {
        self.current = 0;
    }

    // Param is passed by value, moved
    pub fn set_current(&mut self, v: u64) {
        self.current = v;
    }

    // uint64 request = 2;


    pub fn get_request(&self) -> u64 {
        self.request
    }
    pub fn clear_request(&mut self) {
        self.request = 0;
    }

    // Param is passed by value, moved
    pub fn set_request(&mut self, v: u64) {
        self.request = v;
    }
}

impl ::protobuf::Message for ClusterIdError {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.current = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.request = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.current != 0 {
            my_size += ::protobuf::rt::value_size(1, self.current, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.request != 0 {
            my_size += ::protobuf::rt::value_size(2, self.request, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.current != 0 {
            os.write_uint64(1, self.current)?;
        }
        if self.request != 0 {
            os.write_uint64(2, self.request)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClusterIdError {
        ClusterIdError::new()
    }

    fn default_instance() -> &'static ClusterIdError {
        static mut instance: ::protobuf::lazy::Lazy<ClusterIdError> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ClusterIdError,
        };
        unsafe {
            instance.get(ClusterIdError::new)
        }
    }
}

impl ::protobuf::Clear for ClusterIdError {
    fn clear(&mut self) {
        self.current = 0;
        self.request = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for ClusterIdError {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.current, "current", buf);
        ::protobuf::PbPrint::fmt(&self.request, "request", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for ClusterIdError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.current, "current", &mut s);
        ::protobuf::PbPrint::fmt(&self.request, "request", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClusterIdError {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Error {
    // message fields
    pub msg: ::std::string::String,
    // message oneof groups
    pub detail: ::std::option::Option<Error_oneof_detail>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Error {
    fn default() -> &'a Error {
        <Error as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq)]
pub enum Error_oneof_detail {
    ClusterIdError(ClusterIdError),
    KvError(super::kvrpcpb::KeyError),
    RegionError(super::errorpb::Error),
}

impl ::protobuf::PbPrint for Error_oneof_detail {
    fn fmt(&self, name: &str, buf: &mut String) {
        match self {
            Error_oneof_detail::ClusterIdError(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            Error_oneof_detail::KvError(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            Error_oneof_detail::RegionError(v) => ::protobuf::PbPrint::fmt(v, name, buf),
        }
    }
}

impl Error {
    pub fn new() -> Error {
        ::std::default::Default::default()
    }

    // string msg = 1;


    pub fn get_msg(&self) -> &str {
        &self.msg
    }
    pub fn clear_msg(&mut self) {
        self.msg.clear();
    }

    // Param is passed by value, moved
    pub fn set_msg(&mut self, v: ::std::string::String) {
        self.msg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_msg(&mut self) -> &mut ::std::string::String {
        &mut self.msg
    }

    // Take field
    pub fn take_msg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.msg, ::std::string::String::new())
    }

    // .backup.ClusterIDError cluster_id_error = 3;


    pub fn get_cluster_id_error(&self) -> &ClusterIdError {
        match self.detail {
            ::std::option::Option::Some(Error_oneof_detail::ClusterIdError(ref v)) => v,
            _ => ClusterIdError::default_instance(),
        }
    }
    pub fn clear_cluster_id_error(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_cluster_id_error(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(Error_oneof_detail::ClusterIdError(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_cluster_id_error(&mut self, v: ClusterIdError) {
        self.detail = ::std::option::Option::Some(Error_oneof_detail::ClusterIdError(v))
    }

    // Mutable pointer to the field.
    pub fn mut_cluster_id_error(&mut self) -> &mut ClusterIdError {
        if let ::std::option::Option::Some(Error_oneof_detail::ClusterIdError(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(Error_oneof_detail::ClusterIdError(ClusterIdError::new()));
        }
        match self.detail {
            ::std::option::Option::Some(Error_oneof_detail::ClusterIdError(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_cluster_id_error(&mut self) -> ClusterIdError {
        if self.has_cluster_id_error() {
            match self.detail.take() {
                ::std::option::Option::Some(Error_oneof_detail::ClusterIdError(v)) => v,
                _ => panic!(),
            }
        } else {
            ClusterIdError::new()
        }
    }

    // .kvrpcpb.KeyError kv_error = 4;


    pub fn get_kv_error(&self) -> &super::kvrpcpb::KeyError {
        match self.detail {
            ::std::option::Option::Some(Error_oneof_detail::KvError(ref v)) => v,
            _ => super::kvrpcpb::KeyError::default_instance(),
        }
    }
    pub fn clear_kv_error(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_kv_error(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(Error_oneof_detail::KvError(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_kv_error(&mut self, v: super::kvrpcpb::KeyError) {
        self.detail = ::std::option::Option::Some(Error_oneof_detail::KvError(v))
    }

    // Mutable pointer to the field.
    pub fn mut_kv_error(&mut self) -> &mut super::kvrpcpb::KeyError {
        if let ::std::option::Option::Some(Error_oneof_detail::KvError(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(Error_oneof_detail::KvError(super::kvrpcpb::KeyError::new()));
        }
        match self.detail {
            ::std::option::Option::Some(Error_oneof_detail::KvError(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_kv_error(&mut self) -> super::kvrpcpb::KeyError {
        if self.has_kv_error() {
            match self.detail.take() {
                ::std::option::Option::Some(Error_oneof_detail::KvError(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::KeyError::new()
        }
    }

    // .errorpb.Error region_error = 5;


    pub fn get_region_error(&self) -> &super::errorpb::Error {
        match self.detail {
            ::std::option::Option::Some(Error_oneof_detail::RegionError(ref v)) => v,
            _ => super::errorpb::Error::default_instance(),
        }
    }
    pub fn clear_region_error(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_region_error(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(Error_oneof_detail::RegionError(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_region_error(&mut self, v: super::errorpb::Error) {
        self.detail = ::std::option::Option::Some(Error_oneof_detail::RegionError(v))
    }

    // Mutable pointer to the field.
    pub fn mut_region_error(&mut self) -> &mut super::errorpb::Error {
        if let ::std::option::Option::Some(Error_oneof_detail::RegionError(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(Error_oneof_detail::RegionError(super::errorpb::Error::new()));
        }
        match self.detail {
            ::std::option::Option::Some(Error_oneof_detail::RegionError(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_region_error(&mut self) -> super::errorpb::Error {
        if self.has_region_error() {
            match self.detail.take() {
                ::std::option::Option::Some(Error_oneof_detail::RegionError(v)) => v,
                _ => panic!(),
            }
        } else {
            super::errorpb::Error::new()
        }
    }
}

impl ::protobuf::Message for Error {
    fn is_initialized(&self) -> bool {
        if let Some(Error_oneof_detail::ClusterIdError(ref v)) = self.detail {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Error_oneof_detail::KvError(ref v)) = self.detail {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Error_oneof_detail::RegionError(ref v)) = self.detail {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.msg)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.detail = ::std::option::Option::Some(Error_oneof_detail::ClusterIdError(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.detail = ::std::option::Option::Some(Error_oneof_detail::KvError(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.detail = ::std::option::Option::Some(Error_oneof_detail::RegionError(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.msg.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.msg);
        }
        if let ::std::option::Option::Some(ref v) = self.detail {
            match v {
                &Error_oneof_detail::ClusterIdError(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Error_oneof_detail::KvError(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Error_oneof_detail::RegionError(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.msg.is_empty() {
            os.write_string(1, &self.msg)?;
        }
        if let ::std::option::Option::Some(ref v) = self.detail {
            match v {
                &Error_oneof_detail::ClusterIdError(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Error_oneof_detail::KvError(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Error_oneof_detail::RegionError(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Error {
        Error::new()
    }

    fn default_instance() -> &'static Error {
        static mut instance: ::protobuf::lazy::Lazy<Error> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Error,
        };
        unsafe {
            instance.get(Error::new)
        }
    }
}

impl ::protobuf::Clear for Error {
    fn clear(&mut self) {
        self.msg.clear();
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.detail = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for Error {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.msg, "msg", buf);
        ::protobuf::PbPrint::fmt(&self.detail, "detail", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for Error {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.msg, "msg", &mut s);
        ::protobuf::PbPrint::fmt(&self.detail, "detail", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for Error {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CipherInfo {
    // message fields
    pub cipher_type: super::encryptionpb::EncryptionMethod,
    pub cipher_key: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CipherInfo {
    fn default() -> &'a CipherInfo {
        <CipherInfo as ::protobuf::Message>::default_instance()
    }
}

impl CipherInfo {
    pub fn new() -> CipherInfo {
        ::std::default::Default::default()
    }

    // .encryptionpb.EncryptionMethod cipher_type = 1;


    pub fn get_cipher_type(&self) -> super::encryptionpb::EncryptionMethod {
        self.cipher_type
    }
    pub fn clear_cipher_type(&mut self) {
        self.cipher_type = super::encryptionpb::EncryptionMethod::Unknown;
    }

    // Param is passed by value, moved
    pub fn set_cipher_type(&mut self, v: super::encryptionpb::EncryptionMethod) {
        self.cipher_type = v;
    }

    // bytes cipher_key = 2;


    pub fn get_cipher_key(&self) -> &[u8] {
        &self.cipher_key
    }
    pub fn clear_cipher_key(&mut self) {
        self.cipher_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_cipher_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.cipher_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cipher_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.cipher_key
    }

    // Take field
    pub fn take_cipher_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.cipher_key, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CipherInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type == ::protobuf::wire_format::WireTypeVarint {self.cipher_type = is.read_enum()?;} else {return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));}
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.cipher_key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.cipher_type != super::encryptionpb::EncryptionMethod::Unknown {
            my_size += ::protobuf::rt::enum_size(1, self.cipher_type);
        }
        if !self.cipher_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.cipher_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.cipher_type != super::encryptionpb::EncryptionMethod::Unknown {
            os.write_enum(1, self.cipher_type.value())?;
        }
        if !self.cipher_key.is_empty() {
            os.write_bytes(2, &self.cipher_key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CipherInfo {
        CipherInfo::new()
    }

    fn default_instance() -> &'static CipherInfo {
        static mut instance: ::protobuf::lazy::Lazy<CipherInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CipherInfo,
        };
        unsafe {
            instance.get(CipherInfo::new)
        }
    }
}

impl ::protobuf::Clear for CipherInfo {
    fn clear(&mut self) {
        self.cipher_type = super::encryptionpb::EncryptionMethod::Unknown;
        self.cipher_key.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for CipherInfo {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.cipher_type, "cipher_type", buf);
        ::protobuf::PbPrint::fmt(&self.cipher_key, "cipher_key", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for CipherInfo {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.cipher_type, "cipher_type", &mut s);
        ::protobuf::PbPrint::fmt(&self.cipher_key, "cipher_key", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for CipherInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BackupRequest {
    // message fields
    pub cluster_id: u64,
    pub start_key: ::std::vec::Vec<u8>,
    pub end_key: ::std::vec::Vec<u8>,
    pub start_version: u64,
    pub end_version: u64,
    pub rate_limit: u64,
    pub concurrency: u32,
    pub storage_backend: ::protobuf::SingularPtrField<StorageBackend>,
    pub is_raw_kv: bool,
    pub cf: ::std::string::String,
    pub compression_type: CompressionType,
    pub compression_level: i32,
    pub cipher_info: ::protobuf::SingularPtrField<CipherInfo>,
    pub dst_api_version: super::kvrpcpb::ApiVersion,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BackupRequest {
    fn default() -> &'a BackupRequest {
        <BackupRequest as ::protobuf::Message>::default_instance()
    }
}

impl BackupRequest {
    pub fn new() -> BackupRequest {
        ::std::default::Default::default()
    }

    // uint64 cluster_id = 1;


    pub fn get_cluster_id(&self) -> u64 {
        self.cluster_id
    }
    pub fn clear_cluster_id(&mut self) {
        self.cluster_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_cluster_id(&mut self, v: u64) {
        self.cluster_id = v;
    }

    // bytes start_key = 2;


    pub fn get_start_key(&self) -> &[u8] {
        &self.start_key
    }
    pub fn clear_start_key(&mut self) {
        self.start_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_start_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.start_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.start_key
    }

    // Take field
    pub fn take_start_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.start_key, ::std::vec::Vec::new())
    }

    // bytes end_key = 3;


    pub fn get_end_key(&self) -> &[u8] {
        &self.end_key
    }
    pub fn clear_end_key(&mut self) {
        self.end_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_end_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.end_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_end_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.end_key
    }

    // Take field
    pub fn take_end_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.end_key, ::std::vec::Vec::new())
    }

    // uint64 start_version = 4;


    pub fn get_start_version(&self) -> u64 {
        self.start_version
    }
    pub fn clear_start_version(&mut self) {
        self.start_version = 0;
    }

    // Param is passed by value, moved
    pub fn set_start_version(&mut self, v: u64) {
        self.start_version = v;
    }

    // uint64 end_version = 5;


    pub fn get_end_version(&self) -> u64 {
        self.end_version
    }
    pub fn clear_end_version(&mut self) {
        self.end_version = 0;
    }

    // Param is passed by value, moved
    pub fn set_end_version(&mut self, v: u64) {
        self.end_version = v;
    }

    // uint64 rate_limit = 7;


    pub fn get_rate_limit(&self) -> u64 {
        self.rate_limit
    }
    pub fn clear_rate_limit(&mut self) {
        self.rate_limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_rate_limit(&mut self, v: u64) {
        self.rate_limit = v;
    }

    // uint32 concurrency = 8;


    pub fn get_concurrency(&self) -> u32 {
        self.concurrency
    }
    pub fn clear_concurrency(&mut self) {
        self.concurrency = 0;
    }

    // Param is passed by value, moved
    pub fn set_concurrency(&mut self, v: u32) {
        self.concurrency = v;
    }

    // .backup.StorageBackend storage_backend = 9;


    pub fn get_storage_backend(&self) -> &StorageBackend {
        self.storage_backend.as_ref().unwrap_or_else(|| StorageBackend::default_instance())
    }
    pub fn clear_storage_backend(&mut self) {
        self.storage_backend.clear();
    }

    pub fn has_storage_backend(&self) -> bool {
        self.storage_backend.is_some()
    }

    // Param is passed by value, moved
    pub fn set_storage_backend(&mut self, v: StorageBackend) {
        self.storage_backend = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_storage_backend(&mut self) -> &mut StorageBackend {
        if self.storage_backend.is_none() {
            self.storage_backend.set_default();
        }
        self.storage_backend.as_mut().unwrap()
    }

    // Take field
    pub fn take_storage_backend(&mut self) -> StorageBackend {
        self.storage_backend.take().unwrap_or_else(|| StorageBackend::new())
    }

    // bool is_raw_kv = 10;


    pub fn get_is_raw_kv(&self) -> bool {
        self.is_raw_kv
    }
    pub fn clear_is_raw_kv(&mut self) {
        self.is_raw_kv = false;
    }

    // Param is passed by value, moved
    pub fn set_is_raw_kv(&mut self, v: bool) {
        self.is_raw_kv = v;
    }

    // string cf = 11;


    pub fn get_cf(&self) -> &str {
        &self.cf
    }
    pub fn clear_cf(&mut self) {
        self.cf.clear();
    }

    // Param is passed by value, moved
    pub fn set_cf(&mut self, v: ::std::string::String) {
        self.cf = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cf(&mut self) -> &mut ::std::string::String {
        &mut self.cf
    }

    // Take field
    pub fn take_cf(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cf, ::std::string::String::new())
    }

    // .backup.CompressionType compression_type = 12;


    pub fn get_compression_type(&self) -> CompressionType {
        self.compression_type
    }
    pub fn clear_compression_type(&mut self) {
        self.compression_type = CompressionType::Unknown;
    }

    // Param is passed by value, moved
    pub fn set_compression_type(&mut self, v: CompressionType) {
        self.compression_type = v;
    }

    // int32 compression_level = 13;


    pub fn get_compression_level(&self) -> i32 {
        self.compression_level
    }
    pub fn clear_compression_level(&mut self) {
        self.compression_level = 0;
    }

    // Param is passed by value, moved
    pub fn set_compression_level(&mut self, v: i32) {
        self.compression_level = v;
    }

    // .backup.CipherInfo cipher_info = 14;


    pub fn get_cipher_info(&self) -> &CipherInfo {
        self.cipher_info.as_ref().unwrap_or_else(|| CipherInfo::default_instance())
    }
    pub fn clear_cipher_info(&mut self) {
        self.cipher_info.clear();
    }

    pub fn has_cipher_info(&self) -> bool {
        self.cipher_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cipher_info(&mut self, v: CipherInfo) {
        self.cipher_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cipher_info(&mut self) -> &mut CipherInfo {
        if self.cipher_info.is_none() {
            self.cipher_info.set_default();
        }
        self.cipher_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_cipher_info(&mut self) -> CipherInfo {
        self.cipher_info.take().unwrap_or_else(|| CipherInfo::new())
    }

    // .kvrpcpb.APIVersion dst_api_version = 15;


    pub fn get_dst_api_version(&self) -> super::kvrpcpb::ApiVersion {
        self.dst_api_version
    }
    pub fn clear_dst_api_version(&mut self) {
        self.dst_api_version = super::kvrpcpb::ApiVersion::V1;
    }

    // Param is passed by value, moved
    pub fn set_dst_api_version(&mut self, v: super::kvrpcpb::ApiVersion) {
        self.dst_api_version = v;
    }
}

impl ::protobuf::Message for BackupRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.storage_backend {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.cipher_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.cluster_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.start_key)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.end_key)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.start_version = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.end_version = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.rate_limit = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.concurrency = tmp;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.storage_backend)?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_raw_kv = tmp;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cf)?;
                },
                12 => {
                    if wire_type == ::protobuf::wire_format::WireTypeVarint {self.compression_type = is.read_enum()?;} else {return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));}
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.compression_level = tmp;
                },
                14 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cipher_info)?;
                },
                15 => {
                    if wire_type == ::protobuf::wire_format::WireTypeVarint {self.dst_api_version = is.read_enum()?;} else {return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));}
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.cluster_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.cluster_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.start_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.start_key);
        }
        if !self.end_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.end_key);
        }
        if self.start_version != 0 {
            my_size += ::protobuf::rt::value_size(4, self.start_version, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.end_version != 0 {
            my_size += ::protobuf::rt::value_size(5, self.end_version, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rate_limit != 0 {
            my_size += ::protobuf::rt::value_size(7, self.rate_limit, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.concurrency != 0 {
            my_size += ::protobuf::rt::value_size(8, self.concurrency, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.storage_backend.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.is_raw_kv != false {
            my_size += 2;
        }
        if !self.cf.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.cf);
        }
        if self.compression_type != CompressionType::Unknown {
            my_size += ::protobuf::rt::enum_size(12, self.compression_type);
        }
        if self.compression_level != 0 {
            my_size += ::protobuf::rt::value_size(13, self.compression_level, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.cipher_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.dst_api_version != super::kvrpcpb::ApiVersion::V1 {
            my_size += ::protobuf::rt::enum_size(15, self.dst_api_version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.cluster_id != 0 {
            os.write_uint64(1, self.cluster_id)?;
        }
        if !self.start_key.is_empty() {
            os.write_bytes(2, &self.start_key)?;
        }
        if !self.end_key.is_empty() {
            os.write_bytes(3, &self.end_key)?;
        }
        if self.start_version != 0 {
            os.write_uint64(4, self.start_version)?;
        }
        if self.end_version != 0 {
            os.write_uint64(5, self.end_version)?;
        }
        if self.rate_limit != 0 {
            os.write_uint64(7, self.rate_limit)?;
        }
        if self.concurrency != 0 {
            os.write_uint32(8, self.concurrency)?;
        }
        if let Some(ref v) = self.storage_backend.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.is_raw_kv != false {
            os.write_bool(10, self.is_raw_kv)?;
        }
        if !self.cf.is_empty() {
            os.write_string(11, &self.cf)?;
        }
        if self.compression_type != CompressionType::Unknown {
            os.write_enum(12, self.compression_type.value())?;
        }
        if self.compression_level != 0 {
            os.write_int32(13, self.compression_level)?;
        }
        if let Some(ref v) = self.cipher_info.as_ref() {
            os.write_tag(14, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.dst_api_version != super::kvrpcpb::ApiVersion::V1 {
            os.write_enum(15, self.dst_api_version.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BackupRequest {
        BackupRequest::new()
    }

    fn default_instance() -> &'static BackupRequest {
        static mut instance: ::protobuf::lazy::Lazy<BackupRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BackupRequest,
        };
        unsafe {
            instance.get(BackupRequest::new)
        }
    }
}

impl ::protobuf::Clear for BackupRequest {
    fn clear(&mut self) {
        self.cluster_id = 0;
        self.start_key.clear();
        self.end_key.clear();
        self.start_version = 0;
        self.end_version = 0;
        self.rate_limit = 0;
        self.concurrency = 0;
        self.storage_backend.clear();
        self.is_raw_kv = false;
        self.cf.clear();
        self.compression_type = CompressionType::Unknown;
        self.compression_level = 0;
        self.cipher_info.clear();
        self.dst_api_version = super::kvrpcpb::ApiVersion::V1;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for BackupRequest {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.cluster_id, "cluster_id", buf);
        ::protobuf::PbPrint::fmt(&self.start_key, "start_key", buf);
        ::protobuf::PbPrint::fmt(&self.end_key, "end_key", buf);
        ::protobuf::PbPrint::fmt(&self.start_version, "start_version", buf);
        ::protobuf::PbPrint::fmt(&self.end_version, "end_version", buf);
        ::protobuf::PbPrint::fmt(&self.rate_limit, "rate_limit", buf);
        ::protobuf::PbPrint::fmt(&self.concurrency, "concurrency", buf);
        ::protobuf::PbPrint::fmt(&self.storage_backend, "storage_backend", buf);
        ::protobuf::PbPrint::fmt(&self.is_raw_kv, "is_raw_kv", buf);
        ::protobuf::PbPrint::fmt(&self.cf, "cf", buf);
        ::protobuf::PbPrint::fmt(&self.compression_type, "compression_type", buf);
        ::protobuf::PbPrint::fmt(&self.compression_level, "compression_level", buf);
        ::protobuf::PbPrint::fmt(&self.cipher_info, "cipher_info", buf);
        ::protobuf::PbPrint::fmt(&self.dst_api_version, "dst_api_version", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for BackupRequest {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.cluster_id, "cluster_id", &mut s);
        ::protobuf::PbPrint::fmt(&self.start_key, "start_key", &mut s);
        ::protobuf::PbPrint::fmt(&self.end_key, "end_key", &mut s);
        ::protobuf::PbPrint::fmt(&self.start_version, "start_version", &mut s);
        ::protobuf::PbPrint::fmt(&self.end_version, "end_version", &mut s);
        ::protobuf::PbPrint::fmt(&self.rate_limit, "rate_limit", &mut s);
        ::protobuf::PbPrint::fmt(&self.concurrency, "concurrency", &mut s);
        ::protobuf::PbPrint::fmt(&self.storage_backend, "storage_backend", &mut s);
        ::protobuf::PbPrint::fmt(&self.is_raw_kv, "is_raw_kv", &mut s);
        ::protobuf::PbPrint::fmt(&self.cf, "cf", &mut s);
        ::protobuf::PbPrint::fmt(&self.compression_type, "compression_type", &mut s);
        ::protobuf::PbPrint::fmt(&self.compression_level, "compression_level", &mut s);
        ::protobuf::PbPrint::fmt(&self.cipher_info, "cipher_info", &mut s);
        ::protobuf::PbPrint::fmt(&self.dst_api_version, "dst_api_version", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for BackupRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StreamBackupTaskInfo {
    // message fields
    pub storage: ::protobuf::SingularPtrField<StorageBackend>,
    pub start_ts: u64,
    pub end_ts: u64,
    pub name: ::std::string::String,
    pub table_filter: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StreamBackupTaskInfo {
    fn default() -> &'a StreamBackupTaskInfo {
        <StreamBackupTaskInfo as ::protobuf::Message>::default_instance()
    }
}

impl StreamBackupTaskInfo {
    pub fn new() -> StreamBackupTaskInfo {
        ::std::default::Default::default()
    }

    // .backup.StorageBackend storage = 1;


    pub fn get_storage(&self) -> &StorageBackend {
        self.storage.as_ref().unwrap_or_else(|| StorageBackend::default_instance())
    }
    pub fn clear_storage(&mut self) {
        self.storage.clear();
    }

    pub fn has_storage(&self) -> bool {
        self.storage.is_some()
    }

    // Param is passed by value, moved
    pub fn set_storage(&mut self, v: StorageBackend) {
        self.storage = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_storage(&mut self) -> &mut StorageBackend {
        if self.storage.is_none() {
            self.storage.set_default();
        }
        self.storage.as_mut().unwrap()
    }

    // Take field
    pub fn take_storage(&mut self) -> StorageBackend {
        self.storage.take().unwrap_or_else(|| StorageBackend::new())
    }

    // uint64 start_ts = 2;


    pub fn get_start_ts(&self) -> u64 {
        self.start_ts
    }
    pub fn clear_start_ts(&mut self) {
        self.start_ts = 0;
    }

    // Param is passed by value, moved
    pub fn set_start_ts(&mut self, v: u64) {
        self.start_ts = v;
    }

    // uint64 end_ts = 3;


    pub fn get_end_ts(&self) -> u64 {
        self.end_ts
    }
    pub fn clear_end_ts(&mut self) {
        self.end_ts = 0;
    }

    // Param is passed by value, moved
    pub fn set_end_ts(&mut self, v: u64) {
        self.end_ts = v;
    }

    // string name = 4;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // repeated string table_filter = 5;


    pub fn get_table_filter(&self) -> &[::std::string::String] {
        &self.table_filter
    }
    pub fn clear_table_filter(&mut self) {
        self.table_filter.clear();
    }

    // Param is passed by value, moved
    pub fn set_table_filter(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.table_filter = v;
    }

    // Mutable pointer to the field.
    pub fn mut_table_filter(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.table_filter
    }

    // Take field
    pub fn take_table_filter(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.table_filter, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for StreamBackupTaskInfo {
    fn is_initialized(&self) -> bool {
        for v in &self.storage {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.storage)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.start_ts = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.end_ts = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.table_filter)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.storage.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.start_ts != 0 {
            my_size += ::protobuf::rt::value_size(2, self.start_ts, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.end_ts != 0 {
            my_size += ::protobuf::rt::value_size(3, self.end_ts, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.name);
        }
        for value in &self.table_filter {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.storage.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.start_ts != 0 {
            os.write_uint64(2, self.start_ts)?;
        }
        if self.end_ts != 0 {
            os.write_uint64(3, self.end_ts)?;
        }
        if !self.name.is_empty() {
            os.write_string(4, &self.name)?;
        }
        for v in &self.table_filter {
            os.write_string(5, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StreamBackupTaskInfo {
        StreamBackupTaskInfo::new()
    }

    fn default_instance() -> &'static StreamBackupTaskInfo {
        static mut instance: ::protobuf::lazy::Lazy<StreamBackupTaskInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StreamBackupTaskInfo,
        };
        unsafe {
            instance.get(StreamBackupTaskInfo::new)
        }
    }
}

impl ::protobuf::Clear for StreamBackupTaskInfo {
    fn clear(&mut self) {
        self.storage.clear();
        self.start_ts = 0;
        self.end_ts = 0;
        self.name.clear();
        self.table_filter.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for StreamBackupTaskInfo {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.storage, "storage", buf);
        ::protobuf::PbPrint::fmt(&self.start_ts, "start_ts", buf);
        ::protobuf::PbPrint::fmt(&self.end_ts, "end_ts", buf);
        ::protobuf::PbPrint::fmt(&self.name, "name", buf);
        ::protobuf::PbPrint::fmt(&self.table_filter, "table_filter", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for StreamBackupTaskInfo {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.storage, "storage", &mut s);
        ::protobuf::PbPrint::fmt(&self.start_ts, "start_ts", &mut s);
        ::protobuf::PbPrint::fmt(&self.end_ts, "end_ts", &mut s);
        ::protobuf::PbPrint::fmt(&self.name, "name", &mut s);
        ::protobuf::PbPrint::fmt(&self.table_filter, "table_filter", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for StreamBackupTaskInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StorageBackend {
    // message oneof groups
    pub backend: ::std::option::Option<StorageBackend_oneof_backend>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StorageBackend {
    fn default() -> &'a StorageBackend {
        <StorageBackend as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq)]
pub enum StorageBackend_oneof_backend {
    Noop(Noop),
    Local(Local),
    S3(S3),
    Gcs(Gcs),
    CloudDynamic(CloudDynamic),
    Hdfs(Hdfs),
    AzureBlobStorage(AzureBlobStorage),
}

impl ::protobuf::PbPrint for StorageBackend_oneof_backend {
    fn fmt(&self, name: &str, buf: &mut String) {
        match self {
            StorageBackend_oneof_backend::Noop(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            StorageBackend_oneof_backend::Local(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            StorageBackend_oneof_backend::S3(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            StorageBackend_oneof_backend::Gcs(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            StorageBackend_oneof_backend::CloudDynamic(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            StorageBackend_oneof_backend::Hdfs(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            StorageBackend_oneof_backend::AzureBlobStorage(v) => ::protobuf::PbPrint::fmt(v, name, buf),
        }
    }
}

impl StorageBackend {
    pub fn new() -> StorageBackend {
        ::std::default::Default::default()
    }

    // .backup.Noop noop = 1;


    pub fn get_noop(&self) -> &Noop {
        match self.backend {
            ::std::option::Option::Some(StorageBackend_oneof_backend::Noop(ref v)) => v,
            _ => Noop::default_instance(),
        }
    }
    pub fn clear_noop(&mut self) {
        self.backend = ::std::option::Option::None;
    }

    pub fn has_noop(&self) -> bool {
        match self.backend {
            ::std::option::Option::Some(StorageBackend_oneof_backend::Noop(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_noop(&mut self, v: Noop) {
        self.backend = ::std::option::Option::Some(StorageBackend_oneof_backend::Noop(v))
    }

    // Mutable pointer to the field.
    pub fn mut_noop(&mut self) -> &mut Noop {
        if let ::std::option::Option::Some(StorageBackend_oneof_backend::Noop(_)) = self.backend {
        } else {
            self.backend = ::std::option::Option::Some(StorageBackend_oneof_backend::Noop(Noop::new()));
        }
        match self.backend {
            ::std::option::Option::Some(StorageBackend_oneof_backend::Noop(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_noop(&mut self) -> Noop {
        if self.has_noop() {
            match self.backend.take() {
                ::std::option::Option::Some(StorageBackend_oneof_backend::Noop(v)) => v,
                _ => panic!(),
            }
        } else {
            Noop::new()
        }
    }

    // .backup.Local local = 2;


    pub fn get_local(&self) -> &Local {
        match self.backend {
            ::std::option::Option::Some(StorageBackend_oneof_backend::Local(ref v)) => v,
            _ => Local::default_instance(),
        }
    }
    pub fn clear_local(&mut self) {
        self.backend = ::std::option::Option::None;
    }

    pub fn has_local(&self) -> bool {
        match self.backend {
            ::std::option::Option::Some(StorageBackend_oneof_backend::Local(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_local(&mut self, v: Local) {
        self.backend = ::std::option::Option::Some(StorageBackend_oneof_backend::Local(v))
    }

    // Mutable pointer to the field.
    pub fn mut_local(&mut self) -> &mut Local {
        if let ::std::option::Option::Some(StorageBackend_oneof_backend::Local(_)) = self.backend {
        } else {
            self.backend = ::std::option::Option::Some(StorageBackend_oneof_backend::Local(Local::new()));
        }
        match self.backend {
            ::std::option::Option::Some(StorageBackend_oneof_backend::Local(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_local(&mut self) -> Local {
        if self.has_local() {
            match self.backend.take() {
                ::std::option::Option::Some(StorageBackend_oneof_backend::Local(v)) => v,
                _ => panic!(),
            }
        } else {
            Local::new()
        }
    }

    // .backup.S3 s3 = 3;


    pub fn get_s3(&self) -> &S3 {
        match self.backend {
            ::std::option::Option::Some(StorageBackend_oneof_backend::S3(ref v)) => v,
            _ => S3::default_instance(),
        }
    }
    pub fn clear_s3(&mut self) {
        self.backend = ::std::option::Option::None;
    }

    pub fn has_s3(&self) -> bool {
        match self.backend {
            ::std::option::Option::Some(StorageBackend_oneof_backend::S3(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_s3(&mut self, v: S3) {
        self.backend = ::std::option::Option::Some(StorageBackend_oneof_backend::S3(v))
    }

    // Mutable pointer to the field.
    pub fn mut_s3(&mut self) -> &mut S3 {
        if let ::std::option::Option::Some(StorageBackend_oneof_backend::S3(_)) = self.backend {
        } else {
            self.backend = ::std::option::Option::Some(StorageBackend_oneof_backend::S3(S3::new()));
        }
        match self.backend {
            ::std::option::Option::Some(StorageBackend_oneof_backend::S3(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_s3(&mut self) -> S3 {
        if self.has_s3() {
            match self.backend.take() {
                ::std::option::Option::Some(StorageBackend_oneof_backend::S3(v)) => v,
                _ => panic!(),
            }
        } else {
            S3::new()
        }
    }

    // .backup.GCS gcs = 4;


    pub fn get_gcs(&self) -> &Gcs {
        match self.backend {
            ::std::option::Option::Some(StorageBackend_oneof_backend::Gcs(ref v)) => v,
            _ => Gcs::default_instance(),
        }
    }
    pub fn clear_gcs(&mut self) {
        self.backend = ::std::option::Option::None;
    }

    pub fn has_gcs(&self) -> bool {
        match self.backend {
            ::std::option::Option::Some(StorageBackend_oneof_backend::Gcs(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_gcs(&mut self, v: Gcs) {
        self.backend = ::std::option::Option::Some(StorageBackend_oneof_backend::Gcs(v))
    }

    // Mutable pointer to the field.
    pub fn mut_gcs(&mut self) -> &mut Gcs {
        if let ::std::option::Option::Some(StorageBackend_oneof_backend::Gcs(_)) = self.backend {
        } else {
            self.backend = ::std::option::Option::Some(StorageBackend_oneof_backend::Gcs(Gcs::new()));
        }
        match self.backend {
            ::std::option::Option::Some(StorageBackend_oneof_backend::Gcs(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_gcs(&mut self) -> Gcs {
        if self.has_gcs() {
            match self.backend.take() {
                ::std::option::Option::Some(StorageBackend_oneof_backend::Gcs(v)) => v,
                _ => panic!(),
            }
        } else {
            Gcs::new()
        }
    }

    // .backup.CloudDynamic cloud_dynamic = 5;


    pub fn get_cloud_dynamic(&self) -> &CloudDynamic {
        match self.backend {
            ::std::option::Option::Some(StorageBackend_oneof_backend::CloudDynamic(ref v)) => v,
            _ => CloudDynamic::default_instance(),
        }
    }
    pub fn clear_cloud_dynamic(&mut self) {
        self.backend = ::std::option::Option::None;
    }

    pub fn has_cloud_dynamic(&self) -> bool {
        match self.backend {
            ::std::option::Option::Some(StorageBackend_oneof_backend::CloudDynamic(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_cloud_dynamic(&mut self, v: CloudDynamic) {
        self.backend = ::std::option::Option::Some(StorageBackend_oneof_backend::CloudDynamic(v))
    }

    // Mutable pointer to the field.
    pub fn mut_cloud_dynamic(&mut self) -> &mut CloudDynamic {
        if let ::std::option::Option::Some(StorageBackend_oneof_backend::CloudDynamic(_)) = self.backend {
        } else {
            self.backend = ::std::option::Option::Some(StorageBackend_oneof_backend::CloudDynamic(CloudDynamic::new()));
        }
        match self.backend {
            ::std::option::Option::Some(StorageBackend_oneof_backend::CloudDynamic(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_cloud_dynamic(&mut self) -> CloudDynamic {
        if self.has_cloud_dynamic() {
            match self.backend.take() {
                ::std::option::Option::Some(StorageBackend_oneof_backend::CloudDynamic(v)) => v,
                _ => panic!(),
            }
        } else {
            CloudDynamic::new()
        }
    }

    // .backup.HDFS hdfs = 6;


    pub fn get_hdfs(&self) -> &Hdfs {
        match self.backend {
            ::std::option::Option::Some(StorageBackend_oneof_backend::Hdfs(ref v)) => v,
            _ => Hdfs::default_instance(),
        }
    }
    pub fn clear_hdfs(&mut self) {
        self.backend = ::std::option::Option::None;
    }

    pub fn has_hdfs(&self) -> bool {
        match self.backend {
            ::std::option::Option::Some(StorageBackend_oneof_backend::Hdfs(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_hdfs(&mut self, v: Hdfs) {
        self.backend = ::std::option::Option::Some(StorageBackend_oneof_backend::Hdfs(v))
    }

    // Mutable pointer to the field.
    pub fn mut_hdfs(&mut self) -> &mut Hdfs {
        if let ::std::option::Option::Some(StorageBackend_oneof_backend::Hdfs(_)) = self.backend {
        } else {
            self.backend = ::std::option::Option::Some(StorageBackend_oneof_backend::Hdfs(Hdfs::new()));
        }
        match self.backend {
            ::std::option::Option::Some(StorageBackend_oneof_backend::Hdfs(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_hdfs(&mut self) -> Hdfs {
        if self.has_hdfs() {
            match self.backend.take() {
                ::std::option::Option::Some(StorageBackend_oneof_backend::Hdfs(v)) => v,
                _ => panic!(),
            }
        } else {
            Hdfs::new()
        }
    }

    // .backup.AzureBlobStorage azure_blob_storage = 7;


    pub fn get_azure_blob_storage(&self) -> &AzureBlobStorage {
        match self.backend {
            ::std::option::Option::Some(StorageBackend_oneof_backend::AzureBlobStorage(ref v)) => v,
            _ => AzureBlobStorage::default_instance(),
        }
    }
    pub fn clear_azure_blob_storage(&mut self) {
        self.backend = ::std::option::Option::None;
    }

    pub fn has_azure_blob_storage(&self) -> bool {
        match self.backend {
            ::std::option::Option::Some(StorageBackend_oneof_backend::AzureBlobStorage(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_azure_blob_storage(&mut self, v: AzureBlobStorage) {
        self.backend = ::std::option::Option::Some(StorageBackend_oneof_backend::AzureBlobStorage(v))
    }

    // Mutable pointer to the field.
    pub fn mut_azure_blob_storage(&mut self) -> &mut AzureBlobStorage {
        if let ::std::option::Option::Some(StorageBackend_oneof_backend::AzureBlobStorage(_)) = self.backend {
        } else {
            self.backend = ::std::option::Option::Some(StorageBackend_oneof_backend::AzureBlobStorage(AzureBlobStorage::new()));
        }
        match self.backend {
            ::std::option::Option::Some(StorageBackend_oneof_backend::AzureBlobStorage(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_azure_blob_storage(&mut self) -> AzureBlobStorage {
        if self.has_azure_blob_storage() {
            match self.backend.take() {
                ::std::option::Option::Some(StorageBackend_oneof_backend::AzureBlobStorage(v)) => v,
                _ => panic!(),
            }
        } else {
            AzureBlobStorage::new()
        }
    }
}

impl ::protobuf::Message for StorageBackend {
    fn is_initialized(&self) -> bool {
        if let Some(StorageBackend_oneof_backend::Noop(ref v)) = self.backend {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(StorageBackend_oneof_backend::Local(ref v)) = self.backend {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(StorageBackend_oneof_backend::S3(ref v)) = self.backend {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(StorageBackend_oneof_backend::Gcs(ref v)) = self.backend {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(StorageBackend_oneof_backend::CloudDynamic(ref v)) = self.backend {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(StorageBackend_oneof_backend::Hdfs(ref v)) = self.backend {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(StorageBackend_oneof_backend::AzureBlobStorage(ref v)) = self.backend {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.backend = ::std::option::Option::Some(StorageBackend_oneof_backend::Noop(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.backend = ::std::option::Option::Some(StorageBackend_oneof_backend::Local(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.backend = ::std::option::Option::Some(StorageBackend_oneof_backend::S3(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.backend = ::std::option::Option::Some(StorageBackend_oneof_backend::Gcs(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.backend = ::std::option::Option::Some(StorageBackend_oneof_backend::CloudDynamic(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.backend = ::std::option::Option::Some(StorageBackend_oneof_backend::Hdfs(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.backend = ::std::option::Option::Some(StorageBackend_oneof_backend::AzureBlobStorage(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.backend {
            match v {
                &StorageBackend_oneof_backend::Noop(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &StorageBackend_oneof_backend::Local(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &StorageBackend_oneof_backend::S3(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &StorageBackend_oneof_backend::Gcs(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &StorageBackend_oneof_backend::CloudDynamic(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &StorageBackend_oneof_backend::Hdfs(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &StorageBackend_oneof_backend::AzureBlobStorage(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.backend {
            match v {
                &StorageBackend_oneof_backend::Noop(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &StorageBackend_oneof_backend::Local(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &StorageBackend_oneof_backend::S3(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &StorageBackend_oneof_backend::Gcs(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &StorageBackend_oneof_backend::CloudDynamic(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &StorageBackend_oneof_backend::Hdfs(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &StorageBackend_oneof_backend::AzureBlobStorage(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StorageBackend {
        StorageBackend::new()
    }

    fn default_instance() -> &'static StorageBackend {
        static mut instance: ::protobuf::lazy::Lazy<StorageBackend> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StorageBackend,
        };
        unsafe {
            instance.get(StorageBackend::new)
        }
    }
}

impl ::protobuf::Clear for StorageBackend {
    fn clear(&mut self) {
        self.backend = ::std::option::Option::None;
        self.backend = ::std::option::Option::None;
        self.backend = ::std::option::Option::None;
        self.backend = ::std::option::Option::None;
        self.backend = ::std::option::Option::None;
        self.backend = ::std::option::Option::None;
        self.backend = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for StorageBackend {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.backend, "backend", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for StorageBackend {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.backend, "backend", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for StorageBackend {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Noop {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Noop {
    fn default() -> &'a Noop {
        <Noop as ::protobuf::Message>::default_instance()
    }
}

impl Noop {
    pub fn new() -> Noop {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Noop {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Noop {
        Noop::new()
    }

    fn default_instance() -> &'static Noop {
        static mut instance: ::protobuf::lazy::Lazy<Noop> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Noop,
        };
        unsafe {
            instance.get(Noop::new)
        }
    }
}

impl ::protobuf::Clear for Noop {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for Noop {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
    }
}
impl ::std::fmt::Debug for Noop {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        Ok(())
    }
}

impl ::protobuf::reflect::ProtobufValue for Noop {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Local {
    // message fields
    pub path: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Local {
    fn default() -> &'a Local {
        <Local as ::protobuf::Message>::default_instance()
    }
}

impl Local {
    pub fn new() -> Local {
        ::std::default::Default::default()
    }

    // string path = 1;


    pub fn get_path(&self) -> &str {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Local {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.path);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.path.is_empty() {
            os.write_string(1, &self.path)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Local {
        Local::new()
    }

    fn default_instance() -> &'static Local {
        static mut instance: ::protobuf::lazy::Lazy<Local> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Local,
        };
        unsafe {
            instance.get(Local::new)
        }
    }
}

impl ::protobuf::Clear for Local {
    fn clear(&mut self) {
        self.path.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for Local {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.path, "path", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for Local {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.path, "path", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for Local {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S3 {
    // message fields
    pub endpoint: ::std::string::String,
    pub region: ::std::string::String,
    pub bucket: ::std::string::String,
    pub prefix: ::std::string::String,
    pub storage_class: ::std::string::String,
    pub sse: ::std::string::String,
    pub acl: ::std::string::String,
    pub access_key: ::std::string::String,
    pub secret_access_key: ::std::string::String,
    pub force_path_style: bool,
    pub sse_kms_key_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a S3 {
    fn default() -> &'a S3 {
        <S3 as ::protobuf::Message>::default_instance()
    }
}

impl S3 {
    pub fn new() -> S3 {
        ::std::default::Default::default()
    }

    // string endpoint = 1;


    pub fn get_endpoint(&self) -> &str {
        &self.endpoint
    }
    pub fn clear_endpoint(&mut self) {
        self.endpoint.clear();
    }

    // Param is passed by value, moved
    pub fn set_endpoint(&mut self, v: ::std::string::String) {
        self.endpoint = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_endpoint(&mut self) -> &mut ::std::string::String {
        &mut self.endpoint
    }

    // Take field
    pub fn take_endpoint(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.endpoint, ::std::string::String::new())
    }

    // string region = 2;


    pub fn get_region(&self) -> &str {
        &self.region
    }
    pub fn clear_region(&mut self) {
        self.region.clear();
    }

    // Param is passed by value, moved
    pub fn set_region(&mut self, v: ::std::string::String) {
        self.region = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_region(&mut self) -> &mut ::std::string::String {
        &mut self.region
    }

    // Take field
    pub fn take_region(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.region, ::std::string::String::new())
    }

    // string bucket = 3;


    pub fn get_bucket(&self) -> &str {
        &self.bucket
    }
    pub fn clear_bucket(&mut self) {
        self.bucket.clear();
    }

    // Param is passed by value, moved
    pub fn set_bucket(&mut self, v: ::std::string::String) {
        self.bucket = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bucket(&mut self) -> &mut ::std::string::String {
        &mut self.bucket
    }

    // Take field
    pub fn take_bucket(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bucket, ::std::string::String::new())
    }

    // string prefix = 4;


    pub fn get_prefix(&self) -> &str {
        &self.prefix
    }
    pub fn clear_prefix(&mut self) {
        self.prefix.clear();
    }

    // Param is passed by value, moved
    pub fn set_prefix(&mut self, v: ::std::string::String) {
        self.prefix = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prefix(&mut self) -> &mut ::std::string::String {
        &mut self.prefix
    }

    // Take field
    pub fn take_prefix(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prefix, ::std::string::String::new())
    }

    // string storage_class = 5;


    pub fn get_storage_class(&self) -> &str {
        &self.storage_class
    }
    pub fn clear_storage_class(&mut self) {
        self.storage_class.clear();
    }

    // Param is passed by value, moved
    pub fn set_storage_class(&mut self, v: ::std::string::String) {
        self.storage_class = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_storage_class(&mut self) -> &mut ::std::string::String {
        &mut self.storage_class
    }

    // Take field
    pub fn take_storage_class(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.storage_class, ::std::string::String::new())
    }

    // string sse = 6;


    pub fn get_sse(&self) -> &str {
        &self.sse
    }
    pub fn clear_sse(&mut self) {
        self.sse.clear();
    }

    // Param is passed by value, moved
    pub fn set_sse(&mut self, v: ::std::string::String) {
        self.sse = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sse(&mut self) -> &mut ::std::string::String {
        &mut self.sse
    }

    // Take field
    pub fn take_sse(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sse, ::std::string::String::new())
    }

    // string acl = 7;


    pub fn get_acl(&self) -> &str {
        &self.acl
    }
    pub fn clear_acl(&mut self) {
        self.acl.clear();
    }

    // Param is passed by value, moved
    pub fn set_acl(&mut self, v: ::std::string::String) {
        self.acl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acl(&mut self) -> &mut ::std::string::String {
        &mut self.acl
    }

    // Take field
    pub fn take_acl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acl, ::std::string::String::new())
    }

    // string access_key = 8;


    pub fn get_access_key(&self) -> &str {
        &self.access_key
    }
    pub fn clear_access_key(&mut self) {
        self.access_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_access_key(&mut self, v: ::std::string::String) {
        self.access_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_access_key(&mut self) -> &mut ::std::string::String {
        &mut self.access_key
    }

    // Take field
    pub fn take_access_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.access_key, ::std::string::String::new())
    }

    // string secret_access_key = 9;


    pub fn get_secret_access_key(&self) -> &str {
        &self.secret_access_key
    }
    pub fn clear_secret_access_key(&mut self) {
        self.secret_access_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_secret_access_key(&mut self, v: ::std::string::String) {
        self.secret_access_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_secret_access_key(&mut self) -> &mut ::std::string::String {
        &mut self.secret_access_key
    }

    // Take field
    pub fn take_secret_access_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.secret_access_key, ::std::string::String::new())
    }

    // bool force_path_style = 10;


    pub fn get_force_path_style(&self) -> bool {
        self.force_path_style
    }
    pub fn clear_force_path_style(&mut self) {
        self.force_path_style = false;
    }

    // Param is passed by value, moved
    pub fn set_force_path_style(&mut self, v: bool) {
        self.force_path_style = v;
    }

    // string sse_kms_key_id = 11;


    pub fn get_sse_kms_key_id(&self) -> &str {
        &self.sse_kms_key_id
    }
    pub fn clear_sse_kms_key_id(&mut self) {
        self.sse_kms_key_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_sse_kms_key_id(&mut self, v: ::std::string::String) {
        self.sse_kms_key_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sse_kms_key_id(&mut self) -> &mut ::std::string::String {
        &mut self.sse_kms_key_id
    }

    // Take field
    pub fn take_sse_kms_key_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sse_kms_key_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for S3 {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.endpoint)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.region)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bucket)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prefix)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.storage_class)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sse)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acl)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.access_key)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.secret_access_key)?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.force_path_style = tmp;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sse_kms_key_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.endpoint.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.endpoint);
        }
        if !self.region.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.region);
        }
        if !self.bucket.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.bucket);
        }
        if !self.prefix.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.prefix);
        }
        if !self.storage_class.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.storage_class);
        }
        if !self.sse.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.sse);
        }
        if !self.acl.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.acl);
        }
        if !self.access_key.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.access_key);
        }
        if !self.secret_access_key.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.secret_access_key);
        }
        if self.force_path_style != false {
            my_size += 2;
        }
        if !self.sse_kms_key_id.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.sse_kms_key_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.endpoint.is_empty() {
            os.write_string(1, &self.endpoint)?;
        }
        if !self.region.is_empty() {
            os.write_string(2, &self.region)?;
        }
        if !self.bucket.is_empty() {
            os.write_string(3, &self.bucket)?;
        }
        if !self.prefix.is_empty() {
            os.write_string(4, &self.prefix)?;
        }
        if !self.storage_class.is_empty() {
            os.write_string(5, &self.storage_class)?;
        }
        if !self.sse.is_empty() {
            os.write_string(6, &self.sse)?;
        }
        if !self.acl.is_empty() {
            os.write_string(7, &self.acl)?;
        }
        if !self.access_key.is_empty() {
            os.write_string(8, &self.access_key)?;
        }
        if !self.secret_access_key.is_empty() {
            os.write_string(9, &self.secret_access_key)?;
        }
        if self.force_path_style != false {
            os.write_bool(10, self.force_path_style)?;
        }
        if !self.sse_kms_key_id.is_empty() {
            os.write_string(11, &self.sse_kms_key_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S3 {
        S3::new()
    }

    fn default_instance() -> &'static S3 {
        static mut instance: ::protobuf::lazy::Lazy<S3> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const S3,
        };
        unsafe {
            instance.get(S3::new)
        }
    }
}

impl ::protobuf::Clear for S3 {
    fn clear(&mut self) {
        self.endpoint.clear();
        self.region.clear();
        self.bucket.clear();
        self.prefix.clear();
        self.storage_class.clear();
        self.sse.clear();
        self.acl.clear();
        self.access_key.clear();
        self.secret_access_key.clear();
        self.force_path_style = false;
        self.sse_kms_key_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for S3 {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.endpoint, "endpoint", buf);
        ::protobuf::PbPrint::fmt(&self.region, "region", buf);
        ::protobuf::PbPrint::fmt(&self.bucket, "bucket", buf);
        ::protobuf::PbPrint::fmt(&self.prefix, "prefix", buf);
        ::protobuf::PbPrint::fmt(&self.storage_class, "storage_class", buf);
        ::protobuf::PbPrint::fmt(&self.sse, "sse", buf);
        ::protobuf::PbPrint::fmt(&self.acl, "acl", buf);
        ::protobuf::PbPrint::fmt(&self.access_key, "access_key", buf);
        ::protobuf::PbPrint::fmt(&self.secret_access_key, "secret_access_key", buf);
        ::protobuf::PbPrint::fmt(&self.force_path_style, "force_path_style", buf);
        ::protobuf::PbPrint::fmt(&self.sse_kms_key_id, "sse_kms_key_id", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for S3 {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.endpoint, "endpoint", &mut s);
        ::protobuf::PbPrint::fmt(&self.region, "region", &mut s);
        ::protobuf::PbPrint::fmt(&self.bucket, "bucket", &mut s);
        ::protobuf::PbPrint::fmt(&self.prefix, "prefix", &mut s);
        ::protobuf::PbPrint::fmt(&self.storage_class, "storage_class", &mut s);
        ::protobuf::PbPrint::fmt(&self.sse, "sse", &mut s);
        ::protobuf::PbPrint::fmt(&self.acl, "acl", &mut s);
        ::protobuf::PbPrint::fmt(&self.access_key, "access_key", &mut s);
        ::protobuf::PbPrint::fmt(&self.secret_access_key, "secret_access_key", &mut s);
        ::protobuf::PbPrint::fmt(&self.force_path_style, "force_path_style", &mut s);
        ::protobuf::PbPrint::fmt(&self.sse_kms_key_id, "sse_kms_key_id", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for S3 {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Gcs {
    // message fields
    pub endpoint: ::std::string::String,
    pub bucket: ::std::string::String,
    pub prefix: ::std::string::String,
    pub storage_class: ::std::string::String,
    pub predefined_acl: ::std::string::String,
    pub credentials_blob: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Gcs {
    fn default() -> &'a Gcs {
        <Gcs as ::protobuf::Message>::default_instance()
    }
}

impl Gcs {
    pub fn new() -> Gcs {
        ::std::default::Default::default()
    }

    // string endpoint = 1;


    pub fn get_endpoint(&self) -> &str {
        &self.endpoint
    }
    pub fn clear_endpoint(&mut self) {
        self.endpoint.clear();
    }

    // Param is passed by value, moved
    pub fn set_endpoint(&mut self, v: ::std::string::String) {
        self.endpoint = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_endpoint(&mut self) -> &mut ::std::string::String {
        &mut self.endpoint
    }

    // Take field
    pub fn take_endpoint(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.endpoint, ::std::string::String::new())
    }

    // string bucket = 2;


    pub fn get_bucket(&self) -> &str {
        &self.bucket
    }
    pub fn clear_bucket(&mut self) {
        self.bucket.clear();
    }

    // Param is passed by value, moved
    pub fn set_bucket(&mut self, v: ::std::string::String) {
        self.bucket = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bucket(&mut self) -> &mut ::std::string::String {
        &mut self.bucket
    }

    // Take field
    pub fn take_bucket(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bucket, ::std::string::String::new())
    }

    // string prefix = 3;


    pub fn get_prefix(&self) -> &str {
        &self.prefix
    }
    pub fn clear_prefix(&mut self) {
        self.prefix.clear();
    }

    // Param is passed by value, moved
    pub fn set_prefix(&mut self, v: ::std::string::String) {
        self.prefix = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prefix(&mut self) -> &mut ::std::string::String {
        &mut self.prefix
    }

    // Take field
    pub fn take_prefix(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prefix, ::std::string::String::new())
    }

    // string storage_class = 4;


    pub fn get_storage_class(&self) -> &str {
        &self.storage_class
    }
    pub fn clear_storage_class(&mut self) {
        self.storage_class.clear();
    }

    // Param is passed by value, moved
    pub fn set_storage_class(&mut self, v: ::std::string::String) {
        self.storage_class = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_storage_class(&mut self) -> &mut ::std::string::String {
        &mut self.storage_class
    }

    // Take field
    pub fn take_storage_class(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.storage_class, ::std::string::String::new())
    }

    // string predefined_acl = 5;


    pub fn get_predefined_acl(&self) -> &str {
        &self.predefined_acl
    }
    pub fn clear_predefined_acl(&mut self) {
        self.predefined_acl.clear();
    }

    // Param is passed by value, moved
    pub fn set_predefined_acl(&mut self, v: ::std::string::String) {
        self.predefined_acl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_predefined_acl(&mut self) -> &mut ::std::string::String {
        &mut self.predefined_acl
    }

    // Take field
    pub fn take_predefined_acl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.predefined_acl, ::std::string::String::new())
    }

    // string credentials_blob = 6;


    pub fn get_credentials_blob(&self) -> &str {
        &self.credentials_blob
    }
    pub fn clear_credentials_blob(&mut self) {
        self.credentials_blob.clear();
    }

    // Param is passed by value, moved
    pub fn set_credentials_blob(&mut self, v: ::std::string::String) {
        self.credentials_blob = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_credentials_blob(&mut self) -> &mut ::std::string::String {
        &mut self.credentials_blob
    }

    // Take field
    pub fn take_credentials_blob(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.credentials_blob, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Gcs {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.endpoint)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bucket)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prefix)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.storage_class)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.predefined_acl)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.credentials_blob)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.endpoint.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.endpoint);
        }
        if !self.bucket.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.bucket);
        }
        if !self.prefix.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.prefix);
        }
        if !self.storage_class.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.storage_class);
        }
        if !self.predefined_acl.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.predefined_acl);
        }
        if !self.credentials_blob.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.credentials_blob);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.endpoint.is_empty() {
            os.write_string(1, &self.endpoint)?;
        }
        if !self.bucket.is_empty() {
            os.write_string(2, &self.bucket)?;
        }
        if !self.prefix.is_empty() {
            os.write_string(3, &self.prefix)?;
        }
        if !self.storage_class.is_empty() {
            os.write_string(4, &self.storage_class)?;
        }
        if !self.predefined_acl.is_empty() {
            os.write_string(5, &self.predefined_acl)?;
        }
        if !self.credentials_blob.is_empty() {
            os.write_string(6, &self.credentials_blob)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Gcs {
        Gcs::new()
    }

    fn default_instance() -> &'static Gcs {
        static mut instance: ::protobuf::lazy::Lazy<Gcs> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Gcs,
        };
        unsafe {
            instance.get(Gcs::new)
        }
    }
}

impl ::protobuf::Clear for Gcs {
    fn clear(&mut self) {
        self.endpoint.clear();
        self.bucket.clear();
        self.prefix.clear();
        self.storage_class.clear();
        self.predefined_acl.clear();
        self.credentials_blob.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for Gcs {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.endpoint, "endpoint", buf);
        ::protobuf::PbPrint::fmt(&self.bucket, "bucket", buf);
        ::protobuf::PbPrint::fmt(&self.prefix, "prefix", buf);
        ::protobuf::PbPrint::fmt(&self.storage_class, "storage_class", buf);
        ::protobuf::PbPrint::fmt(&self.predefined_acl, "predefined_acl", buf);
        ::protobuf::PbPrint::fmt(&self.credentials_blob, "credentials_blob", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for Gcs {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.endpoint, "endpoint", &mut s);
        ::protobuf::PbPrint::fmt(&self.bucket, "bucket", &mut s);
        ::protobuf::PbPrint::fmt(&self.prefix, "prefix", &mut s);
        ::protobuf::PbPrint::fmt(&self.storage_class, "storage_class", &mut s);
        ::protobuf::PbPrint::fmt(&self.predefined_acl, "predefined_acl", &mut s);
        ::protobuf::PbPrint::fmt(&self.credentials_blob, "credentials_blob", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for Gcs {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AzureBlobStorage {
    // message fields
    pub endpoint: ::std::string::String,
    pub bucket: ::std::string::String,
    pub prefix: ::std::string::String,
    pub storage_class: ::std::string::String,
    pub account_name: ::std::string::String,
    pub shared_key: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AzureBlobStorage {
    fn default() -> &'a AzureBlobStorage {
        <AzureBlobStorage as ::protobuf::Message>::default_instance()
    }
}

impl AzureBlobStorage {
    pub fn new() -> AzureBlobStorage {
        ::std::default::Default::default()
    }

    // string endpoint = 1;


    pub fn get_endpoint(&self) -> &str {
        &self.endpoint
    }
    pub fn clear_endpoint(&mut self) {
        self.endpoint.clear();
    }

    // Param is passed by value, moved
    pub fn set_endpoint(&mut self, v: ::std::string::String) {
        self.endpoint = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_endpoint(&mut self) -> &mut ::std::string::String {
        &mut self.endpoint
    }

    // Take field
    pub fn take_endpoint(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.endpoint, ::std::string::String::new())
    }

    // string bucket = 2;


    pub fn get_bucket(&self) -> &str {
        &self.bucket
    }
    pub fn clear_bucket(&mut self) {
        self.bucket.clear();
    }

    // Param is passed by value, moved
    pub fn set_bucket(&mut self, v: ::std::string::String) {
        self.bucket = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bucket(&mut self) -> &mut ::std::string::String {
        &mut self.bucket
    }

    // Take field
    pub fn take_bucket(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bucket, ::std::string::String::new())
    }

    // string prefix = 3;


    pub fn get_prefix(&self) -> &str {
        &self.prefix
    }
    pub fn clear_prefix(&mut self) {
        self.prefix.clear();
    }

    // Param is passed by value, moved
    pub fn set_prefix(&mut self, v: ::std::string::String) {
        self.prefix = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prefix(&mut self) -> &mut ::std::string::String {
        &mut self.prefix
    }

    // Take field
    pub fn take_prefix(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prefix, ::std::string::String::new())
    }

    // string storage_class = 4;


    pub fn get_storage_class(&self) -> &str {
        &self.storage_class
    }
    pub fn clear_storage_class(&mut self) {
        self.storage_class.clear();
    }

    // Param is passed by value, moved
    pub fn set_storage_class(&mut self, v: ::std::string::String) {
        self.storage_class = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_storage_class(&mut self) -> &mut ::std::string::String {
        &mut self.storage_class
    }

    // Take field
    pub fn take_storage_class(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.storage_class, ::std::string::String::new())
    }

    // string account_name = 5;


    pub fn get_account_name(&self) -> &str {
        &self.account_name
    }
    pub fn clear_account_name(&mut self) {
        self.account_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_name(&mut self, v: ::std::string::String) {
        self.account_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_name(&mut self) -> &mut ::std::string::String {
        &mut self.account_name
    }

    // Take field
    pub fn take_account_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.account_name, ::std::string::String::new())
    }

    // string shared_key = 6;


    pub fn get_shared_key(&self) -> &str {
        &self.shared_key
    }
    pub fn clear_shared_key(&mut self) {
        self.shared_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_shared_key(&mut self, v: ::std::string::String) {
        self.shared_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_shared_key(&mut self) -> &mut ::std::string::String {
        &mut self.shared_key
    }

    // Take field
    pub fn take_shared_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.shared_key, ::std::string::String::new())
    }
}

impl ::protobuf::Message for AzureBlobStorage {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.endpoint)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bucket)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prefix)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.storage_class)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.account_name)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.shared_key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.endpoint.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.endpoint);
        }
        if !self.bucket.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.bucket);
        }
        if !self.prefix.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.prefix);
        }
        if !self.storage_class.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.storage_class);
        }
        if !self.account_name.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.account_name);
        }
        if !self.shared_key.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.shared_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.endpoint.is_empty() {
            os.write_string(1, &self.endpoint)?;
        }
        if !self.bucket.is_empty() {
            os.write_string(2, &self.bucket)?;
        }
        if !self.prefix.is_empty() {
            os.write_string(3, &self.prefix)?;
        }
        if !self.storage_class.is_empty() {
            os.write_string(4, &self.storage_class)?;
        }
        if !self.account_name.is_empty() {
            os.write_string(5, &self.account_name)?;
        }
        if !self.shared_key.is_empty() {
            os.write_string(6, &self.shared_key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AzureBlobStorage {
        AzureBlobStorage::new()
    }

    fn default_instance() -> &'static AzureBlobStorage {
        static mut instance: ::protobuf::lazy::Lazy<AzureBlobStorage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AzureBlobStorage,
        };
        unsafe {
            instance.get(AzureBlobStorage::new)
        }
    }
}

impl ::protobuf::Clear for AzureBlobStorage {
    fn clear(&mut self) {
        self.endpoint.clear();
        self.bucket.clear();
        self.prefix.clear();
        self.storage_class.clear();
        self.account_name.clear();
        self.shared_key.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for AzureBlobStorage {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.endpoint, "endpoint", buf);
        ::protobuf::PbPrint::fmt(&self.bucket, "bucket", buf);
        ::protobuf::PbPrint::fmt(&self.prefix, "prefix", buf);
        ::protobuf::PbPrint::fmt(&self.storage_class, "storage_class", buf);
        ::protobuf::PbPrint::fmt(&self.account_name, "account_name", buf);
        ::protobuf::PbPrint::fmt(&self.shared_key, "shared_key", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for AzureBlobStorage {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.endpoint, "endpoint", &mut s);
        ::protobuf::PbPrint::fmt(&self.bucket, "bucket", &mut s);
        ::protobuf::PbPrint::fmt(&self.prefix, "prefix", &mut s);
        ::protobuf::PbPrint::fmt(&self.storage_class, "storage_class", &mut s);
        ::protobuf::PbPrint::fmt(&self.account_name, "account_name", &mut s);
        ::protobuf::PbPrint::fmt(&self.shared_key, "shared_key", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for AzureBlobStorage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Bucket {
    // message fields
    pub endpoint: ::std::string::String,
    pub region: ::std::string::String,
    pub bucket: ::std::string::String,
    pub prefix: ::std::string::String,
    pub storage_class: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Bucket {
    fn default() -> &'a Bucket {
        <Bucket as ::protobuf::Message>::default_instance()
    }
}

impl Bucket {
    pub fn new() -> Bucket {
        ::std::default::Default::default()
    }

    // string endpoint = 1;


    pub fn get_endpoint(&self) -> &str {
        &self.endpoint
    }
    pub fn clear_endpoint(&mut self) {
        self.endpoint.clear();
    }

    // Param is passed by value, moved
    pub fn set_endpoint(&mut self, v: ::std::string::String) {
        self.endpoint = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_endpoint(&mut self) -> &mut ::std::string::String {
        &mut self.endpoint
    }

    // Take field
    pub fn take_endpoint(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.endpoint, ::std::string::String::new())
    }

    // string region = 3;


    pub fn get_region(&self) -> &str {
        &self.region
    }
    pub fn clear_region(&mut self) {
        self.region.clear();
    }

    // Param is passed by value, moved
    pub fn set_region(&mut self, v: ::std::string::String) {
        self.region = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_region(&mut self) -> &mut ::std::string::String {
        &mut self.region
    }

    // Take field
    pub fn take_region(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.region, ::std::string::String::new())
    }

    // string bucket = 4;


    pub fn get_bucket(&self) -> &str {
        &self.bucket
    }
    pub fn clear_bucket(&mut self) {
        self.bucket.clear();
    }

    // Param is passed by value, moved
    pub fn set_bucket(&mut self, v: ::std::string::String) {
        self.bucket = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bucket(&mut self) -> &mut ::std::string::String {
        &mut self.bucket
    }

    // Take field
    pub fn take_bucket(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bucket, ::std::string::String::new())
    }

    // string prefix = 5;


    pub fn get_prefix(&self) -> &str {
        &self.prefix
    }
    pub fn clear_prefix(&mut self) {
        self.prefix.clear();
    }

    // Param is passed by value, moved
    pub fn set_prefix(&mut self, v: ::std::string::String) {
        self.prefix = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prefix(&mut self) -> &mut ::std::string::String {
        &mut self.prefix
    }

    // Take field
    pub fn take_prefix(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prefix, ::std::string::String::new())
    }

    // string storage_class = 6;


    pub fn get_storage_class(&self) -> &str {
        &self.storage_class
    }
    pub fn clear_storage_class(&mut self) {
        self.storage_class.clear();
    }

    // Param is passed by value, moved
    pub fn set_storage_class(&mut self, v: ::std::string::String) {
        self.storage_class = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_storage_class(&mut self) -> &mut ::std::string::String {
        &mut self.storage_class
    }

    // Take field
    pub fn take_storage_class(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.storage_class, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Bucket {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.endpoint)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.region)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bucket)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prefix)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.storage_class)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.endpoint.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.endpoint);
        }
        if !self.region.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.region);
        }
        if !self.bucket.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.bucket);
        }
        if !self.prefix.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.prefix);
        }
        if !self.storage_class.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.storage_class);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.endpoint.is_empty() {
            os.write_string(1, &self.endpoint)?;
        }
        if !self.region.is_empty() {
            os.write_string(3, &self.region)?;
        }
        if !self.bucket.is_empty() {
            os.write_string(4, &self.bucket)?;
        }
        if !self.prefix.is_empty() {
            os.write_string(5, &self.prefix)?;
        }
        if !self.storage_class.is_empty() {
            os.write_string(6, &self.storage_class)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Bucket {
        Bucket::new()
    }

    fn default_instance() -> &'static Bucket {
        static mut instance: ::protobuf::lazy::Lazy<Bucket> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Bucket,
        };
        unsafe {
            instance.get(Bucket::new)
        }
    }
}

impl ::protobuf::Clear for Bucket {
    fn clear(&mut self) {
        self.endpoint.clear();
        self.region.clear();
        self.bucket.clear();
        self.prefix.clear();
        self.storage_class.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for Bucket {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.endpoint, "endpoint", buf);
        ::protobuf::PbPrint::fmt(&self.region, "region", buf);
        ::protobuf::PbPrint::fmt(&self.bucket, "bucket", buf);
        ::protobuf::PbPrint::fmt(&self.prefix, "prefix", buf);
        ::protobuf::PbPrint::fmt(&self.storage_class, "storage_class", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for Bucket {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.endpoint, "endpoint", &mut s);
        ::protobuf::PbPrint::fmt(&self.region, "region", &mut s);
        ::protobuf::PbPrint::fmt(&self.bucket, "bucket", &mut s);
        ::protobuf::PbPrint::fmt(&self.prefix, "prefix", &mut s);
        ::protobuf::PbPrint::fmt(&self.storage_class, "storage_class", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for Bucket {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CloudDynamic {
    // message fields
    pub bucket: ::protobuf::SingularPtrField<Bucket>,
    pub provider_name: ::std::string::String,
    pub attrs: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CloudDynamic {
    fn default() -> &'a CloudDynamic {
        <CloudDynamic as ::protobuf::Message>::default_instance()
    }
}

impl CloudDynamic {
    pub fn new() -> CloudDynamic {
        ::std::default::Default::default()
    }

    // .backup.Bucket bucket = 1;


    pub fn get_bucket(&self) -> &Bucket {
        self.bucket.as_ref().unwrap_or_else(|| Bucket::default_instance())
    }
    pub fn clear_bucket(&mut self) {
        self.bucket.clear();
    }

    pub fn has_bucket(&self) -> bool {
        self.bucket.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bucket(&mut self, v: Bucket) {
        self.bucket = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bucket(&mut self) -> &mut Bucket {
        if self.bucket.is_none() {
            self.bucket.set_default();
        }
        self.bucket.as_mut().unwrap()
    }

    // Take field
    pub fn take_bucket(&mut self) -> Bucket {
        self.bucket.take().unwrap_or_else(|| Bucket::new())
    }

    // string provider_name = 2;


    pub fn get_provider_name(&self) -> &str {
        &self.provider_name
    }
    pub fn clear_provider_name(&mut self) {
        self.provider_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_provider_name(&mut self, v: ::std::string::String) {
        self.provider_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_provider_name(&mut self) -> &mut ::std::string::String {
        &mut self.provider_name
    }

    // Take field
    pub fn take_provider_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.provider_name, ::std::string::String::new())
    }

    // repeated .backup.CloudDynamic.AttrsEntry attrs = 3;


    pub fn get_attrs(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.attrs
    }
    pub fn clear_attrs(&mut self) {
        self.attrs.clear();
    }

    // Param is passed by value, moved
    pub fn set_attrs(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.attrs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_attrs(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.attrs
    }

    // Take field
    pub fn take_attrs(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.attrs, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for CloudDynamic {
    fn is_initialized(&self) -> bool {
        for v in &self.bucket {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.bucket)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.provider_name)?;
                },
                3 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.attrs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.bucket.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.provider_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.provider_name);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(3, &self.attrs);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.bucket.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.provider_name.is_empty() {
            os.write_string(2, &self.provider_name)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(3, &self.attrs, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CloudDynamic {
        CloudDynamic::new()
    }

    fn default_instance() -> &'static CloudDynamic {
        static mut instance: ::protobuf::lazy::Lazy<CloudDynamic> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CloudDynamic,
        };
        unsafe {
            instance.get(CloudDynamic::new)
        }
    }
}

impl ::protobuf::Clear for CloudDynamic {
    fn clear(&mut self) {
        self.bucket.clear();
        self.provider_name.clear();
        self.attrs.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for CloudDynamic {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.bucket, "bucket", buf);
        ::protobuf::PbPrint::fmt(&self.provider_name, "provider_name", buf);
        ::protobuf::PbPrint::fmt(&self.attrs, "attrs", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for CloudDynamic {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.bucket, "bucket", &mut s);
        ::protobuf::PbPrint::fmt(&self.provider_name, "provider_name", &mut s);
        ::protobuf::PbPrint::fmt(&self.attrs, "attrs", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for CloudDynamic {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Hdfs {
    // message fields
    pub remote: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Hdfs {
    fn default() -> &'a Hdfs {
        <Hdfs as ::protobuf::Message>::default_instance()
    }
}

impl Hdfs {
    pub fn new() -> Hdfs {
        ::std::default::Default::default()
    }

    // string remote = 1;


    pub fn get_remote(&self) -> &str {
        &self.remote
    }
    pub fn clear_remote(&mut self) {
        self.remote.clear();
    }

    // Param is passed by value, moved
    pub fn set_remote(&mut self, v: ::std::string::String) {
        self.remote = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_remote(&mut self) -> &mut ::std::string::String {
        &mut self.remote
    }

    // Take field
    pub fn take_remote(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.remote, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Hdfs {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.remote)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.remote.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.remote);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.remote.is_empty() {
            os.write_string(1, &self.remote)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Hdfs {
        Hdfs::new()
    }

    fn default_instance() -> &'static Hdfs {
        static mut instance: ::protobuf::lazy::Lazy<Hdfs> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Hdfs,
        };
        unsafe {
            instance.get(Hdfs::new)
        }
    }
}

impl ::protobuf::Clear for Hdfs {
    fn clear(&mut self) {
        self.remote.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for Hdfs {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.remote, "remote", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for Hdfs {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.remote, "remote", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for Hdfs {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BackupResponse {
    // message fields
    pub error: ::protobuf::SingularPtrField<Error>,
    pub start_key: ::std::vec::Vec<u8>,
    pub end_key: ::std::vec::Vec<u8>,
    pub files: ::protobuf::RepeatedField<File>,
    pub api_version: super::kvrpcpb::ApiVersion,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BackupResponse {
    fn default() -> &'a BackupResponse {
        <BackupResponse as ::protobuf::Message>::default_instance()
    }
}

impl BackupResponse {
    pub fn new() -> BackupResponse {
        ::std::default::Default::default()
    }

    // .backup.Error error = 1;


    pub fn get_error(&self) -> &Error {
        self.error.as_ref().unwrap_or_else(|| Error::default_instance())
    }
    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    pub fn has_error(&self) -> bool {
        self.error.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: Error) {
        self.error = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut Error {
        if self.error.is_none() {
            self.error.set_default();
        }
        self.error.as_mut().unwrap()
    }

    // Take field
    pub fn take_error(&mut self) -> Error {
        self.error.take().unwrap_or_else(|| Error::new())
    }

    // bytes start_key = 2;


    pub fn get_start_key(&self) -> &[u8] {
        &self.start_key
    }
    pub fn clear_start_key(&mut self) {
        self.start_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_start_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.start_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.start_key
    }

    // Take field
    pub fn take_start_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.start_key, ::std::vec::Vec::new())
    }

    // bytes end_key = 3;


    pub fn get_end_key(&self) -> &[u8] {
        &self.end_key
    }
    pub fn clear_end_key(&mut self) {
        self.end_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_end_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.end_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_end_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.end_key
    }

    // Take field
    pub fn take_end_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.end_key, ::std::vec::Vec::new())
    }

    // repeated .backup.File files = 4;


    pub fn get_files(&self) -> &[File] {
        &self.files
    }
    pub fn clear_files(&mut self) {
        self.files.clear();
    }

    // Param is passed by value, moved
    pub fn set_files(&mut self, v: ::protobuf::RepeatedField<File>) {
        self.files = v;
    }

    // Mutable pointer to the field.
    pub fn mut_files(&mut self) -> &mut ::protobuf::RepeatedField<File> {
        &mut self.files
    }

    // Take field
    pub fn take_files(&mut self) -> ::protobuf::RepeatedField<File> {
        ::std::mem::replace(&mut self.files, ::protobuf::RepeatedField::new())
    }

    // .kvrpcpb.APIVersion api_version = 5;


    pub fn get_api_version(&self) -> super::kvrpcpb::ApiVersion {
        self.api_version
    }
    pub fn clear_api_version(&mut self) {
        self.api_version = super::kvrpcpb::ApiVersion::V1;
    }

    // Param is passed by value, moved
    pub fn set_api_version(&mut self, v: super::kvrpcpb::ApiVersion) {
        self.api_version = v;
    }
}

impl ::protobuf::Message for BackupResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.error {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.files {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.error)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.start_key)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.end_key)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.files)?;
                },
                5 => {
                    if wire_type == ::protobuf::wire_format::WireTypeVarint {self.api_version = is.read_enum()?;} else {return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));}
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.error.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.start_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.start_key);
        }
        if !self.end_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.end_key);
        }
        for value in &self.files {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.api_version != super::kvrpcpb::ApiVersion::V1 {
            my_size += ::protobuf::rt::enum_size(5, self.api_version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.error.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.start_key.is_empty() {
            os.write_bytes(2, &self.start_key)?;
        }
        if !self.end_key.is_empty() {
            os.write_bytes(3, &self.end_key)?;
        }
        for v in &self.files {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.api_version != super::kvrpcpb::ApiVersion::V1 {
            os.write_enum(5, self.api_version.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BackupResponse {
        BackupResponse::new()
    }

    fn default_instance() -> &'static BackupResponse {
        static mut instance: ::protobuf::lazy::Lazy<BackupResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BackupResponse,
        };
        unsafe {
            instance.get(BackupResponse::new)
        }
    }
}

impl ::protobuf::Clear for BackupResponse {
    fn clear(&mut self) {
        self.error.clear();
        self.start_key.clear();
        self.end_key.clear();
        self.files.clear();
        self.api_version = super::kvrpcpb::ApiVersion::V1;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for BackupResponse {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.error, "error", buf);
        ::protobuf::PbPrint::fmt(&self.start_key, "start_key", buf);
        ::protobuf::PbPrint::fmt(&self.end_key, "end_key", buf);
        ::protobuf::PbPrint::fmt(&self.files, "files", buf);
        ::protobuf::PbPrint::fmt(&self.api_version, "api_version", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for BackupResponse {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.error, "error", &mut s);
        ::protobuf::PbPrint::fmt(&self.start_key, "start_key", &mut s);
        ::protobuf::PbPrint::fmt(&self.end_key, "end_key", &mut s);
        ::protobuf::PbPrint::fmt(&self.files, "files", &mut s);
        ::protobuf::PbPrint::fmt(&self.api_version, "api_version", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for BackupResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ExternalStorageRestoreRequest {
    // message fields
    pub storage_backend: ::protobuf::SingularPtrField<StorageBackend>,
    pub object_name: ::std::string::String,
    pub restore_name: ::std::string::String,
    pub content_length: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExternalStorageRestoreRequest {
    fn default() -> &'a ExternalStorageRestoreRequest {
        <ExternalStorageRestoreRequest as ::protobuf::Message>::default_instance()
    }
}

impl ExternalStorageRestoreRequest {
    pub fn new() -> ExternalStorageRestoreRequest {
        ::std::default::Default::default()
    }

    // .backup.StorageBackend storage_backend = 1;


    pub fn get_storage_backend(&self) -> &StorageBackend {
        self.storage_backend.as_ref().unwrap_or_else(|| StorageBackend::default_instance())
    }
    pub fn clear_storage_backend(&mut self) {
        self.storage_backend.clear();
    }

    pub fn has_storage_backend(&self) -> bool {
        self.storage_backend.is_some()
    }

    // Param is passed by value, moved
    pub fn set_storage_backend(&mut self, v: StorageBackend) {
        self.storage_backend = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_storage_backend(&mut self) -> &mut StorageBackend {
        if self.storage_backend.is_none() {
            self.storage_backend.set_default();
        }
        self.storage_backend.as_mut().unwrap()
    }

    // Take field
    pub fn take_storage_backend(&mut self) -> StorageBackend {
        self.storage_backend.take().unwrap_or_else(|| StorageBackend::new())
    }

    // string object_name = 2;


    pub fn get_object_name(&self) -> &str {
        &self.object_name
    }
    pub fn clear_object_name(&mut self) {
        self.object_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_object_name(&mut self, v: ::std::string::String) {
        self.object_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_object_name(&mut self) -> &mut ::std::string::String {
        &mut self.object_name
    }

    // Take field
    pub fn take_object_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.object_name, ::std::string::String::new())
    }

    // string restore_name = 3;


    pub fn get_restore_name(&self) -> &str {
        &self.restore_name
    }
    pub fn clear_restore_name(&mut self) {
        self.restore_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_restore_name(&mut self, v: ::std::string::String) {
        self.restore_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_restore_name(&mut self) -> &mut ::std::string::String {
        &mut self.restore_name
    }

    // Take field
    pub fn take_restore_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.restore_name, ::std::string::String::new())
    }

    // uint64 content_length = 4;


    pub fn get_content_length(&self) -> u64 {
        self.content_length
    }
    pub fn clear_content_length(&mut self) {
        self.content_length = 0;
    }

    // Param is passed by value, moved
    pub fn set_content_length(&mut self, v: u64) {
        self.content_length = v;
    }
}

impl ::protobuf::Message for ExternalStorageRestoreRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.storage_backend {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.storage_backend)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.object_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.restore_name)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.content_length = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.storage_backend.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.object_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.object_name);
        }
        if !self.restore_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.restore_name);
        }
        if self.content_length != 0 {
            my_size += ::protobuf::rt::value_size(4, self.content_length, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.storage_backend.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.object_name.is_empty() {
            os.write_string(2, &self.object_name)?;
        }
        if !self.restore_name.is_empty() {
            os.write_string(3, &self.restore_name)?;
        }
        if self.content_length != 0 {
            os.write_uint64(4, self.content_length)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExternalStorageRestoreRequest {
        ExternalStorageRestoreRequest::new()
    }

    fn default_instance() -> &'static ExternalStorageRestoreRequest {
        static mut instance: ::protobuf::lazy::Lazy<ExternalStorageRestoreRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ExternalStorageRestoreRequest,
        };
        unsafe {
            instance.get(ExternalStorageRestoreRequest::new)
        }
    }
}

impl ::protobuf::Clear for ExternalStorageRestoreRequest {
    fn clear(&mut self) {
        self.storage_backend.clear();
        self.object_name.clear();
        self.restore_name.clear();
        self.content_length = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for ExternalStorageRestoreRequest {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.storage_backend, "storage_backend", buf);
        ::protobuf::PbPrint::fmt(&self.object_name, "object_name", buf);
        ::protobuf::PbPrint::fmt(&self.restore_name, "restore_name", buf);
        ::protobuf::PbPrint::fmt(&self.content_length, "content_length", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for ExternalStorageRestoreRequest {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.storage_backend, "storage_backend", &mut s);
        ::protobuf::PbPrint::fmt(&self.object_name, "object_name", &mut s);
        ::protobuf::PbPrint::fmt(&self.restore_name, "restore_name", &mut s);
        ::protobuf::PbPrint::fmt(&self.content_length, "content_length", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExternalStorageRestoreRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ExternalStorageRestoreResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExternalStorageRestoreResponse {
    fn default() -> &'a ExternalStorageRestoreResponse {
        <ExternalStorageRestoreResponse as ::protobuf::Message>::default_instance()
    }
}

impl ExternalStorageRestoreResponse {
    pub fn new() -> ExternalStorageRestoreResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ExternalStorageRestoreResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExternalStorageRestoreResponse {
        ExternalStorageRestoreResponse::new()
    }

    fn default_instance() -> &'static ExternalStorageRestoreResponse {
        static mut instance: ::protobuf::lazy::Lazy<ExternalStorageRestoreResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ExternalStorageRestoreResponse,
        };
        unsafe {
            instance.get(ExternalStorageRestoreResponse::new)
        }
    }
}

impl ::protobuf::Clear for ExternalStorageRestoreResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for ExternalStorageRestoreResponse {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
    }
}
impl ::std::fmt::Debug for ExternalStorageRestoreResponse {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        Ok(())
    }
}

impl ::protobuf::reflect::ProtobufValue for ExternalStorageRestoreResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ExternalStorageSaveRequest {
    // message fields
    pub storage_backend: ::protobuf::SingularPtrField<StorageBackend>,
    pub object_name: ::std::string::String,
    pub content_length: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExternalStorageSaveRequest {
    fn default() -> &'a ExternalStorageSaveRequest {
        <ExternalStorageSaveRequest as ::protobuf::Message>::default_instance()
    }
}

impl ExternalStorageSaveRequest {
    pub fn new() -> ExternalStorageSaveRequest {
        ::std::default::Default::default()
    }

    // .backup.StorageBackend storage_backend = 1;


    pub fn get_storage_backend(&self) -> &StorageBackend {
        self.storage_backend.as_ref().unwrap_or_else(|| StorageBackend::default_instance())
    }
    pub fn clear_storage_backend(&mut self) {
        self.storage_backend.clear();
    }

    pub fn has_storage_backend(&self) -> bool {
        self.storage_backend.is_some()
    }

    // Param is passed by value, moved
    pub fn set_storage_backend(&mut self, v: StorageBackend) {
        self.storage_backend = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_storage_backend(&mut self) -> &mut StorageBackend {
        if self.storage_backend.is_none() {
            self.storage_backend.set_default();
        }
        self.storage_backend.as_mut().unwrap()
    }

    // Take field
    pub fn take_storage_backend(&mut self) -> StorageBackend {
        self.storage_backend.take().unwrap_or_else(|| StorageBackend::new())
    }

    // string object_name = 2;


    pub fn get_object_name(&self) -> &str {
        &self.object_name
    }
    pub fn clear_object_name(&mut self) {
        self.object_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_object_name(&mut self, v: ::std::string::String) {
        self.object_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_object_name(&mut self) -> &mut ::std::string::String {
        &mut self.object_name
    }

    // Take field
    pub fn take_object_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.object_name, ::std::string::String::new())
    }

    // uint64 content_length = 3;


    pub fn get_content_length(&self) -> u64 {
        self.content_length
    }
    pub fn clear_content_length(&mut self) {
        self.content_length = 0;
    }

    // Param is passed by value, moved
    pub fn set_content_length(&mut self, v: u64) {
        self.content_length = v;
    }
}

impl ::protobuf::Message for ExternalStorageSaveRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.storage_backend {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.storage_backend)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.object_name)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.content_length = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.storage_backend.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.object_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.object_name);
        }
        if self.content_length != 0 {
            my_size += ::protobuf::rt::value_size(3, self.content_length, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.storage_backend.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.object_name.is_empty() {
            os.write_string(2, &self.object_name)?;
        }
        if self.content_length != 0 {
            os.write_uint64(3, self.content_length)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExternalStorageSaveRequest {
        ExternalStorageSaveRequest::new()
    }

    fn default_instance() -> &'static ExternalStorageSaveRequest {
        static mut instance: ::protobuf::lazy::Lazy<ExternalStorageSaveRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ExternalStorageSaveRequest,
        };
        unsafe {
            instance.get(ExternalStorageSaveRequest::new)
        }
    }
}

impl ::protobuf::Clear for ExternalStorageSaveRequest {
    fn clear(&mut self) {
        self.storage_backend.clear();
        self.object_name.clear();
        self.content_length = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for ExternalStorageSaveRequest {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.storage_backend, "storage_backend", buf);
        ::protobuf::PbPrint::fmt(&self.object_name, "object_name", buf);
        ::protobuf::PbPrint::fmt(&self.content_length, "content_length", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for ExternalStorageSaveRequest {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.storage_backend, "storage_backend", &mut s);
        ::protobuf::PbPrint::fmt(&self.object_name, "object_name", &mut s);
        ::protobuf::PbPrint::fmt(&self.content_length, "content_length", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExternalStorageSaveRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ExternalStorageSaveResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExternalStorageSaveResponse {
    fn default() -> &'a ExternalStorageSaveResponse {
        <ExternalStorageSaveResponse as ::protobuf::Message>::default_instance()
    }
}

impl ExternalStorageSaveResponse {
    pub fn new() -> ExternalStorageSaveResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ExternalStorageSaveResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExternalStorageSaveResponse {
        ExternalStorageSaveResponse::new()
    }

    fn default_instance() -> &'static ExternalStorageSaveResponse {
        static mut instance: ::protobuf::lazy::Lazy<ExternalStorageSaveResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ExternalStorageSaveResponse,
        };
        unsafe {
            instance.get(ExternalStorageSaveResponse::new)
        }
    }
}

impl ::protobuf::Clear for ExternalStorageSaveResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for ExternalStorageSaveResponse {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
    }
}
impl ::std::fmt::Debug for ExternalStorageSaveResponse {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        Ok(())
    }
}

impl ::protobuf::reflect::ProtobufValue for ExternalStorageSaveResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Metadata {
    // message fields
    pub files: ::protobuf::RepeatedField<DataFileInfo>,
    pub store_id: i64,
    pub resolved_ts: u64,
    pub max_ts: u64,
    pub min_ts: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Metadata {
    fn default() -> &'a Metadata {
        <Metadata as ::protobuf::Message>::default_instance()
    }
}

impl Metadata {
    pub fn new() -> Metadata {
        ::std::default::Default::default()
    }

    // repeated .backup.DataFileInfo files = 1;


    pub fn get_files(&self) -> &[DataFileInfo] {
        &self.files
    }
    pub fn clear_files(&mut self) {
        self.files.clear();
    }

    // Param is passed by value, moved
    pub fn set_files(&mut self, v: ::protobuf::RepeatedField<DataFileInfo>) {
        self.files = v;
    }

    // Mutable pointer to the field.
    pub fn mut_files(&mut self) -> &mut ::protobuf::RepeatedField<DataFileInfo> {
        &mut self.files
    }

    // Take field
    pub fn take_files(&mut self) -> ::protobuf::RepeatedField<DataFileInfo> {
        ::std::mem::replace(&mut self.files, ::protobuf::RepeatedField::new())
    }

    // int64 store_id = 2;


    pub fn get_store_id(&self) -> i64 {
        self.store_id
    }
    pub fn clear_store_id(&mut self) {
        self.store_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_store_id(&mut self, v: i64) {
        self.store_id = v;
    }

    // uint64 resolved_ts = 3;


    pub fn get_resolved_ts(&self) -> u64 {
        self.resolved_ts
    }
    pub fn clear_resolved_ts(&mut self) {
        self.resolved_ts = 0;
    }

    // Param is passed by value, moved
    pub fn set_resolved_ts(&mut self, v: u64) {
        self.resolved_ts = v;
    }

    // uint64 max_ts = 4;


    pub fn get_max_ts(&self) -> u64 {
        self.max_ts
    }
    pub fn clear_max_ts(&mut self) {
        self.max_ts = 0;
    }

    // Param is passed by value, moved
    pub fn set_max_ts(&mut self, v: u64) {
        self.max_ts = v;
    }

    // uint64 min_ts = 5;


    pub fn get_min_ts(&self) -> u64 {
        self.min_ts
    }
    pub fn clear_min_ts(&mut self) {
        self.min_ts = 0;
    }

    // Param is passed by value, moved
    pub fn set_min_ts(&mut self, v: u64) {
        self.min_ts = v;
    }
}

impl ::protobuf::Message for Metadata {
    fn is_initialized(&self) -> bool {
        for v in &self.files {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.files)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.store_id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.resolved_ts = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.max_ts = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.min_ts = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.files {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.store_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.store_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.resolved_ts != 0 {
            my_size += ::protobuf::rt::value_size(3, self.resolved_ts, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.max_ts != 0 {
            my_size += ::protobuf::rt::value_size(4, self.max_ts, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.min_ts != 0 {
            my_size += ::protobuf::rt::value_size(5, self.min_ts, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.files {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.store_id != 0 {
            os.write_int64(2, self.store_id)?;
        }
        if self.resolved_ts != 0 {
            os.write_uint64(3, self.resolved_ts)?;
        }
        if self.max_ts != 0 {
            os.write_uint64(4, self.max_ts)?;
        }
        if self.min_ts != 0 {
            os.write_uint64(5, self.min_ts)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Metadata {
        Metadata::new()
    }

    fn default_instance() -> &'static Metadata {
        static mut instance: ::protobuf::lazy::Lazy<Metadata> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Metadata,
        };
        unsafe {
            instance.get(Metadata::new)
        }
    }
}

impl ::protobuf::Clear for Metadata {
    fn clear(&mut self) {
        self.files.clear();
        self.store_id = 0;
        self.resolved_ts = 0;
        self.max_ts = 0;
        self.min_ts = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for Metadata {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.files, "files", buf);
        ::protobuf::PbPrint::fmt(&self.store_id, "store_id", buf);
        ::protobuf::PbPrint::fmt(&self.resolved_ts, "resolved_ts", buf);
        ::protobuf::PbPrint::fmt(&self.max_ts, "max_ts", buf);
        ::protobuf::PbPrint::fmt(&self.min_ts, "min_ts", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for Metadata {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.files, "files", &mut s);
        ::protobuf::PbPrint::fmt(&self.store_id, "store_id", &mut s);
        ::protobuf::PbPrint::fmt(&self.resolved_ts, "resolved_ts", &mut s);
        ::protobuf::PbPrint::fmt(&self.max_ts, "max_ts", &mut s);
        ::protobuf::PbPrint::fmt(&self.min_ts, "min_ts", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for Metadata {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DataFileInfo {
    // message fields
    pub sha256: ::std::vec::Vec<u8>,
    pub path: ::std::string::String,
    pub number_of_entries: i64,
    pub min_ts: u64,
    pub max_ts: u64,
    pub resolved_ts: u64,
    pub region_id: i64,
    pub start_key: ::std::vec::Vec<u8>,
    pub end_key: ::std::vec::Vec<u8>,
    pub cf: ::std::string::String,
    pub r_type: FileType,
    pub is_meta: bool,
    pub table_id: i64,
    pub length: u64,
    pub min_begin_ts_in_default_cf: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DataFileInfo {
    fn default() -> &'a DataFileInfo {
        <DataFileInfo as ::protobuf::Message>::default_instance()
    }
}

impl DataFileInfo {
    pub fn new() -> DataFileInfo {
        ::std::default::Default::default()
    }

    // bytes sha256 = 1;


    pub fn get_sha256(&self) -> &[u8] {
        &self.sha256
    }
    pub fn clear_sha256(&mut self) {
        self.sha256.clear();
    }

    // Param is passed by value, moved
    pub fn set_sha256(&mut self, v: ::std::vec::Vec<u8>) {
        self.sha256 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sha256(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.sha256
    }

    // Take field
    pub fn take_sha256(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.sha256, ::std::vec::Vec::new())
    }

    // string path = 2;


    pub fn get_path(&self) -> &str {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }

    // int64 number_of_entries = 3;


    pub fn get_number_of_entries(&self) -> i64 {
        self.number_of_entries
    }
    pub fn clear_number_of_entries(&mut self) {
        self.number_of_entries = 0;
    }

    // Param is passed by value, moved
    pub fn set_number_of_entries(&mut self, v: i64) {
        self.number_of_entries = v;
    }

    // uint64 min_ts = 4;


    pub fn get_min_ts(&self) -> u64 {
        self.min_ts
    }
    pub fn clear_min_ts(&mut self) {
        self.min_ts = 0;
    }

    // Param is passed by value, moved
    pub fn set_min_ts(&mut self, v: u64) {
        self.min_ts = v;
    }

    // uint64 max_ts = 5;


    pub fn get_max_ts(&self) -> u64 {
        self.max_ts
    }
    pub fn clear_max_ts(&mut self) {
        self.max_ts = 0;
    }

    // Param is passed by value, moved
    pub fn set_max_ts(&mut self, v: u64) {
        self.max_ts = v;
    }

    // uint64 resolved_ts = 6;


    pub fn get_resolved_ts(&self) -> u64 {
        self.resolved_ts
    }
    pub fn clear_resolved_ts(&mut self) {
        self.resolved_ts = 0;
    }

    // Param is passed by value, moved
    pub fn set_resolved_ts(&mut self, v: u64) {
        self.resolved_ts = v;
    }

    // int64 region_id = 7;


    pub fn get_region_id(&self) -> i64 {
        self.region_id
    }
    pub fn clear_region_id(&mut self) {
        self.region_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_region_id(&mut self, v: i64) {
        self.region_id = v;
    }

    // bytes start_key = 8;


    pub fn get_start_key(&self) -> &[u8] {
        &self.start_key
    }
    pub fn clear_start_key(&mut self) {
        self.start_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_start_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.start_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.start_key
    }

    // Take field
    pub fn take_start_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.start_key, ::std::vec::Vec::new())
    }

    // bytes end_key = 9;


    pub fn get_end_key(&self) -> &[u8] {
        &self.end_key
    }
    pub fn clear_end_key(&mut self) {
        self.end_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_end_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.end_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_end_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.end_key
    }

    // Take field
    pub fn take_end_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.end_key, ::std::vec::Vec::new())
    }

    // string cf = 10;


    pub fn get_cf(&self) -> &str {
        &self.cf
    }
    pub fn clear_cf(&mut self) {
        self.cf.clear();
    }

    // Param is passed by value, moved
    pub fn set_cf(&mut self, v: ::std::string::String) {
        self.cf = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cf(&mut self) -> &mut ::std::string::String {
        &mut self.cf
    }

    // Take field
    pub fn take_cf(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cf, ::std::string::String::new())
    }

    // .backup.FileType type = 11;


    pub fn get_type(&self) -> FileType {
        self.r_type
    }
    pub fn clear_type(&mut self) {
        self.r_type = FileType::Delete;
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: FileType) {
        self.r_type = v;
    }

    // bool is_meta = 12;


    pub fn get_is_meta(&self) -> bool {
        self.is_meta
    }
    pub fn clear_is_meta(&mut self) {
        self.is_meta = false;
    }

    // Param is passed by value, moved
    pub fn set_is_meta(&mut self, v: bool) {
        self.is_meta = v;
    }

    // int64 table_id = 13;


    pub fn get_table_id(&self) -> i64 {
        self.table_id
    }
    pub fn clear_table_id(&mut self) {
        self.table_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_table_id(&mut self, v: i64) {
        self.table_id = v;
    }

    // uint64 length = 14;


    pub fn get_length(&self) -> u64 {
        self.length
    }
    pub fn clear_length(&mut self) {
        self.length = 0;
    }

    // Param is passed by value, moved
    pub fn set_length(&mut self, v: u64) {
        self.length = v;
    }

    // uint64 min_begin_ts_in_default_cf = 15;


    pub fn get_min_begin_ts_in_default_cf(&self) -> u64 {
        self.min_begin_ts_in_default_cf
    }
    pub fn clear_min_begin_ts_in_default_cf(&mut self) {
        self.min_begin_ts_in_default_cf = 0;
    }

    // Param is passed by value, moved
    pub fn set_min_begin_ts_in_default_cf(&mut self, v: u64) {
        self.min_begin_ts_in_default_cf = v;
    }
}

impl ::protobuf::Message for DataFileInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.sha256)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.number_of_entries = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.min_ts = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.max_ts = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.resolved_ts = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.region_id = tmp;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.start_key)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.end_key)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cf)?;
                },
                11 => {
                    if wire_type == ::protobuf::wire_format::WireTypeVarint {self.r_type = is.read_enum()?;} else {return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));}
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_meta = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.table_id = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.length = tmp;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.min_begin_ts_in_default_cf = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.sha256.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.sha256);
        }
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.path);
        }
        if self.number_of_entries != 0 {
            my_size += ::protobuf::rt::value_size(3, self.number_of_entries, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.min_ts != 0 {
            my_size += ::protobuf::rt::value_size(4, self.min_ts, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.max_ts != 0 {
            my_size += ::protobuf::rt::value_size(5, self.max_ts, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.resolved_ts != 0 {
            my_size += ::protobuf::rt::value_size(6, self.resolved_ts, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.region_id != 0 {
            my_size += ::protobuf::rt::value_size(7, self.region_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.start_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(8, &self.start_key);
        }
        if !self.end_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(9, &self.end_key);
        }
        if !self.cf.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.cf);
        }
        if self.r_type != FileType::Delete {
            my_size += ::protobuf::rt::enum_size(11, self.r_type);
        }
        if self.is_meta != false {
            my_size += 2;
        }
        if self.table_id != 0 {
            my_size += ::protobuf::rt::value_size(13, self.table_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.length != 0 {
            my_size += ::protobuf::rt::value_size(14, self.length, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.min_begin_ts_in_default_cf != 0 {
            my_size += ::protobuf::rt::value_size(15, self.min_begin_ts_in_default_cf, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.sha256.is_empty() {
            os.write_bytes(1, &self.sha256)?;
        }
        if !self.path.is_empty() {
            os.write_string(2, &self.path)?;
        }
        if self.number_of_entries != 0 {
            os.write_int64(3, self.number_of_entries)?;
        }
        if self.min_ts != 0 {
            os.write_uint64(4, self.min_ts)?;
        }
        if self.max_ts != 0 {
            os.write_uint64(5, self.max_ts)?;
        }
        if self.resolved_ts != 0 {
            os.write_uint64(6, self.resolved_ts)?;
        }
        if self.region_id != 0 {
            os.write_int64(7, self.region_id)?;
        }
        if !self.start_key.is_empty() {
            os.write_bytes(8, &self.start_key)?;
        }
        if !self.end_key.is_empty() {
            os.write_bytes(9, &self.end_key)?;
        }
        if !self.cf.is_empty() {
            os.write_string(10, &self.cf)?;
        }
        if self.r_type != FileType::Delete {
            os.write_enum(11, self.r_type.value())?;
        }
        if self.is_meta != false {
            os.write_bool(12, self.is_meta)?;
        }
        if self.table_id != 0 {
            os.write_int64(13, self.table_id)?;
        }
        if self.length != 0 {
            os.write_uint64(14, self.length)?;
        }
        if self.min_begin_ts_in_default_cf != 0 {
            os.write_uint64(15, self.min_begin_ts_in_default_cf)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DataFileInfo {
        DataFileInfo::new()
    }

    fn default_instance() -> &'static DataFileInfo {
        static mut instance: ::protobuf::lazy::Lazy<DataFileInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DataFileInfo,
        };
        unsafe {
            instance.get(DataFileInfo::new)
        }
    }
}

impl ::protobuf::Clear for DataFileInfo {
    fn clear(&mut self) {
        self.sha256.clear();
        self.path.clear();
        self.number_of_entries = 0;
        self.min_ts = 0;
        self.max_ts = 0;
        self.resolved_ts = 0;
        self.region_id = 0;
        self.start_key.clear();
        self.end_key.clear();
        self.cf.clear();
        self.r_type = FileType::Delete;
        self.is_meta = false;
        self.table_id = 0;
        self.length = 0;
        self.min_begin_ts_in_default_cf = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for DataFileInfo {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.sha256, "sha256", buf);
        ::protobuf::PbPrint::fmt(&self.path, "path", buf);
        ::protobuf::PbPrint::fmt(&self.number_of_entries, "number_of_entries", buf);
        ::protobuf::PbPrint::fmt(&self.min_ts, "min_ts", buf);
        ::protobuf::PbPrint::fmt(&self.max_ts, "max_ts", buf);
        ::protobuf::PbPrint::fmt(&self.resolved_ts, "resolved_ts", buf);
        ::protobuf::PbPrint::fmt(&self.region_id, "region_id", buf);
        ::protobuf::PbPrint::fmt(&self.start_key, "start_key", buf);
        ::protobuf::PbPrint::fmt(&self.end_key, "end_key", buf);
        ::protobuf::PbPrint::fmt(&self.cf, "cf", buf);
        ::protobuf::PbPrint::fmt(&self.r_type, "r_type", buf);
        ::protobuf::PbPrint::fmt(&self.is_meta, "is_meta", buf);
        ::protobuf::PbPrint::fmt(&self.table_id, "table_id", buf);
        ::protobuf::PbPrint::fmt(&self.length, "length", buf);
        ::protobuf::PbPrint::fmt(&self.min_begin_ts_in_default_cf, "min_begin_ts_in_default_cf", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for DataFileInfo {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.sha256, "sha256", &mut s);
        ::protobuf::PbPrint::fmt(&self.path, "path", &mut s);
        ::protobuf::PbPrint::fmt(&self.number_of_entries, "number_of_entries", &mut s);
        ::protobuf::PbPrint::fmt(&self.min_ts, "min_ts", &mut s);
        ::protobuf::PbPrint::fmt(&self.max_ts, "max_ts", &mut s);
        ::protobuf::PbPrint::fmt(&self.resolved_ts, "resolved_ts", &mut s);
        ::protobuf::PbPrint::fmt(&self.region_id, "region_id", &mut s);
        ::protobuf::PbPrint::fmt(&self.start_key, "start_key", &mut s);
        ::protobuf::PbPrint::fmt(&self.end_key, "end_key", &mut s);
        ::protobuf::PbPrint::fmt(&self.cf, "cf", &mut s);
        ::protobuf::PbPrint::fmt(&self.r_type, "r_type", &mut s);
        ::protobuf::PbPrint::fmt(&self.is_meta, "is_meta", &mut s);
        ::protobuf::PbPrint::fmt(&self.table_id, "table_id", &mut s);
        ::protobuf::PbPrint::fmt(&self.length, "length", &mut s);
        ::protobuf::PbPrint::fmt(&self.min_begin_ts_in_default_cf, "min_begin_ts_in_default_cf", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for DataFileInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StreamBackupError {
    // message fields
    pub happen_at: u64,
    pub error_code: ::std::string::String,
    pub error_message: ::std::string::String,
    pub store_id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StreamBackupError {
    fn default() -> &'a StreamBackupError {
        <StreamBackupError as ::protobuf::Message>::default_instance()
    }
}

impl StreamBackupError {
    pub fn new() -> StreamBackupError {
        ::std::default::Default::default()
    }

    // uint64 happen_at = 1;


    pub fn get_happen_at(&self) -> u64 {
        self.happen_at
    }
    pub fn clear_happen_at(&mut self) {
        self.happen_at = 0;
    }

    // Param is passed by value, moved
    pub fn set_happen_at(&mut self, v: u64) {
        self.happen_at = v;
    }

    // string error_code = 2;


    pub fn get_error_code(&self) -> &str {
        &self.error_code
    }
    pub fn clear_error_code(&mut self) {
        self.error_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_error_code(&mut self, v: ::std::string::String) {
        self.error_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error_code(&mut self) -> &mut ::std::string::String {
        &mut self.error_code
    }

    // Take field
    pub fn take_error_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error_code, ::std::string::String::new())
    }

    // string error_message = 3;


    pub fn get_error_message(&self) -> &str {
        &self.error_message
    }
    pub fn clear_error_message(&mut self) {
        self.error_message.clear();
    }

    // Param is passed by value, moved
    pub fn set_error_message(&mut self, v: ::std::string::String) {
        self.error_message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error_message(&mut self) -> &mut ::std::string::String {
        &mut self.error_message
    }

    // Take field
    pub fn take_error_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error_message, ::std::string::String::new())
    }

    // uint64 store_id = 4;


    pub fn get_store_id(&self) -> u64 {
        self.store_id
    }
    pub fn clear_store_id(&mut self) {
        self.store_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_store_id(&mut self, v: u64) {
        self.store_id = v;
    }
}

impl ::protobuf::Message for StreamBackupError {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.happen_at = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error_code)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error_message)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.store_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.happen_at != 0 {
            my_size += ::protobuf::rt::value_size(1, self.happen_at, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.error_code.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.error_code);
        }
        if !self.error_message.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.error_message);
        }
        if self.store_id != 0 {
            my_size += ::protobuf::rt::value_size(4, self.store_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.happen_at != 0 {
            os.write_uint64(1, self.happen_at)?;
        }
        if !self.error_code.is_empty() {
            os.write_string(2, &self.error_code)?;
        }
        if !self.error_message.is_empty() {
            os.write_string(3, &self.error_message)?;
        }
        if self.store_id != 0 {
            os.write_uint64(4, self.store_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StreamBackupError {
        StreamBackupError::new()
    }

    fn default_instance() -> &'static StreamBackupError {
        static mut instance: ::protobuf::lazy::Lazy<StreamBackupError> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StreamBackupError,
        };
        unsafe {
            instance.get(StreamBackupError::new)
        }
    }
}

impl ::protobuf::Clear for StreamBackupError {
    fn clear(&mut self) {
        self.happen_at = 0;
        self.error_code.clear();
        self.error_message.clear();
        self.store_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for StreamBackupError {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.happen_at, "happen_at", buf);
        ::protobuf::PbPrint::fmt(&self.error_code, "error_code", buf);
        ::protobuf::PbPrint::fmt(&self.error_message, "error_message", buf);
        ::protobuf::PbPrint::fmt(&self.store_id, "store_id", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for StreamBackupError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.happen_at, "happen_at", &mut s);
        ::protobuf::PbPrint::fmt(&self.error_code, "error_code", &mut s);
        ::protobuf::PbPrint::fmt(&self.error_message, "error_message", &mut s);
        ::protobuf::PbPrint::fmt(&self.store_id, "store_id", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for StreamBackupError {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CompressionType {
    Unknown = 0,
    Lz4 = 1,
    Snappy = 2,
    Zstd = 3,
}

impl ::protobuf::ProtobufEnum for CompressionType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CompressionType> {
        match value {
            0 => ::std::option::Option::Some(CompressionType::Unknown),
            1 => ::std::option::Option::Some(CompressionType::Lz4),
            2 => ::std::option::Option::Some(CompressionType::Snappy),
            3 => ::std::option::Option::Some(CompressionType::Zstd),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CompressionType] = &[
            CompressionType::Unknown,
            CompressionType::Lz4,
            CompressionType::Snappy,
            CompressionType::Zstd,
        ];
        values
    }
}

impl ::std::marker::Copy for CompressionType {
}

impl ::protobuf::PbPrint for CompressionType {
    fn fmt(&self, name: &str, buf: &mut String) {
        use std::fmt::Write;
        if *self == CompressionType::default() {
            return;
        }
        ::protobuf::push_field_start(name, buf);
        write!(buf, "{:?}", self).unwrap();
    }
}

impl ::std::default::Default for CompressionType {
    fn default() -> Self {
        CompressionType::Unknown
    }
}

impl ::protobuf::reflect::ProtobufValue for CompressionType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum FileType {
    Delete = 0,
    Put = 1,
}

impl ::protobuf::ProtobufEnum for FileType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<FileType> {
        match value {
            0 => ::std::option::Option::Some(FileType::Delete),
            1 => ::std::option::Option::Some(FileType::Put),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [FileType] = &[
            FileType::Delete,
            FileType::Put,
        ];
        values
    }
}

impl ::std::marker::Copy for FileType {
}

impl ::protobuf::PbPrint for FileType {
    fn fmt(&self, name: &str, buf: &mut String) {
        use std::fmt::Write;
        if *self == FileType::default() {
            return;
        }
        ::protobuf::push_field_start(name, buf);
        write!(buf, "{:?}", self).unwrap();
    }
}

impl ::std::default::Default for FileType {
    fn default() -> Self {
        FileType::Delete
    }
}

impl ::protobuf::reflect::ProtobufValue for FileType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}
pub use super::brpb_grpc::*;
