// This file is generated by rust-protobuf 2.8.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `disk_usage.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_0;

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum DiskUsage {
    Normal = 0,
    AlmostFull = 1,
    AlreadyFull = 2,
}

impl ::protobuf::ProtobufEnum for DiskUsage {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<DiskUsage> {
        match value {
            0 => ::std::option::Option::Some(DiskUsage::Normal),
            1 => ::std::option::Option::Some(DiskUsage::AlmostFull),
            2 => ::std::option::Option::Some(DiskUsage::AlreadyFull),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [DiskUsage] = &[
            DiskUsage::Normal,
            DiskUsage::AlmostFull,
            DiskUsage::AlreadyFull,
        ];
        values
    }
}

impl ::std::marker::Copy for DiskUsage {
}

impl ::protobuf::PbPrint for DiskUsage {
    fn fmt(&self, name: &str, buf: &mut String) {
        use std::fmt::Write;
        if *self == DiskUsage::default() {
            return;
        }
        ::protobuf::push_field_start(name, buf);
        write!(buf, "{:?}", self).unwrap();
    }
}

impl ::std::default::Default for DiskUsage {
    fn default() -> Self {
        DiskUsage::Normal
    }
}

impl ::protobuf::reflect::ProtobufValue for DiskUsage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}
